//
// File generated by rootcint at Fri Oct 12 01:08:48 2018

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME libLHCfSC
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "libLHCfSC.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::LHCFSDATA_HEADER LHCFSDATA_HEADER;
      #else
      class LHCFSDATA_HEADER  {
         public:
         //friend XX;
         unsigned char headerword[8]; //
         char word[8]; //
         int version; //
         int size; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CPWS_CH CPWS_CH;
      #else
      class CPWS_CH  {
         public:
         //friend XX;
         float vmon; //Voltage  [Volt]
         float imon; //Current. The unit depend on the power supply board.
         unsigned int status; //Status flag, bit field
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CPWS1_DATA CPWS1_DATA;
      #else
      class CPWS1_DATA  {
         public:
         //friend XX;
         unsigned int status; //
         ::CPWS_CH slot0[12]; //[A1833] H.V. board (12 ch)   for 20mm-(ch 00->11) 
         ::CPWS_CH slot1[12]; //[A1833] H.V. board.          for 20mm-(ch 12->15) and 40mm-(ch 00->07) 
         ::CPWS_CH slot2[12]; //[A1833] H.V. board.          for 40mm-(ch 08->15) 
         ::CPWS_CH slot3[6]; //[A1513B] L.V. board. for ???
         ::CPWS_CH slot5[6]; //[A1513B] L.V. board. for ???
         float temperature[6]; //Temperateure of each board. [degrees centigrage]
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CPWS2_DATA CPWS2_DATA;
      #else
      class CPWS2_DATA  {
         public:
         //friend XX;
         unsigned int status; //
         ::CPWS_CH slot0[12]; //[A1833] H.V. board. for 25mm-12,... 25mm-07 
         ::CPWS_CH slot1[12]; //[A1833] H.V. board. for 25mm-12,... 32mm-07
         ::CPWS_CH slot2[12]; //[A1833] H.V. board. for 32mm-08,... 32mm-15 and laser monitor 
         ::CPWS_CH slot3[12]; //[??????] H.V. board. for Silicon
         ::CPWS_CH slot4[6]; //[A1513B] L.V. board. for F.C. and Manipulator
         float temperature[6]; //Temperateure of each board. [degrees centigrage]
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::AGILENT_CH AGILENT_CH;
      #else
      class AGILENT_CH  {
         public:
         //friend XX;
         unsigned int status; //(MSB) "5b Operation Status" + "16b Questionable Status" (LSB)
         float vmon; //
         float imon; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::AGILENT_MOD AGILENT_MOD;
      #else
      class AGILENT_MOD  {
         public:
         //friend XX;
         unsigned int status; //(MSB) "1bit ON/OFF" + "8bit Std ev Status" + "8bit Status byte" (LSB)
         ::AGILENT_CH ch[4]; //single ch of LV Power Supplies for Arm2 Silicon System
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::AGILENT_DATA AGILENT_DATA;
      #else
      class AGILENT_DATA  {
         public:
         //friend XX;
         unsigned int status; //bits: (MSB) 4_unused + 4_warning + 4_err + 4_on/off (LSB)
         ::AGILENT_MOD mod[4]; //LV Power Supplies for Arm2 Silicon System
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TRHX_DATA TRHX_DATA;
      #else
      class TRHX_DATA  {
         public:
         //friend XX;
         unsigned int status; //
         float temp[12]; //temperature sensors on Arm2 detector
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ENCODER_DATA ENCODER_DATA;
      #else
      class ENCODER_DATA  {
         public:
         //friend XX;
         unsigned int status; //
         float encoder1; //read posistion of Arm1 manipulator
         float encoder2; //read posistion of Arm2 manipulator
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ADC_DATA ADC_DATA;
      #else
      class ADC_DATA  {
         public:
         //friend XX;
         unsigned int status; //
         unsigned short adc[16]; //
         float vol[16]; //
         float cal[16]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::LHCFSDATA LHCFSDATA;
      #else
      class LHCFSDATA  {
         public:
         //friend XX;
         ::LHCFSDATA_HEADER header; //
         unsigned int number; //
         int time; //
         ::CPWS1_DATA cpws1; //
         ::CPWS2_DATA cpws2; //
         ::AGILENT_DATA ag; //
         ::TRHX_DATA trhx; //
         ::ENCODER_DATA encoder; //
         ::ADC_DATA adc; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_Arm DIP_LHCF_Arm;
      #else
      class DIP_LHCF_Arm  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char STATUS[24]; //
         char FC_STATUS[24]; //
         char POSITION_STR[24]; //
         int RUNNUMBER; //
         char dummy[4]; //
         double POSITION_DBL; //
         double FC_RATE; //
         double SHOWER0; //
         double SHOWER1; //
         double BEAM_POS0_H; //
         double BEAM_POS0_V; //
         double BEAM_POS1_H; //
         double BEAM_POS1_V; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_COINCIDENCE DIP_LHCF_COINCIDENCE;
      #else
      class DIP_LHCF_COINCIDENCE  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char STATUS[24]; //
         double FC1_FC2_RATE; //
         double SHOWER1_SHOWER2_RATE; //
         double FC2_SHOWER1_RATE; //
         double FC1_SHOWER2_RATE; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_EXPTSTATUS DIP_LHCF_EXPTSTATUS;
      #else
      class DIP_LHCF_EXPTSTATUS  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char Status[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_INTERLOCK DIP_LHCF_INTERLOCK;
      #else
      class DIP_LHCF_INTERLOCK  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char dummy[4]; //
         int beam_injection_accept; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_LUMINOSITY DIP_LHCF_LUMINOSITY;
      #else
      class DIP_LHCF_LUMINOSITY  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         float Lumi_TotInst; //
         char dummy[4]; //
         char Source[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_HS_LHC_INJECTION DIP_LHCF_HS_LHC_INJECTION;
      #else
      class DIP_LHCF_HS_LHC_INJECTION  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char DIP_DEFAULT[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_HS_LHC_ADJUST DIP_LHCF_HS_LHC_ADJUST;
      #else
      class DIP_LHCF_HS_LHC_ADJUST  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char DIP_DEFAULT[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_HS_LHC_BEAMDUMP DIP_LHCF_HS_LHC_BEAMDUMP;
      #else
      class DIP_LHCF_HS_LHC_BEAMDUMP  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char DIP_DEFAULT[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_BPM DIP_ACC_BEAM_BPM;
      #else
      class DIP_ACC_BEAM_BPM  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         double verticalPos[4]; //
         double horizontalPos[4]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_BPM_M DIP_ACC_BEAM_BPM_M;
      #else
      class DIP_ACC_BEAM_BPM_M  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char bpmNames[8][24]; //
         int statusV[8]; //
         int statusH[8]; //
         double errorV[8]; //
         double errorH[8]; //
         double verticalPos[8]; //
         double horizontalPos[8]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_ENERGY DIP_ACC_BEAM_ENERGY;
      #else
      class DIP_ACC_BEAM_ENERGY  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int payload; //
         char dummy[4]; //for machines with 64 bit CPU
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_INTENSITY DIP_ACC_BEAM_INTENSITY;
      #else
      class DIP_ACC_BEAM_INTENSITY  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         double totalIntensity; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_INTENSITYPERBUNCH DIP_ACC_BEAM_INTENSITYPERBUNCH;
      #else
      class DIP_ACC_BEAM_INTENSITYPERBUNCH  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         float averageBunchIntensities[3564]; //
         double wholeBeamIntensity; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S DIP_ACC_BEAM_INTENSITYPERBUNCH_S;
      #else
      class DIP_ACC_BEAM_INTENSITYPERBUNCH_S  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int filledbunches[500]; //
         float averageBunchIntensities[500]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_LUMINOSITYAVERAGE DIP_ACC_BEAM_LUMINOSITYAVERAGE;
      #else
      class DIP_ACC_BEAM_LUMINOSITYAVERAGE  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int acqMode; //
         char dummy[4]; //
         double meanLuminosity; //
         double meanCrossingAngle; //
         double meanLuminosityError; //
         double meanCrossingAngleError; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH DIP_ACC_BEAM_LUMINOSITYPERBUNCH;
      #else
      class DIP_ACC_BEAM_LUMINOSITYPERBUNCH  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int acqMode; //
         char dummy[4]; //
         double bunchByBunchLuminosity[3564]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_LUMINOSITYSCAN DIP_ACC_BEAM_LUMINOSITYSCAN;
      #else
      class DIP_ACC_BEAM_LUMINOSITYSCAN  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char LumiScan_Status[24]; //
         bool Acquisition_Flag; //
         char dummy[4]; //
         char Plane[24]; //
         int IP; //
         int Beam; //
         double Step_Progress; //
         double Nominal_Separation; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_SIZE DIP_ACC_BEAM_SIZE;
      #else
      class DIP_ACC_BEAM_SIZE  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char acqTime[24]; //
         char cycleName[24]; //
         double positionSet1; //
         double positionSet2; //
         int acqCounter; //
         int acqState; //
         int nbDataSets; //
         int planeSet1; //
         int planeSet2; //
         char dummy[4]; //
         double sigmaSet1; //
         double sigmaSet2; //
         char deviceName[24]; //
         char cycleTime[24]; //
         char acqMsg[24]; //
         double amplitudeSet2; //
         double amplitudeSet1; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_SIZE_AVERAGE DIP_ACC_BEAM_SIZE_AVERAGE;
      #else
      class DIP_ACC_BEAM_SIZE_AVERAGE  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         double sigmaH; //
         double sigmaV; //
         double emittanceH; //
         double emittanceV; //
         double errorSigmaH; //
         double errorSigmaV; //
         int acqMode; //
         char dummy[4]; //Added at 23 Mar. 2010
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_WIRESCANNER DIP_ACC_BEAM_WIRESCANNER;
      #else
      class DIP_ACC_BEAM_WIRESCANNER  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int acqMode; //
         char dummy[4]; //for machines with 64 bit CPU
         double SIGMA_OUT[3564]; //
         double SIGMA_IN[3564]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_BEAM_BETASTAR DIP_ACC_BEAM_BETASTAR;
      #else
      class DIP_ACC_BEAM_BETASTAR  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int payload; //
         char dummy[4]; //for machines with 64 bit CPU
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_HS_LHC_INJECTION DIP_ACC_HS_LHC_INJECTION;
      #else
      class DIP_ACC_HS_LHC_INJECTION  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char value[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_HS_LHC_ADJUST DIP_ACC_HS_LHC_ADJUST;
      #else
      class DIP_ACC_HS_LHC_ADJUST  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char value[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_HS_LHC_BEAMDUMP DIP_ACC_HS_LHC_BEAMDUMP;
      #else
      class DIP_ACC_HS_LHC_BEAMDUMP  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char value[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_BEAMMODE DIP_ACC_RUNCONTROL_BEAMMODE;
      #else
      class DIP_ACC_RUNCONTROL_BEAMMODE  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char value[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_BUNCHCONFIG DIP_ACC_RUNCONTROL_BUNCHCONFIG;
      #else
      class DIP_ACC_RUNCONTROL_BUNCHCONFIG  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int value[2808]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_FILLNUMBER DIP_ACC_RUNCONTROL_FILLNUMBER;
      #else
      class DIP_ACC_RUNCONTROL_FILLNUMBER  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int value; //
         char dummy[4]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_FILLSCHEMA DIP_ACC_RUNCONTROL_FILLSCHEMA;
      #else
      class DIP_ACC_RUNCONTROL_FILLSCHEMA  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int value; //
         char dummy[4]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_MACHINEMODE DIP_ACC_RUNCONTROL_MACHINEMODE;
      #else
      class DIP_ACC_RUNCONTROL_MACHINEMODE  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char value[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_PAGE DIP_ACC_RUNCONTROL_PAGE;
      #else
      class DIP_ACC_RUNCONTROL_PAGE  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char value[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_SAFEBEAM DIP_ACC_RUNCONTROL_SAFEBEAM;
      #else
      class DIP_ACC_RUNCONTROL_SAFEBEAM  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         int payload; //
         char dummy[4]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION DIP_ACC_RUNCONTROL_RUNCONFIGURATION;
      #else
      class DIP_ACC_RUNCONTROL_RUNCONFIGURATION  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char FILL_NO[24]; //
         char TARGET_ENERGY[24]; //
         char PARTICLE_TYPE_B1[24]; //
         char PARTICLE_TYPE_B2[24]; //
         char ACTIVE_INJECTION_SCHEME[24]; //
         char IP1_XING_V_MURAD[24]; //
         char IP1_NO_COLLISIONS[24]; //
         char IP2_XING_V_MURAD[24]; //
         char IP2_ALICE_V_MURAD[24]; //
         char IP2_NO_COLLISIONS[24]; //
         char IP5_XING_H_MURAD[24]; //
         char IP5_NO_COLLISIONS[24]; //
         char IP8_XING_H_MURAD[24]; //
         char IP8_LHCB_H_MURAD[24]; //
         char IP8_NO_COLLISIONS[24]; //
         char NO_BUNCHES[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_TIMING_POSTMORTEM DIP_ACC_TIMING_POSTMORTEM;
      #else
      class DIP_ACC_TIMING_POSTMORTEM  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         G__int64 oCounter; //
         int payload; //
         char dummy[4]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_TIMING_RXCLOCKS DIP_ACC_TIMING_RXCLOCKS;
      #else
      class DIP_ACC_TIMING_RXCLOCKS  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         float F40_B1; //
         float F40_B2; //
         float F40_REF; //
         char dummy[4]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_TIMING_RXFREV DIP_ACC_TIMING_RXFREV;
      #else
      class DIP_ACC_TIMING_RXFREV  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         float FREV_B1; //
         float FREV_B2; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ACC_MACHINE_COLLPOSITION DIP_ACC_MACHINE_COLLPOSITION;
      #else
      class DIP_ACC_MACHINE_COLLPOSITION  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         double lvdt_right_downstream; //
         double lvdt_gap_upstream; //
         double lvdt_left_downstream; //
         double lvdt_gap_downstream; //
         double lvdt_left_upstream; //
         double lvdt_right_upstream; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ATLAS_CLOCK_SELECTION DIP_ATLAS_CLOCK_SELECTION;
      #else
      class DIP_ATLAS_CLOCK_SELECTION  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char ORBIT[24]; //
         char BC[24]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ATLAS_FILLLUMI DIP_ATLAS_FILLLUMI;
      #else
      class DIP_ATLAS_FILLLUMI  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         float IntLumi_Recorded; //
         float IntLumi_Delivered_StableBeams; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ATLAS_LUMIPERBUNCH DIP_ATLAS_LUMIPERBUNCH;
      #else
      class DIP_ATLAS_LUMIPERBUNCH  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char Source[24]; //
         float Lumi_BunchInst[3564]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_ATLAS_LUMINOSITY DIP_ATLAS_LUMINOSITY;
      #else
      class DIP_ATLAS_LUMINOSITY  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         char Source[24]; //
         float VertexCount; //
         char dummy[4]; //
         double CollRate; //
         char CollRateSource[24]; //
         double CollRateIntTime; //
         double CollRateErr; //
         float Lumi_TotInst; //
         char dummy2[4]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::DIP_LHCF_DOSIMETER DIP_LHCF_DOSIMETER;
      #else
      class DIP_LHCF_DOSIMETER  {
         public:
         //friend XX;
         int Quality; //
         int Time; //
         G__int64 seu_count3V; //
         double doseHighSensitivity; //
         double doseMediumSensitivity; //
         double neutronsHighSensitivity; //
         double temp; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::LHCFDIPDATAH LHCFDIPDATAH;
      #else
      class LHCFDIPDATAH  {
         public:
         //friend XX;
         ::LHCFSDATA_HEADER header; //for identification of data type, version;  
         unsigned int number; //
         int time; //
         unsigned int status; //
         char dummy[4]; //
         ::DIP_LHCF_Arm Arm1; //
         ::DIP_LHCF_Arm Arm2; //
         ::DIP_LHCF_COINCIDENCE Coincidence; //
         ::DIP_LHCF_EXPTSTATUS LHCf_Status; //
         ::DIP_LHCF_INTERLOCK Interlock; //
         ::DIP_LHCF_LUMINOSITY LHCf_Luminosity; //
         ::DIP_LHCF_HS_LHC_INJECTION LHCf_Injection; //
         ::DIP_LHCF_HS_LHC_ADJUST LHCf_Adjust; //
         ::DIP_LHCF_HS_LHC_BEAMDUMP LHCf_Beamdump; //
         ::DIP_ACC_HS_LHC_INJECTION Dummy_LHC_Injection; //
         ::DIP_ACC_HS_LHC_ADJUST Dummy_LHC_Adjust; //
         ::DIP_ACC_HS_LHC_BEAMDUMP Dummy_LHC_Beamdump; //
         ::DIP_ACC_BEAM_BPM_M BPM_LSS1L_B1; //
         ::DIP_ACC_BEAM_BPM_M BPM_LSS1L_B2; //
         ::DIP_ACC_BEAM_BPM_M BPM_LSS1R_B1; //
         ::DIP_ACC_BEAM_BPM_M BPM_LSS1R_B2; //
         ::DIP_ACC_BEAM_ENERGY Energy; //
         ::DIP_ACC_BEAM_INTENSITY Beam1_intensity; //
         ::DIP_ACC_BEAM_INTENSITY Beam2_intensity; //
         ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S Beam1_intensityperbunch; //
         ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S Beam2_intensityperbunch; //
         ::DIP_ACC_BEAM_LUMINOSITYAVERAGE BranA_4L1_av; //
         ::DIP_ACC_BEAM_LUMINOSITYAVERAGE BranA_4R1_av; //
         ::DIP_ACC_BEAM_LUMINOSITYAVERAGE BranP_4L1_av; //
         ::DIP_ACC_BEAM_LUMINOSITYAVERAGE BranP_4R1_av; //
         ::DIP_ACC_BEAM_LUMINOSITYSCAN Lumiscan; //also recoded in LHCFDIPDATAVH 
         ::DIP_ACC_BEAM_SIZE_AVERAGE Beam1_size_average; //added instead of Beam1_size
         ::DIP_ACC_BEAM_SIZE_AVERAGE Beam2_size_average; //added instead of Beam2_size
         ::DIP_ACC_BEAM_BETASTAR Beta_star; //
         ::DIP_ACC_HS_LHC_INJECTION LHC_Injection; //
         ::DIP_ACC_HS_LHC_ADJUST LHC_Adjust; //
         ::DIP_ACC_HS_LHC_BEAMDUMP LHC_Beamdump; //
         ::DIP_ACC_RUNCONTROL_BEAMMODE BeamMode; //
         ::DIP_ACC_RUNCONTROL_FILLNUMBER Fillnumber; //data not filled from 07 May.2010
         ::DIP_ACC_RUNCONTROL_FILLSCHEMA Fillschema; //
         ::DIP_ACC_RUNCONTROL_MACHINEMODE Machinemode; //
         ::DIP_ACC_RUNCONTROL_PAGE Page1; //
         ::DIP_ACC_RUNCONTROL_SAFEBEAM Safebeam1; //
         ::DIP_ACC_RUNCONTROL_SAFEBEAM Safebeam2; //
         ::DIP_ACC_RUNCONTROL_SAFEBEAM Safebeam; //
         ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION BeamConfig; //added at 07 May.2010
         ::DIP_ACC_TIMING_POSTMORTEM Postmortem; //
         ::DIP_ACC_TIMING_RXCLOCKS Rxclocks; //
         ::DIP_ACC_TIMING_RXFREV Rxfrev; //
         ::DIP_ACC_MACHINE_COLLPOSITION Collpos_TCTH4L1B1; //
         ::DIP_ACC_MACHINE_COLLPOSITION Collpos_TCTH4R1B2; //
         ::DIP_ACC_MACHINE_COLLPOSITION Collpos_TCTVA4L1B1; //
         ::DIP_ACC_MACHINE_COLLPOSITION Collpos_TCTVA4R1B2; //
         ::DIP_ATLAS_CLOCK_SELECTION Atlasclock; //added at 02 Mar.2010
         ::DIP_ATLAS_FILLLUMI Atlas_filllumi; //
         ::DIP_ATLAS_FILLLUMI Atlas_filllumi_ions; //
         ::DIP_ATLAS_LUMIPERBUNCH Atlas_lumiperbunch; //
         ::DIP_ATLAS_LUMIPERBUNCH Atlas_lumiperbunch_ions; //
         ::DIP_ATLAS_LUMINOSITY Atlas_luminosity; //
         ::DIP_ATLAS_LUMINOSITY Atlas_luminosity_ions; //
         ::DIP_LHCF_DOSIMETER dosimeterL; //added at 02 Mar.2010
         ::DIP_LHCF_DOSIMETER dosimeterR; //added at 02 Mar.2010
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::LHCFDIPDATAL LHCFDIPDATAL;
      #else
      class LHCFDIPDATAL  {
         public:
         //friend XX;
         ::LHCFSDATA_HEADER header; //for identification of data type, version;  
         unsigned int number; //
         int time; //
         unsigned int status; //
         char dummy[4]; //
         ::DIP_ACC_BEAM_INTENSITYPERBUNCH Beam1_intensityperbunch; //
         ::DIP_ACC_BEAM_INTENSITYPERBUNCH Beam2_intensityperbunch; //
         ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH BranA_4L1_pb; //
         ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH BranA_4R1_pb; //
         ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH BranP_4L1_pb; //
         ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH BranP_4R1_pb; //
         ::DIP_ACC_RUNCONTROL_BUNCHCONFIG Beam1_bunchconfig; //
         ::DIP_ACC_RUNCONTROL_BUNCHCONFIG Beam2_bunchconfig; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B1H1; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B1H2; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B1V1; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B1V2; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B2H1; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B2H2; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B2V1; //
         ::DIP_ACC_BEAM_WIRESCANNER WireScanner_B2V2; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::LHCFDIPDATAVH LHCFDIPDATAVH;
      #else
      class LHCFDIPDATAVH  {
         public:
         //friend XX;
         ::LHCFSDATA_HEADER header; //for identification of data type, version;  
         unsigned int number; //
         int time; //
         unsigned int status; //
         char dummy[4]; //
         ::DIP_ACC_BEAM_LUMINOSITYSCAN Lumiscan; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void LHCFSDATA_HEADER_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void LHCFSDATA_HEADER_Dictionary();
   static void *new_LHCFSDATA_HEADER(void *p = 0);
   static void *newArray_LHCFSDATA_HEADER(Long_t size, void *p);
   static void delete_LHCFSDATA_HEADER(void *p);
   static void deleteArray_LHCFSDATA_HEADER(void *p);
   static void destruct_LHCFSDATA_HEADER(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCFSDATA_HEADER*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::LHCFSDATA_HEADER) == sizeof( ::ROOTShadow::Shadow::LHCFSDATA_HEADER));
      ::LHCFSDATA_HEADER *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::LHCFSDATA_HEADER),0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCFSDATA_HEADER", "./include/lhcfsdata.h", 40,
                  typeid(::LHCFSDATA_HEADER), ::ROOT::DefineBehavior(ptr, ptr),
                  &LHCFSDATA_HEADER_ShowMembers, &LHCFSDATA_HEADER_Dictionary, isa_proxy, 4,
                  sizeof(::LHCFSDATA_HEADER) );
      instance.SetNew(&new_LHCFSDATA_HEADER);
      instance.SetNewArray(&newArray_LHCFSDATA_HEADER);
      instance.SetDelete(&delete_LHCFSDATA_HEADER);
      instance.SetDeleteArray(&deleteArray_LHCFSDATA_HEADER);
      instance.SetDestructor(&destruct_LHCFSDATA_HEADER);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::LHCFSDATA_HEADER*)
   {
      return GenerateInitInstanceLocal((::LHCFSDATA_HEADER*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCFSDATA_HEADER*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void LHCFSDATA_HEADER_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFSDATA_HEADER*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void CPWS_CH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CPWS_CH_Dictionary();
   static void *new_CPWS_CH(void *p = 0);
   static void *newArray_CPWS_CH(Long_t size, void *p);
   static void delete_CPWS_CH(void *p);
   static void deleteArray_CPWS_CH(void *p);
   static void destruct_CPWS_CH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::CPWS_CH*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CPWS_CH) == sizeof( ::ROOTShadow::Shadow::CPWS_CH));
      ::CPWS_CH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CPWS_CH),0);
      static ::ROOT::TGenericClassInfo 
         instance("CPWS_CH", "./include/lhcfsdata.h", 51,
                  typeid(::CPWS_CH), ::ROOT::DefineBehavior(ptr, ptr),
                  &CPWS_CH_ShowMembers, &CPWS_CH_Dictionary, isa_proxy, 4,
                  sizeof(::CPWS_CH) );
      instance.SetNew(&new_CPWS_CH);
      instance.SetNewArray(&newArray_CPWS_CH);
      instance.SetDelete(&delete_CPWS_CH);
      instance.SetDeleteArray(&deleteArray_CPWS_CH);
      instance.SetDestructor(&destruct_CPWS_CH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::CPWS_CH*)
   {
      return GenerateInitInstanceLocal((::CPWS_CH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CPWS_CH*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CPWS_CH_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::CPWS_CH*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void CPWS1_DATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CPWS1_DATA_Dictionary();
   static void *new_CPWS1_DATA(void *p = 0);
   static void *newArray_CPWS1_DATA(Long_t size, void *p);
   static void delete_CPWS1_DATA(void *p);
   static void deleteArray_CPWS1_DATA(void *p);
   static void destruct_CPWS1_DATA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::CPWS1_DATA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CPWS1_DATA) == sizeof( ::ROOTShadow::Shadow::CPWS1_DATA));
      ::CPWS1_DATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CPWS1_DATA),0);
      static ::ROOT::TGenericClassInfo 
         instance("CPWS1_DATA", "./include/lhcfsdata.h", 57,
                  typeid(::CPWS1_DATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &CPWS1_DATA_ShowMembers, &CPWS1_DATA_Dictionary, isa_proxy, 4,
                  sizeof(::CPWS1_DATA) );
      instance.SetNew(&new_CPWS1_DATA);
      instance.SetNewArray(&newArray_CPWS1_DATA);
      instance.SetDelete(&delete_CPWS1_DATA);
      instance.SetDeleteArray(&deleteArray_CPWS1_DATA);
      instance.SetDestructor(&destruct_CPWS1_DATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::CPWS1_DATA*)
   {
      return GenerateInitInstanceLocal((::CPWS1_DATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CPWS1_DATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CPWS1_DATA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::CPWS1_DATA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void CPWS2_DATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CPWS2_DATA_Dictionary();
   static void *new_CPWS2_DATA(void *p = 0);
   static void *newArray_CPWS2_DATA(Long_t size, void *p);
   static void delete_CPWS2_DATA(void *p);
   static void deleteArray_CPWS2_DATA(void *p);
   static void destruct_CPWS2_DATA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::CPWS2_DATA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CPWS2_DATA) == sizeof( ::ROOTShadow::Shadow::CPWS2_DATA));
      ::CPWS2_DATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CPWS2_DATA),0);
      static ::ROOT::TGenericClassInfo 
         instance("CPWS2_DATA", "./include/lhcfsdata.h", 67,
                  typeid(::CPWS2_DATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &CPWS2_DATA_ShowMembers, &CPWS2_DATA_Dictionary, isa_proxy, 4,
                  sizeof(::CPWS2_DATA) );
      instance.SetNew(&new_CPWS2_DATA);
      instance.SetNewArray(&newArray_CPWS2_DATA);
      instance.SetDelete(&delete_CPWS2_DATA);
      instance.SetDeleteArray(&deleteArray_CPWS2_DATA);
      instance.SetDestructor(&destruct_CPWS2_DATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::CPWS2_DATA*)
   {
      return GenerateInitInstanceLocal((::CPWS2_DATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CPWS2_DATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CPWS2_DATA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::CPWS2_DATA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void AGILENT_CH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AGILENT_CH_Dictionary();
   static void *new_AGILENT_CH(void *p = 0);
   static void *newArray_AGILENT_CH(Long_t size, void *p);
   static void delete_AGILENT_CH(void *p);
   static void deleteArray_AGILENT_CH(void *p);
   static void destruct_AGILENT_CH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AGILENT_CH*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::AGILENT_CH) == sizeof( ::ROOTShadow::Shadow::AGILENT_CH));
      ::AGILENT_CH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::AGILENT_CH),0);
      static ::ROOT::TGenericClassInfo 
         instance("AGILENT_CH", "./include/lhcfsdata.h", 81,
                  typeid(::AGILENT_CH), ::ROOT::DefineBehavior(ptr, ptr),
                  &AGILENT_CH_ShowMembers, &AGILENT_CH_Dictionary, isa_proxy, 4,
                  sizeof(::AGILENT_CH) );
      instance.SetNew(&new_AGILENT_CH);
      instance.SetNewArray(&newArray_AGILENT_CH);
      instance.SetDelete(&delete_AGILENT_CH);
      instance.SetDeleteArray(&deleteArray_AGILENT_CH);
      instance.SetDestructor(&destruct_AGILENT_CH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AGILENT_CH*)
   {
      return GenerateInitInstanceLocal((::AGILENT_CH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AGILENT_CH*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AGILENT_CH_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::AGILENT_CH*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void AGILENT_MOD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AGILENT_MOD_Dictionary();
   static void *new_AGILENT_MOD(void *p = 0);
   static void *newArray_AGILENT_MOD(Long_t size, void *p);
   static void delete_AGILENT_MOD(void *p);
   static void deleteArray_AGILENT_MOD(void *p);
   static void destruct_AGILENT_MOD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AGILENT_MOD*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::AGILENT_MOD) == sizeof( ::ROOTShadow::Shadow::AGILENT_MOD));
      ::AGILENT_MOD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::AGILENT_MOD),0);
      static ::ROOT::TGenericClassInfo 
         instance("AGILENT_MOD", "./include/lhcfsdata.h", 86,
                  typeid(::AGILENT_MOD), ::ROOT::DefineBehavior(ptr, ptr),
                  &AGILENT_MOD_ShowMembers, &AGILENT_MOD_Dictionary, isa_proxy, 4,
                  sizeof(::AGILENT_MOD) );
      instance.SetNew(&new_AGILENT_MOD);
      instance.SetNewArray(&newArray_AGILENT_MOD);
      instance.SetDelete(&delete_AGILENT_MOD);
      instance.SetDeleteArray(&deleteArray_AGILENT_MOD);
      instance.SetDestructor(&destruct_AGILENT_MOD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AGILENT_MOD*)
   {
      return GenerateInitInstanceLocal((::AGILENT_MOD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AGILENT_MOD*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AGILENT_MOD_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::AGILENT_MOD*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void AGILENT_DATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AGILENT_DATA_Dictionary();
   static void *new_AGILENT_DATA(void *p = 0);
   static void *newArray_AGILENT_DATA(Long_t size, void *p);
   static void delete_AGILENT_DATA(void *p);
   static void deleteArray_AGILENT_DATA(void *p);
   static void destruct_AGILENT_DATA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AGILENT_DATA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::AGILENT_DATA) == sizeof( ::ROOTShadow::Shadow::AGILENT_DATA));
      ::AGILENT_DATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::AGILENT_DATA),0);
      static ::ROOT::TGenericClassInfo 
         instance("AGILENT_DATA", "./include/lhcfsdata.h", 91,
                  typeid(::AGILENT_DATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &AGILENT_DATA_ShowMembers, &AGILENT_DATA_Dictionary, isa_proxy, 4,
                  sizeof(::AGILENT_DATA) );
      instance.SetNew(&new_AGILENT_DATA);
      instance.SetNewArray(&newArray_AGILENT_DATA);
      instance.SetDelete(&delete_AGILENT_DATA);
      instance.SetDeleteArray(&deleteArray_AGILENT_DATA);
      instance.SetDestructor(&destruct_AGILENT_DATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AGILENT_DATA*)
   {
      return GenerateInitInstanceLocal((::AGILENT_DATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AGILENT_DATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AGILENT_DATA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::AGILENT_DATA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void TRHX_DATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TRHX_DATA_Dictionary();
   static void *new_TRHX_DATA(void *p = 0);
   static void *newArray_TRHX_DATA(Long_t size, void *p);
   static void delete_TRHX_DATA(void *p);
   static void deleteArray_TRHX_DATA(void *p);
   static void destruct_TRHX_DATA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TRHX_DATA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TRHX_DATA) == sizeof( ::ROOTShadow::Shadow::TRHX_DATA));
      ::TRHX_DATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TRHX_DATA),0);
      static ::ROOT::TGenericClassInfo 
         instance("TRHX_DATA", "./include/lhcfsdata.h", 99,
                  typeid(::TRHX_DATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &TRHX_DATA_ShowMembers, &TRHX_DATA_Dictionary, isa_proxy, 4,
                  sizeof(::TRHX_DATA) );
      instance.SetNew(&new_TRHX_DATA);
      instance.SetNewArray(&newArray_TRHX_DATA);
      instance.SetDelete(&delete_TRHX_DATA);
      instance.SetDeleteArray(&deleteArray_TRHX_DATA);
      instance.SetDestructor(&destruct_TRHX_DATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TRHX_DATA*)
   {
      return GenerateInitInstanceLocal((::TRHX_DATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TRHX_DATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TRHX_DATA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::TRHX_DATA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void ENCODER_DATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ENCODER_DATA_Dictionary();
   static void *new_ENCODER_DATA(void *p = 0);
   static void *newArray_ENCODER_DATA(Long_t size, void *p);
   static void delete_ENCODER_DATA(void *p);
   static void deleteArray_ENCODER_DATA(void *p);
   static void destruct_ENCODER_DATA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ENCODER_DATA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ENCODER_DATA) == sizeof( ::ROOTShadow::Shadow::ENCODER_DATA));
      ::ENCODER_DATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ENCODER_DATA),0);
      static ::ROOT::TGenericClassInfo 
         instance("ENCODER_DATA", "./include/lhcfsdata.h", 107,
                  typeid(::ENCODER_DATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &ENCODER_DATA_ShowMembers, &ENCODER_DATA_Dictionary, isa_proxy, 4,
                  sizeof(::ENCODER_DATA) );
      instance.SetNew(&new_ENCODER_DATA);
      instance.SetNewArray(&newArray_ENCODER_DATA);
      instance.SetDelete(&delete_ENCODER_DATA);
      instance.SetDeleteArray(&deleteArray_ENCODER_DATA);
      instance.SetDestructor(&destruct_ENCODER_DATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ENCODER_DATA*)
   {
      return GenerateInitInstanceLocal((::ENCODER_DATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ENCODER_DATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ENCODER_DATA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::ENCODER_DATA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void ADC_DATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ADC_DATA_Dictionary();
   static void *new_ADC_DATA(void *p = 0);
   static void *newArray_ADC_DATA(Long_t size, void *p);
   static void delete_ADC_DATA(void *p);
   static void deleteArray_ADC_DATA(void *p);
   static void destruct_ADC_DATA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ADC_DATA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ADC_DATA) == sizeof( ::ROOTShadow::Shadow::ADC_DATA));
      ::ADC_DATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ADC_DATA),0);
      static ::ROOT::TGenericClassInfo 
         instance("ADC_DATA", "./include/lhcfsdata.h", 115,
                  typeid(::ADC_DATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &ADC_DATA_ShowMembers, &ADC_DATA_Dictionary, isa_proxy, 4,
                  sizeof(::ADC_DATA) );
      instance.SetNew(&new_ADC_DATA);
      instance.SetNewArray(&newArray_ADC_DATA);
      instance.SetDelete(&delete_ADC_DATA);
      instance.SetDeleteArray(&deleteArray_ADC_DATA);
      instance.SetDestructor(&destruct_ADC_DATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ADC_DATA*)
   {
      return GenerateInitInstanceLocal((::ADC_DATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ADC_DATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ADC_DATA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::ADC_DATA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void LHCFSDATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void LHCFSDATA_Dictionary();
   static void *new_LHCFSDATA(void *p = 0);
   static void *newArray_LHCFSDATA(Long_t size, void *p);
   static void delete_LHCFSDATA(void *p);
   static void deleteArray_LHCFSDATA(void *p);
   static void destruct_LHCFSDATA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCFSDATA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::LHCFSDATA) == sizeof( ::ROOTShadow::Shadow::LHCFSDATA));
      ::LHCFSDATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::LHCFSDATA),0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCFSDATA", "./include/lhcfsdata.h", 129,
                  typeid(::LHCFSDATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &LHCFSDATA_ShowMembers, &LHCFSDATA_Dictionary, isa_proxy, 4,
                  sizeof(::LHCFSDATA) );
      instance.SetNew(&new_LHCFSDATA);
      instance.SetNewArray(&newArray_LHCFSDATA);
      instance.SetDelete(&delete_LHCFSDATA);
      instance.SetDeleteArray(&deleteArray_LHCFSDATA);
      instance.SetDestructor(&destruct_LHCFSDATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::LHCFSDATA*)
   {
      return GenerateInitInstanceLocal((::LHCFSDATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCFSDATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void LHCFSDATA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFSDATA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void TLHCFSDATA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TLHCFSDATA(void *p = 0);
   static void *newArray_TLHCFSDATA(Long_t size, void *p);
   static void delete_TLHCFSDATA(void *p);
   static void deleteArray_TLHCFSDATA(void *p);
   static void destruct_TLHCFSDATA(void *p);
   static void streamer_TLHCFSDATA(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TLHCFSDATA*)
   {
      ::TLHCFSDATA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TLHCFSDATA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TLHCFSDATA", ::TLHCFSDATA::Class_Version(), "./include/TLHCFSDATA.h", 9,
                  typeid(::TLHCFSDATA), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TLHCFSDATA::Dictionary, isa_proxy, 0,
                  sizeof(::TLHCFSDATA) );
      instance.SetNew(&new_TLHCFSDATA);
      instance.SetNewArray(&newArray_TLHCFSDATA);
      instance.SetDelete(&delete_TLHCFSDATA);
      instance.SetDeleteArray(&deleteArray_TLHCFSDATA);
      instance.SetDestructor(&destruct_TLHCFSDATA);
      instance.SetStreamerFunc(&streamer_TLHCFSDATA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TLHCFSDATA*)
   {
      return GenerateInitInstanceLocal((::TLHCFSDATA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TLHCFSDATA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_Arm_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_Arm_Dictionary();
   static void *new_DIP_LHCF_Arm(void *p = 0);
   static void *newArray_DIP_LHCF_Arm(Long_t size, void *p);
   static void delete_DIP_LHCF_Arm(void *p);
   static void deleteArray_DIP_LHCF_Arm(void *p);
   static void destruct_DIP_LHCF_Arm(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_Arm*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_Arm) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_Arm));
      ::DIP_LHCF_Arm *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_Arm),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_Arm", "./include/lhcfdipdata.h", 83,
                  typeid(::DIP_LHCF_Arm), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_Arm_ShowMembers, &DIP_LHCF_Arm_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_Arm) );
      instance.SetNew(&new_DIP_LHCF_Arm);
      instance.SetNewArray(&newArray_DIP_LHCF_Arm);
      instance.SetDelete(&delete_DIP_LHCF_Arm);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_Arm);
      instance.SetDestructor(&destruct_DIP_LHCF_Arm);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_Arm*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_Arm*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_Arm*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_Arm_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_Arm*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_COINCIDENCE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_COINCIDENCE_Dictionary();
   static void *new_DIP_LHCF_COINCIDENCE(void *p = 0);
   static void *newArray_DIP_LHCF_COINCIDENCE(Long_t size, void *p);
   static void delete_DIP_LHCF_COINCIDENCE(void *p);
   static void deleteArray_DIP_LHCF_COINCIDENCE(void *p);
   static void destruct_DIP_LHCF_COINCIDENCE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_COINCIDENCE*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_COINCIDENCE) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_COINCIDENCE));
      ::DIP_LHCF_COINCIDENCE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_COINCIDENCE),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_COINCIDENCE", "./include/lhcfdipdata.h", 101,
                  typeid(::DIP_LHCF_COINCIDENCE), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_COINCIDENCE_ShowMembers, &DIP_LHCF_COINCIDENCE_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_COINCIDENCE) );
      instance.SetNew(&new_DIP_LHCF_COINCIDENCE);
      instance.SetNewArray(&newArray_DIP_LHCF_COINCIDENCE);
      instance.SetDelete(&delete_DIP_LHCF_COINCIDENCE);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_COINCIDENCE);
      instance.SetDestructor(&destruct_DIP_LHCF_COINCIDENCE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_COINCIDENCE*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_COINCIDENCE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_COINCIDENCE*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_COINCIDENCE_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_COINCIDENCE*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_EXPTSTATUS_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_EXPTSTATUS_Dictionary();
   static void *new_DIP_LHCF_EXPTSTATUS(void *p = 0);
   static void *newArray_DIP_LHCF_EXPTSTATUS(Long_t size, void *p);
   static void delete_DIP_LHCF_EXPTSTATUS(void *p);
   static void deleteArray_DIP_LHCF_EXPTSTATUS(void *p);
   static void destruct_DIP_LHCF_EXPTSTATUS(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_EXPTSTATUS*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_EXPTSTATUS) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_EXPTSTATUS));
      ::DIP_LHCF_EXPTSTATUS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_EXPTSTATUS),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_EXPTSTATUS", "./include/lhcfdipdata.h", 111,
                  typeid(::DIP_LHCF_EXPTSTATUS), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_EXPTSTATUS_ShowMembers, &DIP_LHCF_EXPTSTATUS_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_EXPTSTATUS) );
      instance.SetNew(&new_DIP_LHCF_EXPTSTATUS);
      instance.SetNewArray(&newArray_DIP_LHCF_EXPTSTATUS);
      instance.SetDelete(&delete_DIP_LHCF_EXPTSTATUS);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_EXPTSTATUS);
      instance.SetDestructor(&destruct_DIP_LHCF_EXPTSTATUS);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_EXPTSTATUS*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_EXPTSTATUS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_EXPTSTATUS*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_EXPTSTATUS_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_EXPTSTATUS*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_INTERLOCK_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_INTERLOCK_Dictionary();
   static void *new_DIP_LHCF_INTERLOCK(void *p = 0);
   static void *newArray_DIP_LHCF_INTERLOCK(Long_t size, void *p);
   static void delete_DIP_LHCF_INTERLOCK(void *p);
   static void deleteArray_DIP_LHCF_INTERLOCK(void *p);
   static void destruct_DIP_LHCF_INTERLOCK(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_INTERLOCK*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_INTERLOCK) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_INTERLOCK));
      ::DIP_LHCF_INTERLOCK *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_INTERLOCK),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_INTERLOCK", "./include/lhcfdipdata.h", 117,
                  typeid(::DIP_LHCF_INTERLOCK), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_INTERLOCK_ShowMembers, &DIP_LHCF_INTERLOCK_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_INTERLOCK) );
      instance.SetNew(&new_DIP_LHCF_INTERLOCK);
      instance.SetNewArray(&newArray_DIP_LHCF_INTERLOCK);
      instance.SetDelete(&delete_DIP_LHCF_INTERLOCK);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_INTERLOCK);
      instance.SetDestructor(&destruct_DIP_LHCF_INTERLOCK);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_INTERLOCK*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_INTERLOCK*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_INTERLOCK*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_INTERLOCK_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_INTERLOCK*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_LUMINOSITY_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_LUMINOSITY_Dictionary();
   static void *new_DIP_LHCF_LUMINOSITY(void *p = 0);
   static void *newArray_DIP_LHCF_LUMINOSITY(Long_t size, void *p);
   static void delete_DIP_LHCF_LUMINOSITY(void *p);
   static void deleteArray_DIP_LHCF_LUMINOSITY(void *p);
   static void destruct_DIP_LHCF_LUMINOSITY(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_LUMINOSITY*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_LUMINOSITY) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_LUMINOSITY));
      ::DIP_LHCF_LUMINOSITY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_LUMINOSITY),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_LUMINOSITY", "./include/lhcfdipdata.h", 124,
                  typeid(::DIP_LHCF_LUMINOSITY), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_LUMINOSITY_ShowMembers, &DIP_LHCF_LUMINOSITY_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_LUMINOSITY) );
      instance.SetNew(&new_DIP_LHCF_LUMINOSITY);
      instance.SetNewArray(&newArray_DIP_LHCF_LUMINOSITY);
      instance.SetDelete(&delete_DIP_LHCF_LUMINOSITY);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_LUMINOSITY);
      instance.SetDestructor(&destruct_DIP_LHCF_LUMINOSITY);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_LUMINOSITY*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_LUMINOSITY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_LUMINOSITY*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_LUMINOSITY_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_LUMINOSITY*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_HS_LHC_INJECTION_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_HS_LHC_INJECTION_Dictionary();
   static void *new_DIP_LHCF_HS_LHC_INJECTION(void *p = 0);
   static void *newArray_DIP_LHCF_HS_LHC_INJECTION(Long_t size, void *p);
   static void delete_DIP_LHCF_HS_LHC_INJECTION(void *p);
   static void deleteArray_DIP_LHCF_HS_LHC_INJECTION(void *p);
   static void destruct_DIP_LHCF_HS_LHC_INJECTION(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_HS_LHC_INJECTION*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_HS_LHC_INJECTION) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_HS_LHC_INJECTION));
      ::DIP_LHCF_HS_LHC_INJECTION *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_HS_LHC_INJECTION),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_HS_LHC_INJECTION", "./include/lhcfdipdata.h", 132,
                  typeid(::DIP_LHCF_HS_LHC_INJECTION), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_HS_LHC_INJECTION_ShowMembers, &DIP_LHCF_HS_LHC_INJECTION_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_HS_LHC_INJECTION) );
      instance.SetNew(&new_DIP_LHCF_HS_LHC_INJECTION);
      instance.SetNewArray(&newArray_DIP_LHCF_HS_LHC_INJECTION);
      instance.SetDelete(&delete_DIP_LHCF_HS_LHC_INJECTION);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_HS_LHC_INJECTION);
      instance.SetDestructor(&destruct_DIP_LHCF_HS_LHC_INJECTION);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_HS_LHC_INJECTION*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_HS_LHC_INJECTION*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_INJECTION*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_HS_LHC_INJECTION_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_INJECTION*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_HS_LHC_ADJUST_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_HS_LHC_ADJUST_Dictionary();
   static void *new_DIP_LHCF_HS_LHC_ADJUST(void *p = 0);
   static void *newArray_DIP_LHCF_HS_LHC_ADJUST(Long_t size, void *p);
   static void delete_DIP_LHCF_HS_LHC_ADJUST(void *p);
   static void deleteArray_DIP_LHCF_HS_LHC_ADJUST(void *p);
   static void destruct_DIP_LHCF_HS_LHC_ADJUST(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_HS_LHC_ADJUST*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_HS_LHC_ADJUST) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_HS_LHC_ADJUST));
      ::DIP_LHCF_HS_LHC_ADJUST *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_HS_LHC_ADJUST),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_HS_LHC_ADJUST", "./include/lhcfdipdata.h", 138,
                  typeid(::DIP_LHCF_HS_LHC_ADJUST), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_HS_LHC_ADJUST_ShowMembers, &DIP_LHCF_HS_LHC_ADJUST_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_HS_LHC_ADJUST) );
      instance.SetNew(&new_DIP_LHCF_HS_LHC_ADJUST);
      instance.SetNewArray(&newArray_DIP_LHCF_HS_LHC_ADJUST);
      instance.SetDelete(&delete_DIP_LHCF_HS_LHC_ADJUST);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_HS_LHC_ADJUST);
      instance.SetDestructor(&destruct_DIP_LHCF_HS_LHC_ADJUST);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_HS_LHC_ADJUST*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_HS_LHC_ADJUST*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_ADJUST*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_HS_LHC_ADJUST_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_ADJUST*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_HS_LHC_BEAMDUMP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_HS_LHC_BEAMDUMP_Dictionary();
   static void *new_DIP_LHCF_HS_LHC_BEAMDUMP(void *p = 0);
   static void *newArray_DIP_LHCF_HS_LHC_BEAMDUMP(Long_t size, void *p);
   static void delete_DIP_LHCF_HS_LHC_BEAMDUMP(void *p);
   static void deleteArray_DIP_LHCF_HS_LHC_BEAMDUMP(void *p);
   static void destruct_DIP_LHCF_HS_LHC_BEAMDUMP(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_HS_LHC_BEAMDUMP*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_HS_LHC_BEAMDUMP) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_HS_LHC_BEAMDUMP));
      ::DIP_LHCF_HS_LHC_BEAMDUMP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_HS_LHC_BEAMDUMP),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_HS_LHC_BEAMDUMP", "./include/lhcfdipdata.h", 144,
                  typeid(::DIP_LHCF_HS_LHC_BEAMDUMP), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_HS_LHC_BEAMDUMP_ShowMembers, &DIP_LHCF_HS_LHC_BEAMDUMP_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_HS_LHC_BEAMDUMP) );
      instance.SetNew(&new_DIP_LHCF_HS_LHC_BEAMDUMP);
      instance.SetNewArray(&newArray_DIP_LHCF_HS_LHC_BEAMDUMP);
      instance.SetDelete(&delete_DIP_LHCF_HS_LHC_BEAMDUMP);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_HS_LHC_BEAMDUMP);
      instance.SetDestructor(&destruct_DIP_LHCF_HS_LHC_BEAMDUMP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_HS_LHC_BEAMDUMP*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_HS_LHC_BEAMDUMP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_BEAMDUMP*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_HS_LHC_BEAMDUMP_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_BEAMDUMP*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_BPM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_BPM_Dictionary();
   static void *new_DIP_ACC_BEAM_BPM(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_BPM(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_BPM(void *p);
   static void deleteArray_DIP_ACC_BEAM_BPM(void *p);
   static void destruct_DIP_ACC_BEAM_BPM(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_BPM*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_BPM) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_BPM));
      ::DIP_ACC_BEAM_BPM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_BPM),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_BPM", "./include/lhcfdipdata.h", 153,
                  typeid(::DIP_ACC_BEAM_BPM), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_BPM_ShowMembers, &DIP_ACC_BEAM_BPM_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_BPM) );
      instance.SetNew(&new_DIP_ACC_BEAM_BPM);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_BPM);
      instance.SetDelete(&delete_DIP_ACC_BEAM_BPM);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_BPM);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_BPM);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_BPM*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_BPM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BPM*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_BPM_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BPM*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_BPM_M_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_BPM_M_Dictionary();
   static void *new_DIP_ACC_BEAM_BPM_M(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_BPM_M(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_BPM_M(void *p);
   static void deleteArray_DIP_ACC_BEAM_BPM_M(void *p);
   static void destruct_DIP_ACC_BEAM_BPM_M(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_BPM_M*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_BPM_M) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_BPM_M));
      ::DIP_ACC_BEAM_BPM_M *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_BPM_M),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_BPM_M", "./include/lhcfdipdata.h", 161,
                  typeid(::DIP_ACC_BEAM_BPM_M), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_BPM_M_ShowMembers, &DIP_ACC_BEAM_BPM_M_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_BPM_M) );
      instance.SetNew(&new_DIP_ACC_BEAM_BPM_M);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_BPM_M);
      instance.SetDelete(&delete_DIP_ACC_BEAM_BPM_M);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_BPM_M);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_BPM_M);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_BPM_M*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_BPM_M*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BPM_M*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_BPM_M_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BPM_M*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_ENERGY_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_ENERGY_Dictionary();
   static void *new_DIP_ACC_BEAM_ENERGY(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_ENERGY(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_ENERGY(void *p);
   static void deleteArray_DIP_ACC_BEAM_ENERGY(void *p);
   static void destruct_DIP_ACC_BEAM_ENERGY(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_ENERGY*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_ENERGY) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_ENERGY));
      ::DIP_ACC_BEAM_ENERGY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_ENERGY),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_ENERGY", "./include/lhcfdipdata.h", 174,
                  typeid(::DIP_ACC_BEAM_ENERGY), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_ENERGY_ShowMembers, &DIP_ACC_BEAM_ENERGY_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_ENERGY) );
      instance.SetNew(&new_DIP_ACC_BEAM_ENERGY);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_ENERGY);
      instance.SetDelete(&delete_DIP_ACC_BEAM_ENERGY);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_ENERGY);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_ENERGY);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_ENERGY*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_ENERGY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_ENERGY*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_ENERGY_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_ENERGY*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_INTENSITY_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_INTENSITY_Dictionary();
   static void *new_DIP_ACC_BEAM_INTENSITY(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_INTENSITY(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_INTENSITY(void *p);
   static void deleteArray_DIP_ACC_BEAM_INTENSITY(void *p);
   static void destruct_DIP_ACC_BEAM_INTENSITY(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_INTENSITY*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_INTENSITY) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_INTENSITY));
      ::DIP_ACC_BEAM_INTENSITY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_INTENSITY),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_INTENSITY", "./include/lhcfdipdata.h", 181,
                  typeid(::DIP_ACC_BEAM_INTENSITY), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_INTENSITY_ShowMembers, &DIP_ACC_BEAM_INTENSITY_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_INTENSITY) );
      instance.SetNew(&new_DIP_ACC_BEAM_INTENSITY);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_INTENSITY);
      instance.SetDelete(&delete_DIP_ACC_BEAM_INTENSITY);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_INTENSITY);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_INTENSITY);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_INTENSITY*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_INTENSITY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITY*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_INTENSITY_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITY*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_INTENSITYPERBUNCH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_INTENSITYPERBUNCH_Dictionary();
   static void *new_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_INTENSITYPERBUNCH(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p);
   static void deleteArray_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p);
   static void destruct_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_INTENSITYPERBUNCH*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_INTENSITYPERBUNCH) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_INTENSITYPERBUNCH));
      ::DIP_ACC_BEAM_INTENSITYPERBUNCH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_INTENSITYPERBUNCH),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_INTENSITYPERBUNCH", "./include/lhcfdipdata.h", 189,
                  typeid(::DIP_ACC_BEAM_INTENSITYPERBUNCH), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_INTENSITYPERBUNCH_ShowMembers, &DIP_ACC_BEAM_INTENSITYPERBUNCH_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_INTENSITYPERBUNCH) );
      instance.SetNew(&new_DIP_ACC_BEAM_INTENSITYPERBUNCH);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_INTENSITYPERBUNCH);
      instance.SetDelete(&delete_DIP_ACC_BEAM_INTENSITYPERBUNCH);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_INTENSITYPERBUNCH);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_INTENSITYPERBUNCH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_INTENSITYPERBUNCH*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_INTENSITYPERBUNCH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITYPERBUNCH*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_INTENSITYPERBUNCH_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITYPERBUNCH*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_INTENSITYPERBUNCH_S_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_INTENSITYPERBUNCH_S_Dictionary();
   static void *new_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p);
   static void deleteArray_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p);
   static void destruct_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_INTENSITYPERBUNCH_S) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_INTENSITYPERBUNCH_S));
      ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_INTENSITYPERBUNCH_S),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_INTENSITYPERBUNCH_S", "./include/lhcfdipdata.h", 198,
                  typeid(::DIP_ACC_BEAM_INTENSITYPERBUNCH_S), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_INTENSITYPERBUNCH_S_ShowMembers, &DIP_ACC_BEAM_INTENSITYPERBUNCH_S_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_INTENSITYPERBUNCH_S) );
      instance.SetNew(&new_DIP_ACC_BEAM_INTENSITYPERBUNCH_S);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_INTENSITYPERBUNCH_S);
      instance.SetDelete(&delete_DIP_ACC_BEAM_INTENSITYPERBUNCH_S);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_INTENSITYPERBUNCH_S);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_INTENSITYPERBUNCH_S);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_INTENSITYPERBUNCH_S_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_LUMINOSITYAVERAGE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_LUMINOSITYAVERAGE_Dictionary();
   static void *new_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_LUMINOSITYAVERAGE(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p);
   static void deleteArray_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p);
   static void destruct_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_LUMINOSITYAVERAGE) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_LUMINOSITYAVERAGE));
      ::DIP_ACC_BEAM_LUMINOSITYAVERAGE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_LUMINOSITYAVERAGE),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_LUMINOSITYAVERAGE", "./include/lhcfdipdata.h", 206,
                  typeid(::DIP_ACC_BEAM_LUMINOSITYAVERAGE), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_LUMINOSITYAVERAGE_ShowMembers, &DIP_ACC_BEAM_LUMINOSITYAVERAGE_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_LUMINOSITYAVERAGE) );
      instance.SetNew(&new_DIP_ACC_BEAM_LUMINOSITYAVERAGE);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_LUMINOSITYAVERAGE);
      instance.SetDelete(&delete_DIP_ACC_BEAM_LUMINOSITYAVERAGE);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_LUMINOSITYAVERAGE);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_LUMINOSITYAVERAGE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_LUMINOSITYAVERAGE_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_LUMINOSITYPERBUNCH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_LUMINOSITYPERBUNCH_Dictionary();
   static void *new_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p);
   static void deleteArray_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p);
   static void destruct_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_LUMINOSITYPERBUNCH) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_LUMINOSITYPERBUNCH));
      ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_LUMINOSITYPERBUNCH),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_LUMINOSITYPERBUNCH", "./include/lhcfdipdata.h", 217,
                  typeid(::DIP_ACC_BEAM_LUMINOSITYPERBUNCH), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_LUMINOSITYPERBUNCH_ShowMembers, &DIP_ACC_BEAM_LUMINOSITYPERBUNCH_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_LUMINOSITYPERBUNCH) );
      instance.SetNew(&new_DIP_ACC_BEAM_LUMINOSITYPERBUNCH);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_LUMINOSITYPERBUNCH);
      instance.SetDelete(&delete_DIP_ACC_BEAM_LUMINOSITYPERBUNCH);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_LUMINOSITYPERBUNCH);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_LUMINOSITYPERBUNCH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_LUMINOSITYPERBUNCH_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_LUMINOSITYSCAN_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_LUMINOSITYSCAN_Dictionary();
   static void *new_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_LUMINOSITYSCAN(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p);
   static void deleteArray_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p);
   static void destruct_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_LUMINOSITYSCAN*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_LUMINOSITYSCAN) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_LUMINOSITYSCAN));
      ::DIP_ACC_BEAM_LUMINOSITYSCAN *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_LUMINOSITYSCAN),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_LUMINOSITYSCAN", "./include/lhcfdipdata.h", 225,
                  typeid(::DIP_ACC_BEAM_LUMINOSITYSCAN), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_LUMINOSITYSCAN_ShowMembers, &DIP_ACC_BEAM_LUMINOSITYSCAN_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_LUMINOSITYSCAN) );
      instance.SetNew(&new_DIP_ACC_BEAM_LUMINOSITYSCAN);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_LUMINOSITYSCAN);
      instance.SetDelete(&delete_DIP_ACC_BEAM_LUMINOSITYSCAN);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_LUMINOSITYSCAN);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_LUMINOSITYSCAN);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_LUMINOSITYSCAN*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_LUMINOSITYSCAN*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYSCAN*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_LUMINOSITYSCAN_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYSCAN*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_SIZE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_SIZE_Dictionary();
   static void *new_DIP_ACC_BEAM_SIZE(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_SIZE(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_SIZE(void *p);
   static void deleteArray_DIP_ACC_BEAM_SIZE(void *p);
   static void destruct_DIP_ACC_BEAM_SIZE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_SIZE*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_SIZE) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_SIZE));
      ::DIP_ACC_BEAM_SIZE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_SIZE),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_SIZE", "./include/lhcfdipdata.h", 238,
                  typeid(::DIP_ACC_BEAM_SIZE), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_SIZE_ShowMembers, &DIP_ACC_BEAM_SIZE_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_SIZE) );
      instance.SetNew(&new_DIP_ACC_BEAM_SIZE);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_SIZE);
      instance.SetDelete(&delete_DIP_ACC_BEAM_SIZE);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_SIZE);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_SIZE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_SIZE*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_SIZE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_SIZE*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_SIZE_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_SIZE*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_SIZE_AVERAGE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_SIZE_AVERAGE_Dictionary();
   static void *new_DIP_ACC_BEAM_SIZE_AVERAGE(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_SIZE_AVERAGE(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_SIZE_AVERAGE(void *p);
   static void deleteArray_DIP_ACC_BEAM_SIZE_AVERAGE(void *p);
   static void destruct_DIP_ACC_BEAM_SIZE_AVERAGE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_SIZE_AVERAGE*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_SIZE_AVERAGE) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_SIZE_AVERAGE));
      ::DIP_ACC_BEAM_SIZE_AVERAGE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_SIZE_AVERAGE),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_SIZE_AVERAGE", "./include/lhcfdipdata.h", 261,
                  typeid(::DIP_ACC_BEAM_SIZE_AVERAGE), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_SIZE_AVERAGE_ShowMembers, &DIP_ACC_BEAM_SIZE_AVERAGE_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_SIZE_AVERAGE) );
      instance.SetNew(&new_DIP_ACC_BEAM_SIZE_AVERAGE);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_SIZE_AVERAGE);
      instance.SetDelete(&delete_DIP_ACC_BEAM_SIZE_AVERAGE);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_SIZE_AVERAGE);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_SIZE_AVERAGE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_SIZE_AVERAGE*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_SIZE_AVERAGE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_SIZE_AVERAGE*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_SIZE_AVERAGE_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_SIZE_AVERAGE*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_WIRESCANNER_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_WIRESCANNER_Dictionary();
   static void *new_DIP_ACC_BEAM_WIRESCANNER(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_WIRESCANNER(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_WIRESCANNER(void *p);
   static void deleteArray_DIP_ACC_BEAM_WIRESCANNER(void *p);
   static void destruct_DIP_ACC_BEAM_WIRESCANNER(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_WIRESCANNER*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_WIRESCANNER) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_WIRESCANNER));
      ::DIP_ACC_BEAM_WIRESCANNER *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_WIRESCANNER),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_WIRESCANNER", "./include/lhcfdipdata.h", 275,
                  typeid(::DIP_ACC_BEAM_WIRESCANNER), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_WIRESCANNER_ShowMembers, &DIP_ACC_BEAM_WIRESCANNER_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_WIRESCANNER) );
      instance.SetNew(&new_DIP_ACC_BEAM_WIRESCANNER);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_WIRESCANNER);
      instance.SetDelete(&delete_DIP_ACC_BEAM_WIRESCANNER);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_WIRESCANNER);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_WIRESCANNER);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_WIRESCANNER*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_WIRESCANNER*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_WIRESCANNER*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_WIRESCANNER_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_WIRESCANNER*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_BEAM_BETASTAR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_BEAM_BETASTAR_Dictionary();
   static void *new_DIP_ACC_BEAM_BETASTAR(void *p = 0);
   static void *newArray_DIP_ACC_BEAM_BETASTAR(Long_t size, void *p);
   static void delete_DIP_ACC_BEAM_BETASTAR(void *p);
   static void deleteArray_DIP_ACC_BEAM_BETASTAR(void *p);
   static void destruct_DIP_ACC_BEAM_BETASTAR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_BEAM_BETASTAR*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_BEAM_BETASTAR) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_BEAM_BETASTAR));
      ::DIP_ACC_BEAM_BETASTAR *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_BEAM_BETASTAR),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_BEAM_BETASTAR", "./include/lhcfdipdata.h", 285,
                  typeid(::DIP_ACC_BEAM_BETASTAR), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_BEAM_BETASTAR_ShowMembers, &DIP_ACC_BEAM_BETASTAR_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_BEAM_BETASTAR) );
      instance.SetNew(&new_DIP_ACC_BEAM_BETASTAR);
      instance.SetNewArray(&newArray_DIP_ACC_BEAM_BETASTAR);
      instance.SetDelete(&delete_DIP_ACC_BEAM_BETASTAR);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_BEAM_BETASTAR);
      instance.SetDestructor(&destruct_DIP_ACC_BEAM_BETASTAR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_BEAM_BETASTAR*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_BEAM_BETASTAR*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BETASTAR*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_BEAM_BETASTAR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BETASTAR*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_HS_LHC_INJECTION_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_HS_LHC_INJECTION_Dictionary();
   static void *new_DIP_ACC_HS_LHC_INJECTION(void *p = 0);
   static void *newArray_DIP_ACC_HS_LHC_INJECTION(Long_t size, void *p);
   static void delete_DIP_ACC_HS_LHC_INJECTION(void *p);
   static void deleteArray_DIP_ACC_HS_LHC_INJECTION(void *p);
   static void destruct_DIP_ACC_HS_LHC_INJECTION(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_HS_LHC_INJECTION*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_HS_LHC_INJECTION) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_HS_LHC_INJECTION));
      ::DIP_ACC_HS_LHC_INJECTION *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_HS_LHC_INJECTION),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_HS_LHC_INJECTION", "./include/lhcfdipdata.h", 294,
                  typeid(::DIP_ACC_HS_LHC_INJECTION), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_HS_LHC_INJECTION_ShowMembers, &DIP_ACC_HS_LHC_INJECTION_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_HS_LHC_INJECTION) );
      instance.SetNew(&new_DIP_ACC_HS_LHC_INJECTION);
      instance.SetNewArray(&newArray_DIP_ACC_HS_LHC_INJECTION);
      instance.SetDelete(&delete_DIP_ACC_HS_LHC_INJECTION);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_HS_LHC_INJECTION);
      instance.SetDestructor(&destruct_DIP_ACC_HS_LHC_INJECTION);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_HS_LHC_INJECTION*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_HS_LHC_INJECTION*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_INJECTION*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_HS_LHC_INJECTION_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_INJECTION*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_HS_LHC_ADJUST_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_HS_LHC_ADJUST_Dictionary();
   static void *new_DIP_ACC_HS_LHC_ADJUST(void *p = 0);
   static void *newArray_DIP_ACC_HS_LHC_ADJUST(Long_t size, void *p);
   static void delete_DIP_ACC_HS_LHC_ADJUST(void *p);
   static void deleteArray_DIP_ACC_HS_LHC_ADJUST(void *p);
   static void destruct_DIP_ACC_HS_LHC_ADJUST(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_HS_LHC_ADJUST*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_HS_LHC_ADJUST) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_HS_LHC_ADJUST));
      ::DIP_ACC_HS_LHC_ADJUST *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_HS_LHC_ADJUST),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_HS_LHC_ADJUST", "./include/lhcfdipdata.h", 300,
                  typeid(::DIP_ACC_HS_LHC_ADJUST), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_HS_LHC_ADJUST_ShowMembers, &DIP_ACC_HS_LHC_ADJUST_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_HS_LHC_ADJUST) );
      instance.SetNew(&new_DIP_ACC_HS_LHC_ADJUST);
      instance.SetNewArray(&newArray_DIP_ACC_HS_LHC_ADJUST);
      instance.SetDelete(&delete_DIP_ACC_HS_LHC_ADJUST);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_HS_LHC_ADJUST);
      instance.SetDestructor(&destruct_DIP_ACC_HS_LHC_ADJUST);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_HS_LHC_ADJUST*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_HS_LHC_ADJUST*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_ADJUST*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_HS_LHC_ADJUST_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_ADJUST*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_HS_LHC_BEAMDUMP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_HS_LHC_BEAMDUMP_Dictionary();
   static void *new_DIP_ACC_HS_LHC_BEAMDUMP(void *p = 0);
   static void *newArray_DIP_ACC_HS_LHC_BEAMDUMP(Long_t size, void *p);
   static void delete_DIP_ACC_HS_LHC_BEAMDUMP(void *p);
   static void deleteArray_DIP_ACC_HS_LHC_BEAMDUMP(void *p);
   static void destruct_DIP_ACC_HS_LHC_BEAMDUMP(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_HS_LHC_BEAMDUMP*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_HS_LHC_BEAMDUMP) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_HS_LHC_BEAMDUMP));
      ::DIP_ACC_HS_LHC_BEAMDUMP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_HS_LHC_BEAMDUMP),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_HS_LHC_BEAMDUMP", "./include/lhcfdipdata.h", 306,
                  typeid(::DIP_ACC_HS_LHC_BEAMDUMP), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_HS_LHC_BEAMDUMP_ShowMembers, &DIP_ACC_HS_LHC_BEAMDUMP_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_HS_LHC_BEAMDUMP) );
      instance.SetNew(&new_DIP_ACC_HS_LHC_BEAMDUMP);
      instance.SetNewArray(&newArray_DIP_ACC_HS_LHC_BEAMDUMP);
      instance.SetDelete(&delete_DIP_ACC_HS_LHC_BEAMDUMP);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_HS_LHC_BEAMDUMP);
      instance.SetDestructor(&destruct_DIP_ACC_HS_LHC_BEAMDUMP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_HS_LHC_BEAMDUMP*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_HS_LHC_BEAMDUMP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_BEAMDUMP*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_HS_LHC_BEAMDUMP_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_BEAMDUMP*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_BEAMMODE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_BEAMMODE_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_BEAMMODE(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_BEAMMODE(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_BEAMMODE(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_BEAMMODE(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_BEAMMODE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_BEAMMODE*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_BEAMMODE) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_BEAMMODE));
      ::DIP_ACC_RUNCONTROL_BEAMMODE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_BEAMMODE),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_BEAMMODE", "./include/lhcfdipdata.h", 313,
                  typeid(::DIP_ACC_RUNCONTROL_BEAMMODE), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_BEAMMODE_ShowMembers, &DIP_ACC_RUNCONTROL_BEAMMODE_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_BEAMMODE) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_BEAMMODE);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_BEAMMODE);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_BEAMMODE);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_BEAMMODE);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_BEAMMODE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_BEAMMODE*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_BEAMMODE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_BEAMMODE*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_BEAMMODE_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_BEAMMODE*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_BUNCHCONFIG_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_BUNCHCONFIG_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_BUNCHCONFIG(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_BUNCHCONFIG) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_BUNCHCONFIG));
      ::DIP_ACC_RUNCONTROL_BUNCHCONFIG *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_BUNCHCONFIG),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_BUNCHCONFIG", "./include/lhcfdipdata.h", 319,
                  typeid(::DIP_ACC_RUNCONTROL_BUNCHCONFIG), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_BUNCHCONFIG_ShowMembers, &DIP_ACC_RUNCONTROL_BUNCHCONFIG_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_BUNCHCONFIG) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_BUNCHCONFIG);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_BUNCHCONFIG);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_BUNCHCONFIG);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_BUNCHCONFIG);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_BUNCHCONFIG);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_BUNCHCONFIG_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_FILLNUMBER_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_FILLNUMBER_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_FILLNUMBER(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_FILLNUMBER*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_FILLNUMBER) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_FILLNUMBER));
      ::DIP_ACC_RUNCONTROL_FILLNUMBER *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_FILLNUMBER),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_FILLNUMBER", "./include/lhcfdipdata.h", 325,
                  typeid(::DIP_ACC_RUNCONTROL_FILLNUMBER), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_FILLNUMBER_ShowMembers, &DIP_ACC_RUNCONTROL_FILLNUMBER_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_FILLNUMBER) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_FILLNUMBER);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_FILLNUMBER);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_FILLNUMBER);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_FILLNUMBER);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_FILLNUMBER);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_FILLNUMBER*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_FILLNUMBER*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_FILLNUMBER*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_FILLNUMBER_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_FILLNUMBER*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_FILLSCHEMA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_FILLSCHEMA_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_FILLSCHEMA(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_FILLSCHEMA*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_FILLSCHEMA) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_FILLSCHEMA));
      ::DIP_ACC_RUNCONTROL_FILLSCHEMA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_FILLSCHEMA),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_FILLSCHEMA", "./include/lhcfdipdata.h", 332,
                  typeid(::DIP_ACC_RUNCONTROL_FILLSCHEMA), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_FILLSCHEMA_ShowMembers, &DIP_ACC_RUNCONTROL_FILLSCHEMA_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_FILLSCHEMA) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_FILLSCHEMA);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_FILLSCHEMA);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_FILLSCHEMA);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_FILLSCHEMA);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_FILLSCHEMA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_FILLSCHEMA*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_FILLSCHEMA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_FILLSCHEMA*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_FILLSCHEMA_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_FILLSCHEMA*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_MACHINEMODE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_MACHINEMODE_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_MACHINEMODE(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_MACHINEMODE*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_MACHINEMODE) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_MACHINEMODE));
      ::DIP_ACC_RUNCONTROL_MACHINEMODE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_MACHINEMODE),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_MACHINEMODE", "./include/lhcfdipdata.h", 339,
                  typeid(::DIP_ACC_RUNCONTROL_MACHINEMODE), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_MACHINEMODE_ShowMembers, &DIP_ACC_RUNCONTROL_MACHINEMODE_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_MACHINEMODE) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_MACHINEMODE);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_MACHINEMODE);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_MACHINEMODE);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_MACHINEMODE);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_MACHINEMODE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_MACHINEMODE*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_MACHINEMODE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_MACHINEMODE*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_MACHINEMODE_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_MACHINEMODE*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_PAGE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_PAGE_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_PAGE(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_PAGE(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_PAGE(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_PAGE(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_PAGE(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_PAGE*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_PAGE) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_PAGE));
      ::DIP_ACC_RUNCONTROL_PAGE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_PAGE),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_PAGE", "./include/lhcfdipdata.h", 345,
                  typeid(::DIP_ACC_RUNCONTROL_PAGE), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_PAGE_ShowMembers, &DIP_ACC_RUNCONTROL_PAGE_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_PAGE) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_PAGE);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_PAGE);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_PAGE);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_PAGE);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_PAGE);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_PAGE*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_PAGE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_PAGE*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_PAGE_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_PAGE*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_SAFEBEAM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_SAFEBEAM_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_SAFEBEAM(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_SAFEBEAM*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_SAFEBEAM) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_SAFEBEAM));
      ::DIP_ACC_RUNCONTROL_SAFEBEAM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_SAFEBEAM),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_SAFEBEAM", "./include/lhcfdipdata.h", 351,
                  typeid(::DIP_ACC_RUNCONTROL_SAFEBEAM), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_SAFEBEAM_ShowMembers, &DIP_ACC_RUNCONTROL_SAFEBEAM_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_SAFEBEAM) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_SAFEBEAM);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_SAFEBEAM);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_SAFEBEAM);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_SAFEBEAM);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_SAFEBEAM);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_SAFEBEAM*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_SAFEBEAM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_SAFEBEAM*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_SAFEBEAM_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_SAFEBEAM*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_RUNCONFIGURATION_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_RUNCONTROL_RUNCONFIGURATION_Dictionary();
   static void *new_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p = 0);
   static void *newArray_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(Long_t size, void *p);
   static void delete_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p);
   static void deleteArray_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p);
   static void destruct_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_RUNCONTROL_RUNCONFIGURATION) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_RUNCONFIGURATION));
      ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_RUNCONTROL_RUNCONFIGURATION),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_RUNCONTROL_RUNCONFIGURATION", "./include/lhcfdipdata.h", 358,
                  typeid(::DIP_ACC_RUNCONTROL_RUNCONFIGURATION), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_RUNCONTROL_RUNCONFIGURATION_ShowMembers, &DIP_ACC_RUNCONTROL_RUNCONFIGURATION_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_RUNCONTROL_RUNCONFIGURATION) );
      instance.SetNew(&new_DIP_ACC_RUNCONTROL_RUNCONFIGURATION);
      instance.SetNewArray(&newArray_DIP_ACC_RUNCONTROL_RUNCONFIGURATION);
      instance.SetDelete(&delete_DIP_ACC_RUNCONTROL_RUNCONFIGURATION);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_RUNCONTROL_RUNCONFIGURATION);
      instance.SetDestructor(&destruct_DIP_ACC_RUNCONTROL_RUNCONFIGURATION);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_RUNCONTROL_RUNCONFIGURATION_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_TIMING_POSTMORTEM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_TIMING_POSTMORTEM_Dictionary();
   static void *new_DIP_ACC_TIMING_POSTMORTEM(void *p = 0);
   static void *newArray_DIP_ACC_TIMING_POSTMORTEM(Long_t size, void *p);
   static void delete_DIP_ACC_TIMING_POSTMORTEM(void *p);
   static void deleteArray_DIP_ACC_TIMING_POSTMORTEM(void *p);
   static void destruct_DIP_ACC_TIMING_POSTMORTEM(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_TIMING_POSTMORTEM*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_TIMING_POSTMORTEM) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_TIMING_POSTMORTEM));
      ::DIP_ACC_TIMING_POSTMORTEM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_TIMING_POSTMORTEM),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_TIMING_POSTMORTEM", "./include/lhcfdipdata.h", 385,
                  typeid(::DIP_ACC_TIMING_POSTMORTEM), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_TIMING_POSTMORTEM_ShowMembers, &DIP_ACC_TIMING_POSTMORTEM_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_TIMING_POSTMORTEM) );
      instance.SetNew(&new_DIP_ACC_TIMING_POSTMORTEM);
      instance.SetNewArray(&newArray_DIP_ACC_TIMING_POSTMORTEM);
      instance.SetDelete(&delete_DIP_ACC_TIMING_POSTMORTEM);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_TIMING_POSTMORTEM);
      instance.SetDestructor(&destruct_DIP_ACC_TIMING_POSTMORTEM);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_TIMING_POSTMORTEM*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_TIMING_POSTMORTEM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_POSTMORTEM*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_TIMING_POSTMORTEM_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_POSTMORTEM*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_TIMING_RXCLOCKS_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_TIMING_RXCLOCKS_Dictionary();
   static void *new_DIP_ACC_TIMING_RXCLOCKS(void *p = 0);
   static void *newArray_DIP_ACC_TIMING_RXCLOCKS(Long_t size, void *p);
   static void delete_DIP_ACC_TIMING_RXCLOCKS(void *p);
   static void deleteArray_DIP_ACC_TIMING_RXCLOCKS(void *p);
   static void destruct_DIP_ACC_TIMING_RXCLOCKS(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_TIMING_RXCLOCKS*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_TIMING_RXCLOCKS) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_TIMING_RXCLOCKS));
      ::DIP_ACC_TIMING_RXCLOCKS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_TIMING_RXCLOCKS),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_TIMING_RXCLOCKS", "./include/lhcfdipdata.h", 393,
                  typeid(::DIP_ACC_TIMING_RXCLOCKS), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_TIMING_RXCLOCKS_ShowMembers, &DIP_ACC_TIMING_RXCLOCKS_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_TIMING_RXCLOCKS) );
      instance.SetNew(&new_DIP_ACC_TIMING_RXCLOCKS);
      instance.SetNewArray(&newArray_DIP_ACC_TIMING_RXCLOCKS);
      instance.SetDelete(&delete_DIP_ACC_TIMING_RXCLOCKS);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_TIMING_RXCLOCKS);
      instance.SetDestructor(&destruct_DIP_ACC_TIMING_RXCLOCKS);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_TIMING_RXCLOCKS*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_TIMING_RXCLOCKS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_RXCLOCKS*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_TIMING_RXCLOCKS_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_RXCLOCKS*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_TIMING_RXFREV_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_TIMING_RXFREV_Dictionary();
   static void *new_DIP_ACC_TIMING_RXFREV(void *p = 0);
   static void *newArray_DIP_ACC_TIMING_RXFREV(Long_t size, void *p);
   static void delete_DIP_ACC_TIMING_RXFREV(void *p);
   static void deleteArray_DIP_ACC_TIMING_RXFREV(void *p);
   static void destruct_DIP_ACC_TIMING_RXFREV(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_TIMING_RXFREV*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_TIMING_RXFREV) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_TIMING_RXFREV));
      ::DIP_ACC_TIMING_RXFREV *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_TIMING_RXFREV),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_TIMING_RXFREV", "./include/lhcfdipdata.h", 402,
                  typeid(::DIP_ACC_TIMING_RXFREV), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_TIMING_RXFREV_ShowMembers, &DIP_ACC_TIMING_RXFREV_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_TIMING_RXFREV) );
      instance.SetNew(&new_DIP_ACC_TIMING_RXFREV);
      instance.SetNewArray(&newArray_DIP_ACC_TIMING_RXFREV);
      instance.SetDelete(&delete_DIP_ACC_TIMING_RXFREV);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_TIMING_RXFREV);
      instance.SetDestructor(&destruct_DIP_ACC_TIMING_RXFREV);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_TIMING_RXFREV*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_TIMING_RXFREV*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_RXFREV*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_TIMING_RXFREV_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_RXFREV*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ACC_MACHINE_COLLPOSITION_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ACC_MACHINE_COLLPOSITION_Dictionary();
   static void *new_DIP_ACC_MACHINE_COLLPOSITION(void *p = 0);
   static void *newArray_DIP_ACC_MACHINE_COLLPOSITION(Long_t size, void *p);
   static void delete_DIP_ACC_MACHINE_COLLPOSITION(void *p);
   static void deleteArray_DIP_ACC_MACHINE_COLLPOSITION(void *p);
   static void destruct_DIP_ACC_MACHINE_COLLPOSITION(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ACC_MACHINE_COLLPOSITION*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ACC_MACHINE_COLLPOSITION) == sizeof( ::ROOTShadow::Shadow::DIP_ACC_MACHINE_COLLPOSITION));
      ::DIP_ACC_MACHINE_COLLPOSITION *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ACC_MACHINE_COLLPOSITION),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ACC_MACHINE_COLLPOSITION", "./include/lhcfdipdata.h", 410,
                  typeid(::DIP_ACC_MACHINE_COLLPOSITION), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ACC_MACHINE_COLLPOSITION_ShowMembers, &DIP_ACC_MACHINE_COLLPOSITION_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ACC_MACHINE_COLLPOSITION) );
      instance.SetNew(&new_DIP_ACC_MACHINE_COLLPOSITION);
      instance.SetNewArray(&newArray_DIP_ACC_MACHINE_COLLPOSITION);
      instance.SetDelete(&delete_DIP_ACC_MACHINE_COLLPOSITION);
      instance.SetDeleteArray(&deleteArray_DIP_ACC_MACHINE_COLLPOSITION);
      instance.SetDestructor(&destruct_DIP_ACC_MACHINE_COLLPOSITION);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ACC_MACHINE_COLLPOSITION*)
   {
      return GenerateInitInstanceLocal((::DIP_ACC_MACHINE_COLLPOSITION*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ACC_MACHINE_COLLPOSITION*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ACC_MACHINE_COLLPOSITION_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_MACHINE_COLLPOSITION*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ATLAS_CLOCK_SELECTION_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ATLAS_CLOCK_SELECTION_Dictionary();
   static void *new_DIP_ATLAS_CLOCK_SELECTION(void *p = 0);
   static void *newArray_DIP_ATLAS_CLOCK_SELECTION(Long_t size, void *p);
   static void delete_DIP_ATLAS_CLOCK_SELECTION(void *p);
   static void deleteArray_DIP_ATLAS_CLOCK_SELECTION(void *p);
   static void destruct_DIP_ATLAS_CLOCK_SELECTION(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ATLAS_CLOCK_SELECTION*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ATLAS_CLOCK_SELECTION) == sizeof( ::ROOTShadow::Shadow::DIP_ATLAS_CLOCK_SELECTION));
      ::DIP_ATLAS_CLOCK_SELECTION *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ATLAS_CLOCK_SELECTION),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ATLAS_CLOCK_SELECTION", "./include/lhcfdipdata.h", 422,
                  typeid(::DIP_ATLAS_CLOCK_SELECTION), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ATLAS_CLOCK_SELECTION_ShowMembers, &DIP_ATLAS_CLOCK_SELECTION_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ATLAS_CLOCK_SELECTION) );
      instance.SetNew(&new_DIP_ATLAS_CLOCK_SELECTION);
      instance.SetNewArray(&newArray_DIP_ATLAS_CLOCK_SELECTION);
      instance.SetDelete(&delete_DIP_ATLAS_CLOCK_SELECTION);
      instance.SetDeleteArray(&deleteArray_DIP_ATLAS_CLOCK_SELECTION);
      instance.SetDestructor(&destruct_DIP_ATLAS_CLOCK_SELECTION);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ATLAS_CLOCK_SELECTION*)
   {
      return GenerateInitInstanceLocal((::DIP_ATLAS_CLOCK_SELECTION*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ATLAS_CLOCK_SELECTION*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ATLAS_CLOCK_SELECTION_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_CLOCK_SELECTION*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ATLAS_FILLLUMI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ATLAS_FILLLUMI_Dictionary();
   static void *new_DIP_ATLAS_FILLLUMI(void *p = 0);
   static void *newArray_DIP_ATLAS_FILLLUMI(Long_t size, void *p);
   static void delete_DIP_ATLAS_FILLLUMI(void *p);
   static void deleteArray_DIP_ATLAS_FILLLUMI(void *p);
   static void destruct_DIP_ATLAS_FILLLUMI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ATLAS_FILLLUMI*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ATLAS_FILLLUMI) == sizeof( ::ROOTShadow::Shadow::DIP_ATLAS_FILLLUMI));
      ::DIP_ATLAS_FILLLUMI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ATLAS_FILLLUMI),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ATLAS_FILLLUMI", "./include/lhcfdipdata.h", 429,
                  typeid(::DIP_ATLAS_FILLLUMI), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ATLAS_FILLLUMI_ShowMembers, &DIP_ATLAS_FILLLUMI_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ATLAS_FILLLUMI) );
      instance.SetNew(&new_DIP_ATLAS_FILLLUMI);
      instance.SetNewArray(&newArray_DIP_ATLAS_FILLLUMI);
      instance.SetDelete(&delete_DIP_ATLAS_FILLLUMI);
      instance.SetDeleteArray(&deleteArray_DIP_ATLAS_FILLLUMI);
      instance.SetDestructor(&destruct_DIP_ATLAS_FILLLUMI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ATLAS_FILLLUMI*)
   {
      return GenerateInitInstanceLocal((::DIP_ATLAS_FILLLUMI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ATLAS_FILLLUMI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ATLAS_FILLLUMI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_FILLLUMI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ATLAS_LUMIPERBUNCH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ATLAS_LUMIPERBUNCH_Dictionary();
   static void *new_DIP_ATLAS_LUMIPERBUNCH(void *p = 0);
   static void *newArray_DIP_ATLAS_LUMIPERBUNCH(Long_t size, void *p);
   static void delete_DIP_ATLAS_LUMIPERBUNCH(void *p);
   static void deleteArray_DIP_ATLAS_LUMIPERBUNCH(void *p);
   static void destruct_DIP_ATLAS_LUMIPERBUNCH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ATLAS_LUMIPERBUNCH*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ATLAS_LUMIPERBUNCH) == sizeof( ::ROOTShadow::Shadow::DIP_ATLAS_LUMIPERBUNCH));
      ::DIP_ATLAS_LUMIPERBUNCH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ATLAS_LUMIPERBUNCH),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ATLAS_LUMIPERBUNCH", "./include/lhcfdipdata.h", 436,
                  typeid(::DIP_ATLAS_LUMIPERBUNCH), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ATLAS_LUMIPERBUNCH_ShowMembers, &DIP_ATLAS_LUMIPERBUNCH_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ATLAS_LUMIPERBUNCH) );
      instance.SetNew(&new_DIP_ATLAS_LUMIPERBUNCH);
      instance.SetNewArray(&newArray_DIP_ATLAS_LUMIPERBUNCH);
      instance.SetDelete(&delete_DIP_ATLAS_LUMIPERBUNCH);
      instance.SetDeleteArray(&deleteArray_DIP_ATLAS_LUMIPERBUNCH);
      instance.SetDestructor(&destruct_DIP_ATLAS_LUMIPERBUNCH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ATLAS_LUMIPERBUNCH*)
   {
      return GenerateInitInstanceLocal((::DIP_ATLAS_LUMIPERBUNCH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ATLAS_LUMIPERBUNCH*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ATLAS_LUMIPERBUNCH_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_LUMIPERBUNCH*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_ATLAS_LUMINOSITY_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_ATLAS_LUMINOSITY_Dictionary();
   static void *new_DIP_ATLAS_LUMINOSITY(void *p = 0);
   static void *newArray_DIP_ATLAS_LUMINOSITY(Long_t size, void *p);
   static void delete_DIP_ATLAS_LUMINOSITY(void *p);
   static void deleteArray_DIP_ATLAS_LUMINOSITY(void *p);
   static void destruct_DIP_ATLAS_LUMINOSITY(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_ATLAS_LUMINOSITY*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_ATLAS_LUMINOSITY) == sizeof( ::ROOTShadow::Shadow::DIP_ATLAS_LUMINOSITY));
      ::DIP_ATLAS_LUMINOSITY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_ATLAS_LUMINOSITY),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_ATLAS_LUMINOSITY", "./include/lhcfdipdata.h", 443,
                  typeid(::DIP_ATLAS_LUMINOSITY), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_ATLAS_LUMINOSITY_ShowMembers, &DIP_ATLAS_LUMINOSITY_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_ATLAS_LUMINOSITY) );
      instance.SetNew(&new_DIP_ATLAS_LUMINOSITY);
      instance.SetNewArray(&newArray_DIP_ATLAS_LUMINOSITY);
      instance.SetDelete(&delete_DIP_ATLAS_LUMINOSITY);
      instance.SetDeleteArray(&deleteArray_DIP_ATLAS_LUMINOSITY);
      instance.SetDestructor(&destruct_DIP_ATLAS_LUMINOSITY);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_ATLAS_LUMINOSITY*)
   {
      return GenerateInitInstanceLocal((::DIP_ATLAS_LUMINOSITY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_ATLAS_LUMINOSITY*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_ATLAS_LUMINOSITY_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_LUMINOSITY*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void DIP_LHCF_DOSIMETER_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DIP_LHCF_DOSIMETER_Dictionary();
   static void *new_DIP_LHCF_DOSIMETER(void *p = 0);
   static void *newArray_DIP_LHCF_DOSIMETER(Long_t size, void *p);
   static void delete_DIP_LHCF_DOSIMETER(void *p);
   static void deleteArray_DIP_LHCF_DOSIMETER(void *p);
   static void destruct_DIP_LHCF_DOSIMETER(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DIP_LHCF_DOSIMETER*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::DIP_LHCF_DOSIMETER) == sizeof( ::ROOTShadow::Shadow::DIP_LHCF_DOSIMETER));
      ::DIP_LHCF_DOSIMETER *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DIP_LHCF_DOSIMETER),0);
      static ::ROOT::TGenericClassInfo 
         instance("DIP_LHCF_DOSIMETER", "./include/lhcfdipdata.h", 458,
                  typeid(::DIP_LHCF_DOSIMETER), ::ROOT::DefineBehavior(ptr, ptr),
                  &DIP_LHCF_DOSIMETER_ShowMembers, &DIP_LHCF_DOSIMETER_Dictionary, isa_proxy, 4,
                  sizeof(::DIP_LHCF_DOSIMETER) );
      instance.SetNew(&new_DIP_LHCF_DOSIMETER);
      instance.SetNewArray(&newArray_DIP_LHCF_DOSIMETER);
      instance.SetDelete(&delete_DIP_LHCF_DOSIMETER);
      instance.SetDeleteArray(&deleteArray_DIP_LHCF_DOSIMETER);
      instance.SetDestructor(&destruct_DIP_LHCF_DOSIMETER);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DIP_LHCF_DOSIMETER*)
   {
      return GenerateInitInstanceLocal((::DIP_LHCF_DOSIMETER*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DIP_LHCF_DOSIMETER*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DIP_LHCF_DOSIMETER_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_DOSIMETER*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void LHCFDIPDATAH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void LHCFDIPDATAH_Dictionary();
   static void *new_LHCFDIPDATAH(void *p = 0);
   static void *newArray_LHCFDIPDATAH(Long_t size, void *p);
   static void delete_LHCFDIPDATAH(void *p);
   static void deleteArray_LHCFDIPDATAH(void *p);
   static void destruct_LHCFDIPDATAH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCFDIPDATAH*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::LHCFDIPDATAH) == sizeof( ::ROOTShadow::Shadow::LHCFDIPDATAH));
      ::LHCFDIPDATAH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::LHCFDIPDATAH),0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCFDIPDATAH", "./include/lhcfdipdata.h", 475,
                  typeid(::LHCFDIPDATAH), ::ROOT::DefineBehavior(ptr, ptr),
                  &LHCFDIPDATAH_ShowMembers, &LHCFDIPDATAH_Dictionary, isa_proxy, 4,
                  sizeof(::LHCFDIPDATAH) );
      instance.SetNew(&new_LHCFDIPDATAH);
      instance.SetNewArray(&newArray_LHCFDIPDATAH);
      instance.SetDelete(&delete_LHCFDIPDATAH);
      instance.SetDeleteArray(&deleteArray_LHCFDIPDATAH);
      instance.SetDestructor(&destruct_LHCFDIPDATAH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::LHCFDIPDATAH*)
   {
      return GenerateInitInstanceLocal((::LHCFDIPDATAH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCFDIPDATAH*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void LHCFDIPDATAH_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFDIPDATAH*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void LHCFDIPDATAL_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void LHCFDIPDATAL_Dictionary();
   static void *new_LHCFDIPDATAL(void *p = 0);
   static void *newArray_LHCFDIPDATAL(Long_t size, void *p);
   static void delete_LHCFDIPDATAL(void *p);
   static void deleteArray_LHCFDIPDATAL(void *p);
   static void destruct_LHCFDIPDATAL(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCFDIPDATAL*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::LHCFDIPDATAL) == sizeof( ::ROOTShadow::Shadow::LHCFDIPDATAL));
      ::LHCFDIPDATAL *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::LHCFDIPDATAL),0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCFDIPDATAL", "./include/lhcfdipdata.h", 657,
                  typeid(::LHCFDIPDATAL), ::ROOT::DefineBehavior(ptr, ptr),
                  &LHCFDIPDATAL_ShowMembers, &LHCFDIPDATAL_Dictionary, isa_proxy, 4,
                  sizeof(::LHCFDIPDATAL) );
      instance.SetNew(&new_LHCFDIPDATAL);
      instance.SetNewArray(&newArray_LHCFDIPDATAL);
      instance.SetDelete(&delete_LHCFDIPDATAL);
      instance.SetDeleteArray(&deleteArray_LHCFDIPDATAL);
      instance.SetDestructor(&destruct_LHCFDIPDATAL);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::LHCFDIPDATAL*)
   {
      return GenerateInitInstanceLocal((::LHCFDIPDATAL*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCFDIPDATAL*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void LHCFDIPDATAL_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFDIPDATAL*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void LHCFDIPDATAVH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void LHCFDIPDATAVH_Dictionary();
   static void *new_LHCFDIPDATAVH(void *p = 0);
   static void *newArray_LHCFDIPDATAVH(Long_t size, void *p);
   static void delete_LHCFDIPDATAVH(void *p);
   static void deleteArray_LHCFDIPDATAVH(void *p);
   static void destruct_LHCFDIPDATAVH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCFDIPDATAVH*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::LHCFDIPDATAVH) == sizeof( ::ROOTShadow::Shadow::LHCFDIPDATAVH));
      ::LHCFDIPDATAVH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::LHCFDIPDATAVH),0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCFDIPDATAVH", "./include/lhcfdipdata.h", 745,
                  typeid(::LHCFDIPDATAVH), ::ROOT::DefineBehavior(ptr, ptr),
                  &LHCFDIPDATAVH_ShowMembers, &LHCFDIPDATAVH_Dictionary, isa_proxy, 4,
                  sizeof(::LHCFDIPDATAVH) );
      instance.SetNew(&new_LHCFDIPDATAVH);
      instance.SetNewArray(&newArray_LHCFDIPDATAVH);
      instance.SetDelete(&delete_LHCFDIPDATAVH);
      instance.SetDeleteArray(&deleteArray_LHCFDIPDATAVH);
      instance.SetDestructor(&destruct_LHCFDIPDATAVH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::LHCFDIPDATAVH*)
   {
      return GenerateInitInstanceLocal((::LHCFDIPDATAVH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCFDIPDATAVH*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void LHCFDIPDATAVH_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFDIPDATAVH*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void TLHCFDIPDATAH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TLHCFDIPDATAH(void *p = 0);
   static void *newArray_TLHCFDIPDATAH(Long_t size, void *p);
   static void delete_TLHCFDIPDATAH(void *p);
   static void deleteArray_TLHCFDIPDATAH(void *p);
   static void destruct_TLHCFDIPDATAH(void *p);
   static void streamer_TLHCFDIPDATAH(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TLHCFDIPDATAH*)
   {
      ::TLHCFDIPDATAH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TLHCFDIPDATAH >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TLHCFDIPDATAH", ::TLHCFDIPDATAH::Class_Version(), "./include/TLHCFDIPDATAH.h", 9,
                  typeid(::TLHCFDIPDATAH), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TLHCFDIPDATAH::Dictionary, isa_proxy, 0,
                  sizeof(::TLHCFDIPDATAH) );
      instance.SetNew(&new_TLHCFDIPDATAH);
      instance.SetNewArray(&newArray_TLHCFDIPDATAH);
      instance.SetDelete(&delete_TLHCFDIPDATAH);
      instance.SetDeleteArray(&deleteArray_TLHCFDIPDATAH);
      instance.SetDestructor(&destruct_TLHCFDIPDATAH);
      instance.SetStreamerFunc(&streamer_TLHCFDIPDATAH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TLHCFDIPDATAH*)
   {
      return GenerateInitInstanceLocal((::TLHCFDIPDATAH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TLHCFDIPDATAH*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TLHCFDIPDATAL_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TLHCFDIPDATAL(void *p = 0);
   static void *newArray_TLHCFDIPDATAL(Long_t size, void *p);
   static void delete_TLHCFDIPDATAL(void *p);
   static void deleteArray_TLHCFDIPDATAL(void *p);
   static void destruct_TLHCFDIPDATAL(void *p);
   static void streamer_TLHCFDIPDATAL(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TLHCFDIPDATAL*)
   {
      ::TLHCFDIPDATAL *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TLHCFDIPDATAL >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TLHCFDIPDATAL", ::TLHCFDIPDATAL::Class_Version(), "./include/TLHCFDIPDATAL.h", 9,
                  typeid(::TLHCFDIPDATAL), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TLHCFDIPDATAL::Dictionary, isa_proxy, 0,
                  sizeof(::TLHCFDIPDATAL) );
      instance.SetNew(&new_TLHCFDIPDATAL);
      instance.SetNewArray(&newArray_TLHCFDIPDATAL);
      instance.SetDelete(&delete_TLHCFDIPDATAL);
      instance.SetDeleteArray(&deleteArray_TLHCFDIPDATAL);
      instance.SetDestructor(&destruct_TLHCFDIPDATAL);
      instance.SetStreamerFunc(&streamer_TLHCFDIPDATAL);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TLHCFDIPDATAL*)
   {
      return GenerateInitInstanceLocal((::TLHCFDIPDATAL*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TLHCFDIPDATAL*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TLHCFDIPDATAVH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TLHCFDIPDATAVH(void *p = 0);
   static void *newArray_TLHCFDIPDATAVH(Long_t size, void *p);
   static void delete_TLHCFDIPDATAVH(void *p);
   static void deleteArray_TLHCFDIPDATAVH(void *p);
   static void destruct_TLHCFDIPDATAVH(void *p);
   static void streamer_TLHCFDIPDATAVH(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TLHCFDIPDATAVH*)
   {
      ::TLHCFDIPDATAVH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TLHCFDIPDATAVH >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TLHCFDIPDATAVH", ::TLHCFDIPDATAVH::Class_Version(), "./include/TLHCFDIPDATAVH.h", 9,
                  typeid(::TLHCFDIPDATAVH), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TLHCFDIPDATAVH::Dictionary, isa_proxy, 0,
                  sizeof(::TLHCFDIPDATAVH) );
      instance.SetNew(&new_TLHCFDIPDATAVH);
      instance.SetNewArray(&newArray_TLHCFDIPDATAVH);
      instance.SetDelete(&delete_TLHCFDIPDATAVH);
      instance.SetDeleteArray(&deleteArray_TLHCFDIPDATAVH);
      instance.SetDestructor(&destruct_TLHCFDIPDATAVH);
      instance.SetStreamerFunc(&streamer_TLHCFDIPDATAVH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TLHCFDIPDATAVH*)
   {
      return GenerateInitInstanceLocal((::TLHCFDIPDATAVH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TLHCFDIPDATAVH*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SocketControl_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SocketControl_Dictionary();
   static void *new_SocketControl(void *p = 0);
   static void *newArray_SocketControl(Long_t size, void *p);
   static void delete_SocketControl(void *p);
   static void deleteArray_SocketControl(void *p);
   static void destruct_SocketControl(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SocketControl*)
   {
      ::SocketControl *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SocketControl),0);
      static ::ROOT::TGenericClassInfo 
         instance("SocketControl", "./include/SocketControl.h", 10,
                  typeid(::SocketControl), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &SocketControl_Dictionary, isa_proxy, 0,
                  sizeof(::SocketControl) );
      instance.SetNew(&new_SocketControl);
      instance.SetNewArray(&newArray_SocketControl);
      instance.SetDelete(&delete_SocketControl);
      instance.SetDeleteArray(&deleteArray_SocketControl);
      instance.SetDestructor(&destruct_SocketControl);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SocketControl*)
   {
      return GenerateInitInstanceLocal((::SocketControl*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SocketControl*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SocketControl_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SocketControl*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TLHCFSDATA::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TLHCFSDATA::Class_Name()
{
   return "TLHCFSDATA";
}

//______________________________________________________________________________
const char *TLHCFSDATA::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFSDATA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLHCFSDATA::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFSDATA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLHCFSDATA::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFSDATA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLHCFSDATA::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFSDATA*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TLHCFDIPDATAH::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TLHCFDIPDATAH::Class_Name()
{
   return "TLHCFDIPDATAH";
}

//______________________________________________________________________________
const char *TLHCFDIPDATAH::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAH*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLHCFDIPDATAH::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAH*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLHCFDIPDATAH::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAH*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLHCFDIPDATAH::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAH*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TLHCFDIPDATAL::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TLHCFDIPDATAL::Class_Name()
{
   return "TLHCFDIPDATAL";
}

//______________________________________________________________________________
const char *TLHCFDIPDATAL::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAL*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLHCFDIPDATAL::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAL*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLHCFDIPDATAL::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAL*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLHCFDIPDATAL::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAL*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TLHCFDIPDATAVH::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TLHCFDIPDATAVH::Class_Name()
{
   return "TLHCFDIPDATAVH";
}

//______________________________________________________________________________
const char *TLHCFDIPDATAVH::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAVH*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLHCFDIPDATAVH::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAVH*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLHCFDIPDATAVH::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAVH*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLHCFDIPDATAVH::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TLHCFDIPDATAVH*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
namespace ROOTDict {
   void LHCFSDATA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class LHCFSDATA.
      typedef ::ROOTShadow::Shadow::LHCFSDATA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFSDATA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header", (void*)&sobj->header);
      R__insp.InspectMember("LHCFSDATA_HEADER", (void*)&sobj->header, "header.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &sobj->number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &sobj->time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cpws1", (void*)&sobj->cpws1);
      R__insp.InspectMember("CPWS1_DATA", (void*)&sobj->cpws1, "cpws1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cpws2", (void*)&sobj->cpws2);
      R__insp.InspectMember("CPWS2_DATA", (void*)&sobj->cpws2, "cpws2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ag", (void*)&sobj->ag);
      R__insp.InspectMember("AGILENT_DATA", (void*)&sobj->ag, "ag.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trhx", (void*)&sobj->trhx);
      R__insp.InspectMember("TRHX_DATA", (void*)&sobj->trhx, "trhx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "encoder", (void*)&sobj->encoder);
      R__insp.InspectMember("ENCODER_DATA", (void*)&sobj->encoder, "encoder.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc", (void*)&sobj->adc);
      R__insp.InspectMember("ADC_DATA", (void*)&sobj->adc, "adc.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_LHCFSDATA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFSDATA : new ::LHCFSDATA;
   }
   static void *newArray_LHCFSDATA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFSDATA[nElements] : new ::LHCFSDATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCFSDATA(void *p) {
      delete ((::LHCFSDATA*)p);
   }
   static void deleteArray_LHCFSDATA(void *p) {
      delete [] ((::LHCFSDATA*)p);
   }
   static void destruct_LHCFSDATA(void *p) {
      typedef ::LHCFSDATA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::LHCFSDATA

//______________________________________________________________________________
void TLHCFSDATA::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLHCFSDATA.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> run;
      R__b >> number;
      R__b >> time;
      R__b.StreamObject(&(data),typeid(LHCFSDATA));
      R__b.CheckByteCount(R__s, R__c, TLHCFSDATA::IsA());
   } else {
      R__c = R__b.WriteVersion(TLHCFSDATA::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << run;
      R__b << number;
      R__b << time;
      R__b.StreamObject(&(data),typeid(LHCFSDATA));
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TLHCFSDATA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TLHCFSDATA.
      TClass *R__cl = ::TLHCFSDATA::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&data);
      R__insp.InspectMember("LHCFSDATA", (void*)&data, "data.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TLHCFSDATA(void *p) {
      return  p ? new(p) ::TLHCFSDATA : new ::TLHCFSDATA;
   }
   static void *newArray_TLHCFSDATA(Long_t nElements, void *p) {
      return p ? new(p) ::TLHCFSDATA[nElements] : new ::TLHCFSDATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_TLHCFSDATA(void *p) {
      delete ((::TLHCFSDATA*)p);
   }
   static void deleteArray_TLHCFSDATA(void *p) {
      delete [] ((::TLHCFSDATA*)p);
   }
   static void destruct_TLHCFSDATA(void *p) {
      typedef ::TLHCFSDATA current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TLHCFSDATA(TBuffer &buf, void *obj) {
      ((::TLHCFSDATA*)obj)->::TLHCFSDATA::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TLHCFSDATA

//______________________________________________________________________________
namespace ROOTDict {
   void LHCFDIPDATAH_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class LHCFDIPDATAH.
      typedef ::ROOTShadow::Shadow::LHCFDIPDATAH ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFDIPDATAH*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header", (void*)&sobj->header);
      R__insp.InspectMember("LHCFSDATA_HEADER", (void*)&sobj->header, "header.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &sobj->number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &sobj->time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Arm1", (void*)&sobj->Arm1);
      R__insp.InspectMember("DIP_LHCF_Arm", (void*)&sobj->Arm1, "Arm1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Arm2", (void*)&sobj->Arm2);
      R__insp.InspectMember("DIP_LHCF_Arm", (void*)&sobj->Arm2, "Arm2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Coincidence", (void*)&sobj->Coincidence);
      R__insp.InspectMember("DIP_LHCF_COINCIDENCE", (void*)&sobj->Coincidence, "Coincidence.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHCf_Status", (void*)&sobj->LHCf_Status);
      R__insp.InspectMember("DIP_LHCF_EXPTSTATUS", (void*)&sobj->LHCf_Status, "LHCf_Status.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Interlock", (void*)&sobj->Interlock);
      R__insp.InspectMember("DIP_LHCF_INTERLOCK", (void*)&sobj->Interlock, "Interlock.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHCf_Luminosity", (void*)&sobj->LHCf_Luminosity);
      R__insp.InspectMember("DIP_LHCF_LUMINOSITY", (void*)&sobj->LHCf_Luminosity, "LHCf_Luminosity.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHCf_Injection", (void*)&sobj->LHCf_Injection);
      R__insp.InspectMember("DIP_LHCF_HS_LHC_INJECTION", (void*)&sobj->LHCf_Injection, "LHCf_Injection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHCf_Adjust", (void*)&sobj->LHCf_Adjust);
      R__insp.InspectMember("DIP_LHCF_HS_LHC_ADJUST", (void*)&sobj->LHCf_Adjust, "LHCf_Adjust.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHCf_Beamdump", (void*)&sobj->LHCf_Beamdump);
      R__insp.InspectMember("DIP_LHCF_HS_LHC_BEAMDUMP", (void*)&sobj->LHCf_Beamdump, "LHCf_Beamdump.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dummy_LHC_Injection", (void*)&sobj->Dummy_LHC_Injection);
      R__insp.InspectMember("DIP_ACC_HS_LHC_INJECTION", (void*)&sobj->Dummy_LHC_Injection, "Dummy_LHC_Injection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dummy_LHC_Adjust", (void*)&sobj->Dummy_LHC_Adjust);
      R__insp.InspectMember("DIP_ACC_HS_LHC_ADJUST", (void*)&sobj->Dummy_LHC_Adjust, "Dummy_LHC_Adjust.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dummy_LHC_Beamdump", (void*)&sobj->Dummy_LHC_Beamdump);
      R__insp.InspectMember("DIP_ACC_HS_LHC_BEAMDUMP", (void*)&sobj->Dummy_LHC_Beamdump, "Dummy_LHC_Beamdump.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BPM_LSS1L_B1", (void*)&sobj->BPM_LSS1L_B1);
      R__insp.InspectMember("DIP_ACC_BEAM_BPM_M", (void*)&sobj->BPM_LSS1L_B1, "BPM_LSS1L_B1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BPM_LSS1L_B2", (void*)&sobj->BPM_LSS1L_B2);
      R__insp.InspectMember("DIP_ACC_BEAM_BPM_M", (void*)&sobj->BPM_LSS1L_B2, "BPM_LSS1L_B2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BPM_LSS1R_B1", (void*)&sobj->BPM_LSS1R_B1);
      R__insp.InspectMember("DIP_ACC_BEAM_BPM_M", (void*)&sobj->BPM_LSS1R_B1, "BPM_LSS1R_B1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BPM_LSS1R_B2", (void*)&sobj->BPM_LSS1R_B2);
      R__insp.InspectMember("DIP_ACC_BEAM_BPM_M", (void*)&sobj->BPM_LSS1R_B2, "BPM_LSS1R_B2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", (void*)&sobj->Energy);
      R__insp.InspectMember("DIP_ACC_BEAM_ENERGY", (void*)&sobj->Energy, "Energy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam1_intensity", (void*)&sobj->Beam1_intensity);
      R__insp.InspectMember("DIP_ACC_BEAM_INTENSITY", (void*)&sobj->Beam1_intensity, "Beam1_intensity.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam2_intensity", (void*)&sobj->Beam2_intensity);
      R__insp.InspectMember("DIP_ACC_BEAM_INTENSITY", (void*)&sobj->Beam2_intensity, "Beam2_intensity.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam1_intensityperbunch", (void*)&sobj->Beam1_intensityperbunch);
      R__insp.InspectMember("DIP_ACC_BEAM_INTENSITYPERBUNCH_S", (void*)&sobj->Beam1_intensityperbunch, "Beam1_intensityperbunch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam2_intensityperbunch", (void*)&sobj->Beam2_intensityperbunch);
      R__insp.InspectMember("DIP_ACC_BEAM_INTENSITYPERBUNCH_S", (void*)&sobj->Beam2_intensityperbunch, "Beam2_intensityperbunch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranA_4L1_av", (void*)&sobj->BranA_4L1_av);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYAVERAGE", (void*)&sobj->BranA_4L1_av, "BranA_4L1_av.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranA_4R1_av", (void*)&sobj->BranA_4R1_av);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYAVERAGE", (void*)&sobj->BranA_4R1_av, "BranA_4R1_av.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranP_4L1_av", (void*)&sobj->BranP_4L1_av);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYAVERAGE", (void*)&sobj->BranP_4L1_av, "BranP_4L1_av.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranP_4R1_av", (void*)&sobj->BranP_4R1_av);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYAVERAGE", (void*)&sobj->BranP_4R1_av, "BranP_4R1_av.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Lumiscan", (void*)&sobj->Lumiscan);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYSCAN", (void*)&sobj->Lumiscan, "Lumiscan.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam1_size_average", (void*)&sobj->Beam1_size_average);
      R__insp.InspectMember("DIP_ACC_BEAM_SIZE_AVERAGE", (void*)&sobj->Beam1_size_average, "Beam1_size_average.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam2_size_average", (void*)&sobj->Beam2_size_average);
      R__insp.InspectMember("DIP_ACC_BEAM_SIZE_AVERAGE", (void*)&sobj->Beam2_size_average, "Beam2_size_average.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beta_star", (void*)&sobj->Beta_star);
      R__insp.InspectMember("DIP_ACC_BEAM_BETASTAR", (void*)&sobj->Beta_star, "Beta_star.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHC_Injection", (void*)&sobj->LHC_Injection);
      R__insp.InspectMember("DIP_ACC_HS_LHC_INJECTION", (void*)&sobj->LHC_Injection, "LHC_Injection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHC_Adjust", (void*)&sobj->LHC_Adjust);
      R__insp.InspectMember("DIP_ACC_HS_LHC_ADJUST", (void*)&sobj->LHC_Adjust, "LHC_Adjust.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LHC_Beamdump", (void*)&sobj->LHC_Beamdump);
      R__insp.InspectMember("DIP_ACC_HS_LHC_BEAMDUMP", (void*)&sobj->LHC_Beamdump, "LHC_Beamdump.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamMode", (void*)&sobj->BeamMode);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_BEAMMODE", (void*)&sobj->BeamMode, "BeamMode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Fillnumber", (void*)&sobj->Fillnumber);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_FILLNUMBER", (void*)&sobj->Fillnumber, "Fillnumber.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Fillschema", (void*)&sobj->Fillschema);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_FILLSCHEMA", (void*)&sobj->Fillschema, "Fillschema.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Machinemode", (void*)&sobj->Machinemode);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_MACHINEMODE", (void*)&sobj->Machinemode, "Machinemode.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Page1", (void*)&sobj->Page1);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_PAGE", (void*)&sobj->Page1, "Page1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Safebeam1", (void*)&sobj->Safebeam1);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_SAFEBEAM", (void*)&sobj->Safebeam1, "Safebeam1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Safebeam2", (void*)&sobj->Safebeam2);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_SAFEBEAM", (void*)&sobj->Safebeam2, "Safebeam2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Safebeam", (void*)&sobj->Safebeam);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_SAFEBEAM", (void*)&sobj->Safebeam, "Safebeam.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamConfig", (void*)&sobj->BeamConfig);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_RUNCONFIGURATION", (void*)&sobj->BeamConfig, "BeamConfig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Postmortem", (void*)&sobj->Postmortem);
      R__insp.InspectMember("DIP_ACC_TIMING_POSTMORTEM", (void*)&sobj->Postmortem, "Postmortem.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rxclocks", (void*)&sobj->Rxclocks);
      R__insp.InspectMember("DIP_ACC_TIMING_RXCLOCKS", (void*)&sobj->Rxclocks, "Rxclocks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rxfrev", (void*)&sobj->Rxfrev);
      R__insp.InspectMember("DIP_ACC_TIMING_RXFREV", (void*)&sobj->Rxfrev, "Rxfrev.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Collpos_TCTH4L1B1", (void*)&sobj->Collpos_TCTH4L1B1);
      R__insp.InspectMember("DIP_ACC_MACHINE_COLLPOSITION", (void*)&sobj->Collpos_TCTH4L1B1, "Collpos_TCTH4L1B1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Collpos_TCTH4R1B2", (void*)&sobj->Collpos_TCTH4R1B2);
      R__insp.InspectMember("DIP_ACC_MACHINE_COLLPOSITION", (void*)&sobj->Collpos_TCTH4R1B2, "Collpos_TCTH4R1B2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Collpos_TCTVA4L1B1", (void*)&sobj->Collpos_TCTVA4L1B1);
      R__insp.InspectMember("DIP_ACC_MACHINE_COLLPOSITION", (void*)&sobj->Collpos_TCTVA4L1B1, "Collpos_TCTVA4L1B1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Collpos_TCTVA4R1B2", (void*)&sobj->Collpos_TCTVA4R1B2);
      R__insp.InspectMember("DIP_ACC_MACHINE_COLLPOSITION", (void*)&sobj->Collpos_TCTVA4R1B2, "Collpos_TCTVA4R1B2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Atlasclock", (void*)&sobj->Atlasclock);
      R__insp.InspectMember("DIP_ATLAS_CLOCK_SELECTION", (void*)&sobj->Atlasclock, "Atlasclock.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Atlas_filllumi", (void*)&sobj->Atlas_filllumi);
      R__insp.InspectMember("DIP_ATLAS_FILLLUMI", (void*)&sobj->Atlas_filllumi, "Atlas_filllumi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Atlas_filllumi_ions", (void*)&sobj->Atlas_filllumi_ions);
      R__insp.InspectMember("DIP_ATLAS_FILLLUMI", (void*)&sobj->Atlas_filllumi_ions, "Atlas_filllumi_ions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Atlas_lumiperbunch", (void*)&sobj->Atlas_lumiperbunch);
      R__insp.InspectMember("DIP_ATLAS_LUMIPERBUNCH", (void*)&sobj->Atlas_lumiperbunch, "Atlas_lumiperbunch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Atlas_lumiperbunch_ions", (void*)&sobj->Atlas_lumiperbunch_ions);
      R__insp.InspectMember("DIP_ATLAS_LUMIPERBUNCH", (void*)&sobj->Atlas_lumiperbunch_ions, "Atlas_lumiperbunch_ions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Atlas_luminosity", (void*)&sobj->Atlas_luminosity);
      R__insp.InspectMember("DIP_ATLAS_LUMINOSITY", (void*)&sobj->Atlas_luminosity, "Atlas_luminosity.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Atlas_luminosity_ions", (void*)&sobj->Atlas_luminosity_ions);
      R__insp.InspectMember("DIP_ATLAS_LUMINOSITY", (void*)&sobj->Atlas_luminosity_ions, "Atlas_luminosity_ions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dosimeterL", (void*)&sobj->dosimeterL);
      R__insp.InspectMember("DIP_LHCF_DOSIMETER", (void*)&sobj->dosimeterL, "dosimeterL.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dosimeterR", (void*)&sobj->dosimeterR);
      R__insp.InspectMember("DIP_LHCF_DOSIMETER", (void*)&sobj->dosimeterR, "dosimeterR.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_LHCFDIPDATAH(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFDIPDATAH : new ::LHCFDIPDATAH;
   }
   static void *newArray_LHCFDIPDATAH(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFDIPDATAH[nElements] : new ::LHCFDIPDATAH[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCFDIPDATAH(void *p) {
      delete ((::LHCFDIPDATAH*)p);
   }
   static void deleteArray_LHCFDIPDATAH(void *p) {
      delete [] ((::LHCFDIPDATAH*)p);
   }
   static void destruct_LHCFDIPDATAH(void *p) {
      typedef ::LHCFDIPDATAH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::LHCFDIPDATAH

//______________________________________________________________________________
namespace ROOTDict {
   void LHCFDIPDATAL_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class LHCFDIPDATAL.
      typedef ::ROOTShadow::Shadow::LHCFDIPDATAL ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFDIPDATAL*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header", (void*)&sobj->header);
      R__insp.InspectMember("LHCFSDATA_HEADER", (void*)&sobj->header, "header.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &sobj->number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &sobj->time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam1_intensityperbunch", (void*)&sobj->Beam1_intensityperbunch);
      R__insp.InspectMember("DIP_ACC_BEAM_INTENSITYPERBUNCH", (void*)&sobj->Beam1_intensityperbunch, "Beam1_intensityperbunch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam2_intensityperbunch", (void*)&sobj->Beam2_intensityperbunch);
      R__insp.InspectMember("DIP_ACC_BEAM_INTENSITYPERBUNCH", (void*)&sobj->Beam2_intensityperbunch, "Beam2_intensityperbunch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranA_4L1_pb", (void*)&sobj->BranA_4L1_pb);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYPERBUNCH", (void*)&sobj->BranA_4L1_pb, "BranA_4L1_pb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranA_4R1_pb", (void*)&sobj->BranA_4R1_pb);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYPERBUNCH", (void*)&sobj->BranA_4R1_pb, "BranA_4R1_pb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranP_4L1_pb", (void*)&sobj->BranP_4L1_pb);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYPERBUNCH", (void*)&sobj->BranP_4L1_pb, "BranP_4L1_pb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BranP_4R1_pb", (void*)&sobj->BranP_4R1_pb);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYPERBUNCH", (void*)&sobj->BranP_4R1_pb, "BranP_4R1_pb.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam1_bunchconfig", (void*)&sobj->Beam1_bunchconfig);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_BUNCHCONFIG", (void*)&sobj->Beam1_bunchconfig, "Beam1_bunchconfig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam2_bunchconfig", (void*)&sobj->Beam2_bunchconfig);
      R__insp.InspectMember("DIP_ACC_RUNCONTROL_BUNCHCONFIG", (void*)&sobj->Beam2_bunchconfig, "Beam2_bunchconfig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B1H1", (void*)&sobj->WireScanner_B1H1);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B1H1, "WireScanner_B1H1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B1H2", (void*)&sobj->WireScanner_B1H2);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B1H2, "WireScanner_B1H2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B1V1", (void*)&sobj->WireScanner_B1V1);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B1V1, "WireScanner_B1V1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B1V2", (void*)&sobj->WireScanner_B1V2);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B1V2, "WireScanner_B1V2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B2H1", (void*)&sobj->WireScanner_B2H1);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B2H1, "WireScanner_B2H1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B2H2", (void*)&sobj->WireScanner_B2H2);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B2H2, "WireScanner_B2H2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B2V1", (void*)&sobj->WireScanner_B2V1);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B2V1, "WireScanner_B2V1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireScanner_B2V2", (void*)&sobj->WireScanner_B2V2);
      R__insp.InspectMember("DIP_ACC_BEAM_WIRESCANNER", (void*)&sobj->WireScanner_B2V2, "WireScanner_B2V2.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_LHCFDIPDATAL(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFDIPDATAL : new ::LHCFDIPDATAL;
   }
   static void *newArray_LHCFDIPDATAL(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFDIPDATAL[nElements] : new ::LHCFDIPDATAL[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCFDIPDATAL(void *p) {
      delete ((::LHCFDIPDATAL*)p);
   }
   static void deleteArray_LHCFDIPDATAL(void *p) {
      delete [] ((::LHCFDIPDATAL*)p);
   }
   static void destruct_LHCFDIPDATAL(void *p) {
      typedef ::LHCFDIPDATAL current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::LHCFDIPDATAL

//______________________________________________________________________________
namespace ROOTDict {
   void LHCFDIPDATAVH_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class LHCFDIPDATAVH.
      typedef ::ROOTShadow::Shadow::LHCFDIPDATAVH ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFDIPDATAVH*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "header", (void*)&sobj->header);
      R__insp.InspectMember("LHCFSDATA_HEADER", (void*)&sobj->header, "header.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &sobj->number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &sobj->time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Lumiscan", (void*)&sobj->Lumiscan);
      R__insp.InspectMember("DIP_ACC_BEAM_LUMINOSITYSCAN", (void*)&sobj->Lumiscan, "Lumiscan.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_LHCFDIPDATAVH(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFDIPDATAVH : new ::LHCFDIPDATAVH;
   }
   static void *newArray_LHCFDIPDATAVH(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFDIPDATAVH[nElements] : new ::LHCFDIPDATAVH[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCFDIPDATAVH(void *p) {
      delete ((::LHCFDIPDATAVH*)p);
   }
   static void deleteArray_LHCFDIPDATAVH(void *p) {
      delete [] ((::LHCFDIPDATAVH*)p);
   }
   static void destruct_LHCFDIPDATAVH(void *p) {
      typedef ::LHCFDIPDATAVH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::LHCFDIPDATAVH

//______________________________________________________________________________
void TLHCFDIPDATAH::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLHCFDIPDATAH.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> run;
      R__b >> number;
      R__b >> time;
      R__b.StreamObject(&(data),typeid(LHCFDIPDATAH));
      R__b.CheckByteCount(R__s, R__c, TLHCFDIPDATAH::IsA());
   } else {
      R__c = R__b.WriteVersion(TLHCFDIPDATAH::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << run;
      R__b << number;
      R__b << time;
      R__b.StreamObject(&(data),typeid(LHCFDIPDATAH));
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TLHCFDIPDATAH::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TLHCFDIPDATAH.
      TClass *R__cl = ::TLHCFDIPDATAH::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&data);
      R__insp.InspectMember("LHCFDIPDATAH", (void*)&data, "data.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TLHCFDIPDATAH(void *p) {
      return  p ? new(p) ::TLHCFDIPDATAH : new ::TLHCFDIPDATAH;
   }
   static void *newArray_TLHCFDIPDATAH(Long_t nElements, void *p) {
      return p ? new(p) ::TLHCFDIPDATAH[nElements] : new ::TLHCFDIPDATAH[nElements];
   }
   // Wrapper around operator delete
   static void delete_TLHCFDIPDATAH(void *p) {
      delete ((::TLHCFDIPDATAH*)p);
   }
   static void deleteArray_TLHCFDIPDATAH(void *p) {
      delete [] ((::TLHCFDIPDATAH*)p);
   }
   static void destruct_TLHCFDIPDATAH(void *p) {
      typedef ::TLHCFDIPDATAH current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TLHCFDIPDATAH(TBuffer &buf, void *obj) {
      ((::TLHCFDIPDATAH*)obj)->::TLHCFDIPDATAH::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TLHCFDIPDATAH

//______________________________________________________________________________
void TLHCFDIPDATAL::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLHCFDIPDATAL.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> run;
      R__b >> number;
      R__b >> time;
      R__b.StreamObject(&(data),typeid(LHCFDIPDATAL));
      R__b.CheckByteCount(R__s, R__c, TLHCFDIPDATAL::IsA());
   } else {
      R__c = R__b.WriteVersion(TLHCFDIPDATAL::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << run;
      R__b << number;
      R__b << time;
      R__b.StreamObject(&(data),typeid(LHCFDIPDATAL));
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TLHCFDIPDATAL::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TLHCFDIPDATAL.
      TClass *R__cl = ::TLHCFDIPDATAL::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&data);
      R__insp.InspectMember("LHCFDIPDATAL", (void*)&data, "data.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TLHCFDIPDATAL(void *p) {
      return  p ? new(p) ::TLHCFDIPDATAL : new ::TLHCFDIPDATAL;
   }
   static void *newArray_TLHCFDIPDATAL(Long_t nElements, void *p) {
      return p ? new(p) ::TLHCFDIPDATAL[nElements] : new ::TLHCFDIPDATAL[nElements];
   }
   // Wrapper around operator delete
   static void delete_TLHCFDIPDATAL(void *p) {
      delete ((::TLHCFDIPDATAL*)p);
   }
   static void deleteArray_TLHCFDIPDATAL(void *p) {
      delete [] ((::TLHCFDIPDATAL*)p);
   }
   static void destruct_TLHCFDIPDATAL(void *p) {
      typedef ::TLHCFDIPDATAL current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TLHCFDIPDATAL(TBuffer &buf, void *obj) {
      ((::TLHCFDIPDATAL*)obj)->::TLHCFDIPDATAL::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TLHCFDIPDATAL

//______________________________________________________________________________
void TLHCFDIPDATAVH::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLHCFDIPDATAVH.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> run;
      R__b >> number;
      R__b >> time;
      R__b.StreamObject(&(data),typeid(LHCFDIPDATAVH));
      R__b.CheckByteCount(R__s, R__c, TLHCFDIPDATAVH::IsA());
   } else {
      R__c = R__b.WriteVersion(TLHCFDIPDATAVH::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << run;
      R__b << number;
      R__b << time;
      R__b.StreamObject(&(data),typeid(LHCFDIPDATAVH));
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TLHCFDIPDATAVH::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TLHCFDIPDATAVH.
      TClass *R__cl = ::TLHCFDIPDATAVH::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "number", &number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&data);
      R__insp.InspectMember("LHCFDIPDATAVH", (void*)&data, "data.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TLHCFDIPDATAVH(void *p) {
      return  p ? new(p) ::TLHCFDIPDATAVH : new ::TLHCFDIPDATAVH;
   }
   static void *newArray_TLHCFDIPDATAVH(Long_t nElements, void *p) {
      return p ? new(p) ::TLHCFDIPDATAVH[nElements] : new ::TLHCFDIPDATAVH[nElements];
   }
   // Wrapper around operator delete
   static void delete_TLHCFDIPDATAVH(void *p) {
      delete ((::TLHCFDIPDATAVH*)p);
   }
   static void deleteArray_TLHCFDIPDATAVH(void *p) {
      delete [] ((::TLHCFDIPDATAVH*)p);
   }
   static void destruct_TLHCFDIPDATAVH(void *p) {
      typedef ::TLHCFDIPDATAVH current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TLHCFDIPDATAVH(TBuffer &buf, void *obj) {
      ((::TLHCFDIPDATAVH*)obj)->::TLHCFDIPDATAVH::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TLHCFDIPDATAVH

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SocketControl(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SocketControl : new ::SocketControl;
   }
   static void *newArray_SocketControl(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SocketControl[nElements] : new ::SocketControl[nElements];
   }
   // Wrapper around operator delete
   static void delete_SocketControl(void *p) {
      delete ((::SocketControl*)p);
   }
   static void deleteArray_SocketControl(void *p) {
      delete [] ((::SocketControl*)p);
   }
   static void destruct_SocketControl(void *p) {
      typedef ::SocketControl current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SocketControl

//______________________________________________________________________________
namespace ROOTDict {
   void LHCFSDATA_HEADER_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class LHCFSDATA_HEADER.
      typedef ::ROOTShadow::Shadow::LHCFSDATA_HEADER ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::LHCFSDATA_HEADER*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "headerword[8]", sobj->headerword);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "word[8]", sobj->word);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "version", &sobj->version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &sobj->size);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_LHCFSDATA_HEADER(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFSDATA_HEADER : new ::LHCFSDATA_HEADER;
   }
   static void *newArray_LHCFSDATA_HEADER(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LHCFSDATA_HEADER[nElements] : new ::LHCFSDATA_HEADER[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCFSDATA_HEADER(void *p) {
      delete ((::LHCFSDATA_HEADER*)p);
   }
   static void deleteArray_LHCFSDATA_HEADER(void *p) {
      delete [] ((::LHCFSDATA_HEADER*)p);
   }
   static void destruct_LHCFSDATA_HEADER(void *p) {
      typedef ::LHCFSDATA_HEADER current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::LHCFSDATA_HEADER

//______________________________________________________________________________
namespace ROOTDict {
   void CPWS_CH_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CPWS_CH.
      typedef ::ROOTShadow::Shadow::CPWS_CH ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::CPWS_CH*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vmon", &sobj->vmon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "imon", &sobj->imon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_CPWS_CH(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CPWS_CH : new ::CPWS_CH;
   }
   static void *newArray_CPWS_CH(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CPWS_CH[nElements] : new ::CPWS_CH[nElements];
   }
   // Wrapper around operator delete
   static void delete_CPWS_CH(void *p) {
      delete ((::CPWS_CH*)p);
   }
   static void deleteArray_CPWS_CH(void *p) {
      delete [] ((::CPWS_CH*)p);
   }
   static void destruct_CPWS_CH(void *p) {
      typedef ::CPWS_CH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::CPWS_CH

//______________________________________________________________________________
namespace ROOTDict {
   void CPWS1_DATA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CPWS1_DATA.
      typedef ::ROOTShadow::Shadow::CPWS1_DATA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::CPWS1_DATA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot0[12]", sobj->slot0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot1[12]", sobj->slot1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot2[12]", sobj->slot2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot3[6]", sobj->slot3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot5[6]", sobj->slot5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temperature[6]", sobj->temperature);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_CPWS1_DATA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CPWS1_DATA : new ::CPWS1_DATA;
   }
   static void *newArray_CPWS1_DATA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CPWS1_DATA[nElements] : new ::CPWS1_DATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_CPWS1_DATA(void *p) {
      delete ((::CPWS1_DATA*)p);
   }
   static void deleteArray_CPWS1_DATA(void *p) {
      delete [] ((::CPWS1_DATA*)p);
   }
   static void destruct_CPWS1_DATA(void *p) {
      typedef ::CPWS1_DATA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::CPWS1_DATA

//______________________________________________________________________________
namespace ROOTDict {
   void CPWS2_DATA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CPWS2_DATA.
      typedef ::ROOTShadow::Shadow::CPWS2_DATA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::CPWS2_DATA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot0[12]", sobj->slot0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot1[12]", sobj->slot1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot2[12]", sobj->slot2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot3[12]", sobj->slot3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slot4[6]", sobj->slot4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temperature[6]", sobj->temperature);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_CPWS2_DATA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CPWS2_DATA : new ::CPWS2_DATA;
   }
   static void *newArray_CPWS2_DATA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CPWS2_DATA[nElements] : new ::CPWS2_DATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_CPWS2_DATA(void *p) {
      delete ((::CPWS2_DATA*)p);
   }
   static void deleteArray_CPWS2_DATA(void *p) {
      delete [] ((::CPWS2_DATA*)p);
   }
   static void destruct_CPWS2_DATA(void *p) {
      typedef ::CPWS2_DATA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::CPWS2_DATA

//______________________________________________________________________________
namespace ROOTDict {
   void AGILENT_CH_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class AGILENT_CH.
      typedef ::ROOTShadow::Shadow::AGILENT_CH ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::AGILENT_CH*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vmon", &sobj->vmon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "imon", &sobj->imon);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AGILENT_CH(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AGILENT_CH : new ::AGILENT_CH;
   }
   static void *newArray_AGILENT_CH(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AGILENT_CH[nElements] : new ::AGILENT_CH[nElements];
   }
   // Wrapper around operator delete
   static void delete_AGILENT_CH(void *p) {
      delete ((::AGILENT_CH*)p);
   }
   static void deleteArray_AGILENT_CH(void *p) {
      delete [] ((::AGILENT_CH*)p);
   }
   static void destruct_AGILENT_CH(void *p) {
      typedef ::AGILENT_CH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AGILENT_CH

//______________________________________________________________________________
namespace ROOTDict {
   void AGILENT_MOD_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class AGILENT_MOD.
      typedef ::ROOTShadow::Shadow::AGILENT_MOD ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::AGILENT_MOD*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ch[4]", sobj->ch);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AGILENT_MOD(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AGILENT_MOD : new ::AGILENT_MOD;
   }
   static void *newArray_AGILENT_MOD(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AGILENT_MOD[nElements] : new ::AGILENT_MOD[nElements];
   }
   // Wrapper around operator delete
   static void delete_AGILENT_MOD(void *p) {
      delete ((::AGILENT_MOD*)p);
   }
   static void deleteArray_AGILENT_MOD(void *p) {
      delete [] ((::AGILENT_MOD*)p);
   }
   static void destruct_AGILENT_MOD(void *p) {
      typedef ::AGILENT_MOD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AGILENT_MOD

//______________________________________________________________________________
namespace ROOTDict {
   void AGILENT_DATA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class AGILENT_DATA.
      typedef ::ROOTShadow::Shadow::AGILENT_DATA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::AGILENT_DATA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod[4]", sobj->mod);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AGILENT_DATA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AGILENT_DATA : new ::AGILENT_DATA;
   }
   static void *newArray_AGILENT_DATA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::AGILENT_DATA[nElements] : new ::AGILENT_DATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_AGILENT_DATA(void *p) {
      delete ((::AGILENT_DATA*)p);
   }
   static void deleteArray_AGILENT_DATA(void *p) {
      delete [] ((::AGILENT_DATA*)p);
   }
   static void destruct_AGILENT_DATA(void *p) {
      typedef ::AGILENT_DATA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AGILENT_DATA

//______________________________________________________________________________
namespace ROOTDict {
   void TRHX_DATA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TRHX_DATA.
      typedef ::ROOTShadow::Shadow::TRHX_DATA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::TRHX_DATA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temp[12]", sobj->temp);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TRHX_DATA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TRHX_DATA : new ::TRHX_DATA;
   }
   static void *newArray_TRHX_DATA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TRHX_DATA[nElements] : new ::TRHX_DATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_TRHX_DATA(void *p) {
      delete ((::TRHX_DATA*)p);
   }
   static void deleteArray_TRHX_DATA(void *p) {
      delete [] ((::TRHX_DATA*)p);
   }
   static void destruct_TRHX_DATA(void *p) {
      typedef ::TRHX_DATA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TRHX_DATA

//______________________________________________________________________________
namespace ROOTDict {
   void ENCODER_DATA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ENCODER_DATA.
      typedef ::ROOTShadow::Shadow::ENCODER_DATA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::ENCODER_DATA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "encoder1", &sobj->encoder1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "encoder2", &sobj->encoder2);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ENCODER_DATA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ENCODER_DATA : new ::ENCODER_DATA;
   }
   static void *newArray_ENCODER_DATA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ENCODER_DATA[nElements] : new ::ENCODER_DATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_ENCODER_DATA(void *p) {
      delete ((::ENCODER_DATA*)p);
   }
   static void deleteArray_ENCODER_DATA(void *p) {
      delete [] ((::ENCODER_DATA*)p);
   }
   static void destruct_ENCODER_DATA(void *p) {
      typedef ::ENCODER_DATA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ENCODER_DATA

//______________________________________________________________________________
namespace ROOTDict {
   void ADC_DATA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ADC_DATA.
      typedef ::ROOTShadow::Shadow::ADC_DATA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::ADC_DATA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc[16]", sobj->adc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vol[16]", sobj->vol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cal[16]", sobj->cal);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ADC_DATA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ADC_DATA : new ::ADC_DATA;
   }
   static void *newArray_ADC_DATA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ADC_DATA[nElements] : new ::ADC_DATA[nElements];
   }
   // Wrapper around operator delete
   static void delete_ADC_DATA(void *p) {
      delete ((::ADC_DATA*)p);
   }
   static void deleteArray_ADC_DATA(void *p) {
      delete [] ((::ADC_DATA*)p);
   }
   static void destruct_ADC_DATA(void *p) {
      typedef ::ADC_DATA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ADC_DATA

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_Arm_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_Arm.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_Arm ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_Arm*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "STATUS[24]", sobj->STATUS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FC_STATUS[24]", sobj->FC_STATUS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "POSITION_STR[24]", sobj->POSITION_STR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RUNNUMBER", &sobj->RUNNUMBER);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "POSITION_DBL", &sobj->POSITION_DBL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FC_RATE", &sobj->FC_RATE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SHOWER0", &sobj->SHOWER0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SHOWER1", &sobj->SHOWER1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BEAM_POS0_H", &sobj->BEAM_POS0_H);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BEAM_POS0_V", &sobj->BEAM_POS0_V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BEAM_POS1_H", &sobj->BEAM_POS1_H);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BEAM_POS1_V", &sobj->BEAM_POS1_V);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_Arm(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_Arm : new ::DIP_LHCF_Arm;
   }
   static void *newArray_DIP_LHCF_Arm(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_Arm[nElements] : new ::DIP_LHCF_Arm[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_Arm(void *p) {
      delete ((::DIP_LHCF_Arm*)p);
   }
   static void deleteArray_DIP_LHCF_Arm(void *p) {
      delete [] ((::DIP_LHCF_Arm*)p);
   }
   static void destruct_DIP_LHCF_Arm(void *p) {
      typedef ::DIP_LHCF_Arm current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_Arm

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_COINCIDENCE_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_COINCIDENCE.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_COINCIDENCE ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_COINCIDENCE*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "STATUS[24]", sobj->STATUS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FC1_FC2_RATE", &sobj->FC1_FC2_RATE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SHOWER1_SHOWER2_RATE", &sobj->SHOWER1_SHOWER2_RATE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FC2_SHOWER1_RATE", &sobj->FC2_SHOWER1_RATE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FC1_SHOWER2_RATE", &sobj->FC1_SHOWER2_RATE);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_COINCIDENCE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_COINCIDENCE : new ::DIP_LHCF_COINCIDENCE;
   }
   static void *newArray_DIP_LHCF_COINCIDENCE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_COINCIDENCE[nElements] : new ::DIP_LHCF_COINCIDENCE[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_COINCIDENCE(void *p) {
      delete ((::DIP_LHCF_COINCIDENCE*)p);
   }
   static void deleteArray_DIP_LHCF_COINCIDENCE(void *p) {
      delete [] ((::DIP_LHCF_COINCIDENCE*)p);
   }
   static void destruct_DIP_LHCF_COINCIDENCE(void *p) {
      typedef ::DIP_LHCF_COINCIDENCE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_COINCIDENCE

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_EXPTSTATUS_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_EXPTSTATUS.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_EXPTSTATUS ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_EXPTSTATUS*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Status[24]", sobj->Status);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_EXPTSTATUS(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_EXPTSTATUS : new ::DIP_LHCF_EXPTSTATUS;
   }
   static void *newArray_DIP_LHCF_EXPTSTATUS(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_EXPTSTATUS[nElements] : new ::DIP_LHCF_EXPTSTATUS[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_EXPTSTATUS(void *p) {
      delete ((::DIP_LHCF_EXPTSTATUS*)p);
   }
   static void deleteArray_DIP_LHCF_EXPTSTATUS(void *p) {
      delete [] ((::DIP_LHCF_EXPTSTATUS*)p);
   }
   static void destruct_DIP_LHCF_EXPTSTATUS(void *p) {
      typedef ::DIP_LHCF_EXPTSTATUS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_EXPTSTATUS

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_INTERLOCK_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_INTERLOCK.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_INTERLOCK ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_INTERLOCK*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beam_injection_accept", &sobj->beam_injection_accept);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_INTERLOCK(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_INTERLOCK : new ::DIP_LHCF_INTERLOCK;
   }
   static void *newArray_DIP_LHCF_INTERLOCK(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_INTERLOCK[nElements] : new ::DIP_LHCF_INTERLOCK[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_INTERLOCK(void *p) {
      delete ((::DIP_LHCF_INTERLOCK*)p);
   }
   static void deleteArray_DIP_LHCF_INTERLOCK(void *p) {
      delete [] ((::DIP_LHCF_INTERLOCK*)p);
   }
   static void destruct_DIP_LHCF_INTERLOCK(void *p) {
      typedef ::DIP_LHCF_INTERLOCK current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_INTERLOCK

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_LUMINOSITY_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_LUMINOSITY.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_LUMINOSITY ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_LUMINOSITY*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Lumi_TotInst", &sobj->Lumi_TotInst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Source[24]", sobj->Source);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_LUMINOSITY(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_LUMINOSITY : new ::DIP_LHCF_LUMINOSITY;
   }
   static void *newArray_DIP_LHCF_LUMINOSITY(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_LUMINOSITY[nElements] : new ::DIP_LHCF_LUMINOSITY[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_LUMINOSITY(void *p) {
      delete ((::DIP_LHCF_LUMINOSITY*)p);
   }
   static void deleteArray_DIP_LHCF_LUMINOSITY(void *p) {
      delete [] ((::DIP_LHCF_LUMINOSITY*)p);
   }
   static void destruct_DIP_LHCF_LUMINOSITY(void *p) {
      typedef ::DIP_LHCF_LUMINOSITY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_LUMINOSITY

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_HS_LHC_INJECTION_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_HS_LHC_INJECTION.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_HS_LHC_INJECTION ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_INJECTION*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DIP_DEFAULT[24]", sobj->DIP_DEFAULT);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_HS_LHC_INJECTION(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_HS_LHC_INJECTION : new ::DIP_LHCF_HS_LHC_INJECTION;
   }
   static void *newArray_DIP_LHCF_HS_LHC_INJECTION(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_HS_LHC_INJECTION[nElements] : new ::DIP_LHCF_HS_LHC_INJECTION[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_HS_LHC_INJECTION(void *p) {
      delete ((::DIP_LHCF_HS_LHC_INJECTION*)p);
   }
   static void deleteArray_DIP_LHCF_HS_LHC_INJECTION(void *p) {
      delete [] ((::DIP_LHCF_HS_LHC_INJECTION*)p);
   }
   static void destruct_DIP_LHCF_HS_LHC_INJECTION(void *p) {
      typedef ::DIP_LHCF_HS_LHC_INJECTION current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_HS_LHC_INJECTION

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_HS_LHC_ADJUST_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_HS_LHC_ADJUST.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_HS_LHC_ADJUST ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_ADJUST*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DIP_DEFAULT[24]", sobj->DIP_DEFAULT);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_HS_LHC_ADJUST(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_HS_LHC_ADJUST : new ::DIP_LHCF_HS_LHC_ADJUST;
   }
   static void *newArray_DIP_LHCF_HS_LHC_ADJUST(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_HS_LHC_ADJUST[nElements] : new ::DIP_LHCF_HS_LHC_ADJUST[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_HS_LHC_ADJUST(void *p) {
      delete ((::DIP_LHCF_HS_LHC_ADJUST*)p);
   }
   static void deleteArray_DIP_LHCF_HS_LHC_ADJUST(void *p) {
      delete [] ((::DIP_LHCF_HS_LHC_ADJUST*)p);
   }
   static void destruct_DIP_LHCF_HS_LHC_ADJUST(void *p) {
      typedef ::DIP_LHCF_HS_LHC_ADJUST current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_HS_LHC_ADJUST

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_HS_LHC_BEAMDUMP_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_HS_LHC_BEAMDUMP.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_HS_LHC_BEAMDUMP ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_HS_LHC_BEAMDUMP*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DIP_DEFAULT[24]", sobj->DIP_DEFAULT);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_HS_LHC_BEAMDUMP(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_HS_LHC_BEAMDUMP : new ::DIP_LHCF_HS_LHC_BEAMDUMP;
   }
   static void *newArray_DIP_LHCF_HS_LHC_BEAMDUMP(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_HS_LHC_BEAMDUMP[nElements] : new ::DIP_LHCF_HS_LHC_BEAMDUMP[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_HS_LHC_BEAMDUMP(void *p) {
      delete ((::DIP_LHCF_HS_LHC_BEAMDUMP*)p);
   }
   static void deleteArray_DIP_LHCF_HS_LHC_BEAMDUMP(void *p) {
      delete [] ((::DIP_LHCF_HS_LHC_BEAMDUMP*)p);
   }
   static void destruct_DIP_LHCF_HS_LHC_BEAMDUMP(void *p) {
      typedef ::DIP_LHCF_HS_LHC_BEAMDUMP current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_HS_LHC_BEAMDUMP

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_BPM_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_BPM.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_BPM ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BPM*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verticalPos[4]", sobj->verticalPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "horizontalPos[4]", sobj->horizontalPos);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_BPM(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_BPM : new ::DIP_ACC_BEAM_BPM;
   }
   static void *newArray_DIP_ACC_BEAM_BPM(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_BPM[nElements] : new ::DIP_ACC_BEAM_BPM[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_BPM(void *p) {
      delete ((::DIP_ACC_BEAM_BPM*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_BPM(void *p) {
      delete [] ((::DIP_ACC_BEAM_BPM*)p);
   }
   static void destruct_DIP_ACC_BEAM_BPM(void *p) {
      typedef ::DIP_ACC_BEAM_BPM current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_BPM

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_BPM_M_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_BPM_M.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_BPM_M ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BPM_M*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bpmNames[8][24]", sobj->bpmNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusV[8]", sobj->statusV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusH[8]", sobj->statusH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorV[8]", sobj->errorV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorH[8]", sobj->errorH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verticalPos[8]", sobj->verticalPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "horizontalPos[8]", sobj->horizontalPos);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_BPM_M(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_BPM_M : new ::DIP_ACC_BEAM_BPM_M;
   }
   static void *newArray_DIP_ACC_BEAM_BPM_M(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_BPM_M[nElements] : new ::DIP_ACC_BEAM_BPM_M[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_BPM_M(void *p) {
      delete ((::DIP_ACC_BEAM_BPM_M*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_BPM_M(void *p) {
      delete [] ((::DIP_ACC_BEAM_BPM_M*)p);
   }
   static void destruct_DIP_ACC_BEAM_BPM_M(void *p) {
      typedef ::DIP_ACC_BEAM_BPM_M current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_BPM_M

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_ENERGY_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_ENERGY.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_ENERGY ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_ENERGY*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "payload", &sobj->payload);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_ENERGY(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_ENERGY : new ::DIP_ACC_BEAM_ENERGY;
   }
   static void *newArray_DIP_ACC_BEAM_ENERGY(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_ENERGY[nElements] : new ::DIP_ACC_BEAM_ENERGY[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_ENERGY(void *p) {
      delete ((::DIP_ACC_BEAM_ENERGY*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_ENERGY(void *p) {
      delete [] ((::DIP_ACC_BEAM_ENERGY*)p);
   }
   static void destruct_DIP_ACC_BEAM_ENERGY(void *p) {
      typedef ::DIP_ACC_BEAM_ENERGY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_ENERGY

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_INTENSITY_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_INTENSITY.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_INTENSITY ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITY*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalIntensity", &sobj->totalIntensity);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_INTENSITY(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_INTENSITY : new ::DIP_ACC_BEAM_INTENSITY;
   }
   static void *newArray_DIP_ACC_BEAM_INTENSITY(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_INTENSITY[nElements] : new ::DIP_ACC_BEAM_INTENSITY[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_INTENSITY(void *p) {
      delete ((::DIP_ACC_BEAM_INTENSITY*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_INTENSITY(void *p) {
      delete [] ((::DIP_ACC_BEAM_INTENSITY*)p);
   }
   static void destruct_DIP_ACC_BEAM_INTENSITY(void *p) {
      typedef ::DIP_ACC_BEAM_INTENSITY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_INTENSITY

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_INTENSITYPERBUNCH_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_INTENSITYPERBUNCH.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_INTENSITYPERBUNCH ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITYPERBUNCH*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "averageBunchIntensities[3564]", sobj->averageBunchIntensities);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wholeBeamIntensity", &sobj->wholeBeamIntensity);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_INTENSITYPERBUNCH : new ::DIP_ACC_BEAM_INTENSITYPERBUNCH;
   }
   static void *newArray_DIP_ACC_BEAM_INTENSITYPERBUNCH(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_INTENSITYPERBUNCH[nElements] : new ::DIP_ACC_BEAM_INTENSITYPERBUNCH[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p) {
      delete ((::DIP_ACC_BEAM_INTENSITYPERBUNCH*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p) {
      delete [] ((::DIP_ACC_BEAM_INTENSITYPERBUNCH*)p);
   }
   static void destruct_DIP_ACC_BEAM_INTENSITYPERBUNCH(void *p) {
      typedef ::DIP_ACC_BEAM_INTENSITYPERBUNCH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_INTENSITYPERBUNCH

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_INTENSITYPERBUNCH_S_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_INTENSITYPERBUNCH_S.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_INTENSITYPERBUNCH_S ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filledbunches[500]", sobj->filledbunches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "averageBunchIntensities[500]", sobj->averageBunchIntensities);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S : new ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S;
   }
   static void *newArray_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S[nElements] : new ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p) {
      delete ((::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p) {
      delete [] ((::DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)p);
   }
   static void destruct_DIP_ACC_BEAM_INTENSITYPERBUNCH_S(void *p) {
      typedef ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_INTENSITYPERBUNCH_S

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_LUMINOSITYAVERAGE_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_LUMINOSITYAVERAGE.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_LUMINOSITYAVERAGE ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqMode", &sobj->acqMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanLuminosity", &sobj->meanLuminosity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanCrossingAngle", &sobj->meanCrossingAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanLuminosityError", &sobj->meanLuminosityError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanCrossingAngleError", &sobj->meanCrossingAngleError);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_LUMINOSITYAVERAGE : new ::DIP_ACC_BEAM_LUMINOSITYAVERAGE;
   }
   static void *newArray_DIP_ACC_BEAM_LUMINOSITYAVERAGE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_LUMINOSITYAVERAGE[nElements] : new ::DIP_ACC_BEAM_LUMINOSITYAVERAGE[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p) {
      delete ((::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p) {
      delete [] ((::DIP_ACC_BEAM_LUMINOSITYAVERAGE*)p);
   }
   static void destruct_DIP_ACC_BEAM_LUMINOSITYAVERAGE(void *p) {
      typedef ::DIP_ACC_BEAM_LUMINOSITYAVERAGE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_LUMINOSITYAVERAGE

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_LUMINOSITYPERBUNCH_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_LUMINOSITYPERBUNCH.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_LUMINOSITYPERBUNCH ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqMode", &sobj->acqMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bunchByBunchLuminosity[3564]", sobj->bunchByBunchLuminosity);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH : new ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH;
   }
   static void *newArray_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH[nElements] : new ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p) {
      delete ((::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p) {
      delete [] ((::DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)p);
   }
   static void destruct_DIP_ACC_BEAM_LUMINOSITYPERBUNCH(void *p) {
      typedef ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_LUMINOSITYPERBUNCH

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_LUMINOSITYSCAN_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_LUMINOSITYSCAN.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_LUMINOSITYSCAN ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_LUMINOSITYSCAN*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LumiScan_Status[24]", sobj->LumiScan_Status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Acquisition_Flag", &sobj->Acquisition_Flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Plane[24]", sobj->Plane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP", &sobj->IP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beam", &sobj->Beam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Step_Progress", &sobj->Step_Progress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nominal_Separation", &sobj->Nominal_Separation);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_LUMINOSITYSCAN : new ::DIP_ACC_BEAM_LUMINOSITYSCAN;
   }
   static void *newArray_DIP_ACC_BEAM_LUMINOSITYSCAN(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_LUMINOSITYSCAN[nElements] : new ::DIP_ACC_BEAM_LUMINOSITYSCAN[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p) {
      delete ((::DIP_ACC_BEAM_LUMINOSITYSCAN*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p) {
      delete [] ((::DIP_ACC_BEAM_LUMINOSITYSCAN*)p);
   }
   static void destruct_DIP_ACC_BEAM_LUMINOSITYSCAN(void *p) {
      typedef ::DIP_ACC_BEAM_LUMINOSITYSCAN current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_LUMINOSITYSCAN

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_SIZE_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_SIZE.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_SIZE ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_SIZE*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqTime[24]", sobj->acqTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cycleName[24]", sobj->cycleName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "positionSet1", &sobj->positionSet1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "positionSet2", &sobj->positionSet2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqCounter", &sobj->acqCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqState", &sobj->acqState);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbDataSets", &sobj->nbDataSets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeSet1", &sobj->planeSet1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeSet2", &sobj->planeSet2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaSet1", &sobj->sigmaSet1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaSet2", &sobj->sigmaSet2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deviceName[24]", sobj->deviceName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cycleTime[24]", sobj->cycleTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqMsg[24]", sobj->acqMsg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "amplitudeSet2", &sobj->amplitudeSet2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "amplitudeSet1", &sobj->amplitudeSet1);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_SIZE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_SIZE : new ::DIP_ACC_BEAM_SIZE;
   }
   static void *newArray_DIP_ACC_BEAM_SIZE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_SIZE[nElements] : new ::DIP_ACC_BEAM_SIZE[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_SIZE(void *p) {
      delete ((::DIP_ACC_BEAM_SIZE*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_SIZE(void *p) {
      delete [] ((::DIP_ACC_BEAM_SIZE*)p);
   }
   static void destruct_DIP_ACC_BEAM_SIZE(void *p) {
      typedef ::DIP_ACC_BEAM_SIZE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_SIZE

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_SIZE_AVERAGE_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_SIZE_AVERAGE.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_SIZE_AVERAGE ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_SIZE_AVERAGE*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaH", &sobj->sigmaH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaV", &sobj->sigmaV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emittanceH", &sobj->emittanceH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emittanceV", &sobj->emittanceV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorSigmaH", &sobj->errorSigmaH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorSigmaV", &sobj->errorSigmaV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqMode", &sobj->acqMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_SIZE_AVERAGE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_SIZE_AVERAGE : new ::DIP_ACC_BEAM_SIZE_AVERAGE;
   }
   static void *newArray_DIP_ACC_BEAM_SIZE_AVERAGE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_SIZE_AVERAGE[nElements] : new ::DIP_ACC_BEAM_SIZE_AVERAGE[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_SIZE_AVERAGE(void *p) {
      delete ((::DIP_ACC_BEAM_SIZE_AVERAGE*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_SIZE_AVERAGE(void *p) {
      delete [] ((::DIP_ACC_BEAM_SIZE_AVERAGE*)p);
   }
   static void destruct_DIP_ACC_BEAM_SIZE_AVERAGE(void *p) {
      typedef ::DIP_ACC_BEAM_SIZE_AVERAGE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_SIZE_AVERAGE

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_WIRESCANNER_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_WIRESCANNER.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_WIRESCANNER ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_WIRESCANNER*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acqMode", &sobj->acqMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SIGMA_OUT[3564]", sobj->SIGMA_OUT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SIGMA_IN[3564]", sobj->SIGMA_IN);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_WIRESCANNER(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_WIRESCANNER : new ::DIP_ACC_BEAM_WIRESCANNER;
   }
   static void *newArray_DIP_ACC_BEAM_WIRESCANNER(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_WIRESCANNER[nElements] : new ::DIP_ACC_BEAM_WIRESCANNER[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_WIRESCANNER(void *p) {
      delete ((::DIP_ACC_BEAM_WIRESCANNER*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_WIRESCANNER(void *p) {
      delete [] ((::DIP_ACC_BEAM_WIRESCANNER*)p);
   }
   static void destruct_DIP_ACC_BEAM_WIRESCANNER(void *p) {
      typedef ::DIP_ACC_BEAM_WIRESCANNER current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_WIRESCANNER

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_BEAM_BETASTAR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_BEAM_BETASTAR.
      typedef ::ROOTShadow::Shadow::DIP_ACC_BEAM_BETASTAR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_BEAM_BETASTAR*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "payload", &sobj->payload);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_BEAM_BETASTAR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_BETASTAR : new ::DIP_ACC_BEAM_BETASTAR;
   }
   static void *newArray_DIP_ACC_BEAM_BETASTAR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_BEAM_BETASTAR[nElements] : new ::DIP_ACC_BEAM_BETASTAR[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_BEAM_BETASTAR(void *p) {
      delete ((::DIP_ACC_BEAM_BETASTAR*)p);
   }
   static void deleteArray_DIP_ACC_BEAM_BETASTAR(void *p) {
      delete [] ((::DIP_ACC_BEAM_BETASTAR*)p);
   }
   static void destruct_DIP_ACC_BEAM_BETASTAR(void *p) {
      typedef ::DIP_ACC_BEAM_BETASTAR current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_BEAM_BETASTAR

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_HS_LHC_INJECTION_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_HS_LHC_INJECTION.
      typedef ::ROOTShadow::Shadow::DIP_ACC_HS_LHC_INJECTION ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_INJECTION*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[24]", sobj->value);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_HS_LHC_INJECTION(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_HS_LHC_INJECTION : new ::DIP_ACC_HS_LHC_INJECTION;
   }
   static void *newArray_DIP_ACC_HS_LHC_INJECTION(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_HS_LHC_INJECTION[nElements] : new ::DIP_ACC_HS_LHC_INJECTION[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_HS_LHC_INJECTION(void *p) {
      delete ((::DIP_ACC_HS_LHC_INJECTION*)p);
   }
   static void deleteArray_DIP_ACC_HS_LHC_INJECTION(void *p) {
      delete [] ((::DIP_ACC_HS_LHC_INJECTION*)p);
   }
   static void destruct_DIP_ACC_HS_LHC_INJECTION(void *p) {
      typedef ::DIP_ACC_HS_LHC_INJECTION current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_HS_LHC_INJECTION

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_HS_LHC_ADJUST_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_HS_LHC_ADJUST.
      typedef ::ROOTShadow::Shadow::DIP_ACC_HS_LHC_ADJUST ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_ADJUST*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[24]", sobj->value);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_HS_LHC_ADJUST(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_HS_LHC_ADJUST : new ::DIP_ACC_HS_LHC_ADJUST;
   }
   static void *newArray_DIP_ACC_HS_LHC_ADJUST(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_HS_LHC_ADJUST[nElements] : new ::DIP_ACC_HS_LHC_ADJUST[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_HS_LHC_ADJUST(void *p) {
      delete ((::DIP_ACC_HS_LHC_ADJUST*)p);
   }
   static void deleteArray_DIP_ACC_HS_LHC_ADJUST(void *p) {
      delete [] ((::DIP_ACC_HS_LHC_ADJUST*)p);
   }
   static void destruct_DIP_ACC_HS_LHC_ADJUST(void *p) {
      typedef ::DIP_ACC_HS_LHC_ADJUST current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_HS_LHC_ADJUST

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_HS_LHC_BEAMDUMP_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_HS_LHC_BEAMDUMP.
      typedef ::ROOTShadow::Shadow::DIP_ACC_HS_LHC_BEAMDUMP ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_HS_LHC_BEAMDUMP*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[24]", sobj->value);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_HS_LHC_BEAMDUMP(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_HS_LHC_BEAMDUMP : new ::DIP_ACC_HS_LHC_BEAMDUMP;
   }
   static void *newArray_DIP_ACC_HS_LHC_BEAMDUMP(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_HS_LHC_BEAMDUMP[nElements] : new ::DIP_ACC_HS_LHC_BEAMDUMP[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_HS_LHC_BEAMDUMP(void *p) {
      delete ((::DIP_ACC_HS_LHC_BEAMDUMP*)p);
   }
   static void deleteArray_DIP_ACC_HS_LHC_BEAMDUMP(void *p) {
      delete [] ((::DIP_ACC_HS_LHC_BEAMDUMP*)p);
   }
   static void destruct_DIP_ACC_HS_LHC_BEAMDUMP(void *p) {
      typedef ::DIP_ACC_HS_LHC_BEAMDUMP current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_HS_LHC_BEAMDUMP

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_BEAMMODE_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_BEAMMODE.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_BEAMMODE ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_BEAMMODE*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[24]", sobj->value);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_BEAMMODE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_BEAMMODE : new ::DIP_ACC_RUNCONTROL_BEAMMODE;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_BEAMMODE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_BEAMMODE[nElements] : new ::DIP_ACC_RUNCONTROL_BEAMMODE[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_BEAMMODE(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_BEAMMODE*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_BEAMMODE(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_BEAMMODE*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_BEAMMODE(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_BEAMMODE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_BEAMMODE

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_BUNCHCONFIG_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_BUNCHCONFIG.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_BUNCHCONFIG ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[2808]", sobj->value);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_BUNCHCONFIG : new ::DIP_ACC_RUNCONTROL_BUNCHCONFIG;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_BUNCHCONFIG(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_BUNCHCONFIG[nElements] : new ::DIP_ACC_RUNCONTROL_BUNCHCONFIG[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_BUNCHCONFIG*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_BUNCHCONFIG(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_BUNCHCONFIG current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_BUNCHCONFIG

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_FILLNUMBER_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_FILLNUMBER.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_FILLNUMBER ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_FILLNUMBER*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value", &sobj->value);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_FILLNUMBER : new ::DIP_ACC_RUNCONTROL_FILLNUMBER;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_FILLNUMBER(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_FILLNUMBER[nElements] : new ::DIP_ACC_RUNCONTROL_FILLNUMBER[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_FILLNUMBER*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_FILLNUMBER*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_FILLNUMBER(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_FILLNUMBER current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_FILLNUMBER

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_FILLSCHEMA_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_FILLSCHEMA.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_FILLSCHEMA ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_FILLSCHEMA*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value", &sobj->value);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_FILLSCHEMA : new ::DIP_ACC_RUNCONTROL_FILLSCHEMA;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_FILLSCHEMA(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_FILLSCHEMA[nElements] : new ::DIP_ACC_RUNCONTROL_FILLSCHEMA[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_FILLSCHEMA*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_FILLSCHEMA*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_FILLSCHEMA(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_FILLSCHEMA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_FILLSCHEMA

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_MACHINEMODE_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_MACHINEMODE.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_MACHINEMODE ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_MACHINEMODE*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[24]", sobj->value);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_MACHINEMODE : new ::DIP_ACC_RUNCONTROL_MACHINEMODE;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_MACHINEMODE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_MACHINEMODE[nElements] : new ::DIP_ACC_RUNCONTROL_MACHINEMODE[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_MACHINEMODE*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_MACHINEMODE*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_MACHINEMODE(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_MACHINEMODE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_MACHINEMODE

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_PAGE_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_PAGE.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_PAGE ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_PAGE*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[24]", sobj->value);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_PAGE(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_PAGE : new ::DIP_ACC_RUNCONTROL_PAGE;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_PAGE(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_PAGE[nElements] : new ::DIP_ACC_RUNCONTROL_PAGE[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_PAGE(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_PAGE*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_PAGE(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_PAGE*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_PAGE(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_PAGE current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_PAGE

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_SAFEBEAM_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_SAFEBEAM.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_SAFEBEAM ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_SAFEBEAM*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "payload", &sobj->payload);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_SAFEBEAM : new ::DIP_ACC_RUNCONTROL_SAFEBEAM;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_SAFEBEAM(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_SAFEBEAM[nElements] : new ::DIP_ACC_RUNCONTROL_SAFEBEAM[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_SAFEBEAM*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_SAFEBEAM*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_SAFEBEAM(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_SAFEBEAM current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_SAFEBEAM

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_RUNCONTROL_RUNCONFIGURATION_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_RUNCONTROL_RUNCONFIGURATION.
      typedef ::ROOTShadow::Shadow::DIP_ACC_RUNCONTROL_RUNCONFIGURATION ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FILL_NO[24]", sobj->FILL_NO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_ENERGY[24]", sobj->TARGET_ENERGY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PARTICLE_TYPE_B1[24]", sobj->PARTICLE_TYPE_B1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PARTICLE_TYPE_B2[24]", sobj->PARTICLE_TYPE_B2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ACTIVE_INJECTION_SCHEME[24]", sobj->ACTIVE_INJECTION_SCHEME);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP1_XING_V_MURAD[24]", sobj->IP1_XING_V_MURAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP1_NO_COLLISIONS[24]", sobj->IP1_NO_COLLISIONS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP2_XING_V_MURAD[24]", sobj->IP2_XING_V_MURAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP2_ALICE_V_MURAD[24]", sobj->IP2_ALICE_V_MURAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP2_NO_COLLISIONS[24]", sobj->IP2_NO_COLLISIONS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP5_XING_H_MURAD[24]", sobj->IP5_XING_H_MURAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP5_NO_COLLISIONS[24]", sobj->IP5_NO_COLLISIONS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP8_XING_H_MURAD[24]", sobj->IP8_XING_H_MURAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP8_LHCB_H_MURAD[24]", sobj->IP8_LHCB_H_MURAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IP8_NO_COLLISIONS[24]", sobj->IP8_NO_COLLISIONS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NO_BUNCHES[24]", sobj->NO_BUNCHES);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION : new ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION;
   }
   static void *newArray_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION[nElements] : new ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p) {
      delete ((::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)p);
   }
   static void deleteArray_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p) {
      delete [] ((::DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)p);
   }
   static void destruct_DIP_ACC_RUNCONTROL_RUNCONFIGURATION(void *p) {
      typedef ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_RUNCONTROL_RUNCONFIGURATION

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_TIMING_POSTMORTEM_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_TIMING_POSTMORTEM.
      typedef ::ROOTShadow::Shadow::DIP_ACC_TIMING_POSTMORTEM ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_POSTMORTEM*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oCounter", &sobj->oCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "payload", &sobj->payload);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_TIMING_POSTMORTEM(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_TIMING_POSTMORTEM : new ::DIP_ACC_TIMING_POSTMORTEM;
   }
   static void *newArray_DIP_ACC_TIMING_POSTMORTEM(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_TIMING_POSTMORTEM[nElements] : new ::DIP_ACC_TIMING_POSTMORTEM[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_TIMING_POSTMORTEM(void *p) {
      delete ((::DIP_ACC_TIMING_POSTMORTEM*)p);
   }
   static void deleteArray_DIP_ACC_TIMING_POSTMORTEM(void *p) {
      delete [] ((::DIP_ACC_TIMING_POSTMORTEM*)p);
   }
   static void destruct_DIP_ACC_TIMING_POSTMORTEM(void *p) {
      typedef ::DIP_ACC_TIMING_POSTMORTEM current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_TIMING_POSTMORTEM

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_TIMING_RXCLOCKS_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_TIMING_RXCLOCKS.
      typedef ::ROOTShadow::Shadow::DIP_ACC_TIMING_RXCLOCKS ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_RXCLOCKS*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "F40_B1", &sobj->F40_B1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "F40_B2", &sobj->F40_B2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "F40_REF", &sobj->F40_REF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_TIMING_RXCLOCKS(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_TIMING_RXCLOCKS : new ::DIP_ACC_TIMING_RXCLOCKS;
   }
   static void *newArray_DIP_ACC_TIMING_RXCLOCKS(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_TIMING_RXCLOCKS[nElements] : new ::DIP_ACC_TIMING_RXCLOCKS[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_TIMING_RXCLOCKS(void *p) {
      delete ((::DIP_ACC_TIMING_RXCLOCKS*)p);
   }
   static void deleteArray_DIP_ACC_TIMING_RXCLOCKS(void *p) {
      delete [] ((::DIP_ACC_TIMING_RXCLOCKS*)p);
   }
   static void destruct_DIP_ACC_TIMING_RXCLOCKS(void *p) {
      typedef ::DIP_ACC_TIMING_RXCLOCKS current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_TIMING_RXCLOCKS

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_TIMING_RXFREV_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_TIMING_RXFREV.
      typedef ::ROOTShadow::Shadow::DIP_ACC_TIMING_RXFREV ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_TIMING_RXFREV*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FREV_B1", &sobj->FREV_B1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FREV_B2", &sobj->FREV_B2);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_TIMING_RXFREV(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_TIMING_RXFREV : new ::DIP_ACC_TIMING_RXFREV;
   }
   static void *newArray_DIP_ACC_TIMING_RXFREV(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_TIMING_RXFREV[nElements] : new ::DIP_ACC_TIMING_RXFREV[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_TIMING_RXFREV(void *p) {
      delete ((::DIP_ACC_TIMING_RXFREV*)p);
   }
   static void deleteArray_DIP_ACC_TIMING_RXFREV(void *p) {
      delete [] ((::DIP_ACC_TIMING_RXFREV*)p);
   }
   static void destruct_DIP_ACC_TIMING_RXFREV(void *p) {
      typedef ::DIP_ACC_TIMING_RXFREV current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_TIMING_RXFREV

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ACC_MACHINE_COLLPOSITION_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ACC_MACHINE_COLLPOSITION.
      typedef ::ROOTShadow::Shadow::DIP_ACC_MACHINE_COLLPOSITION ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ACC_MACHINE_COLLPOSITION*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvdt_right_downstream", &sobj->lvdt_right_downstream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvdt_gap_upstream", &sobj->lvdt_gap_upstream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvdt_left_downstream", &sobj->lvdt_left_downstream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvdt_gap_downstream", &sobj->lvdt_gap_downstream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvdt_left_upstream", &sobj->lvdt_left_upstream);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lvdt_right_upstream", &sobj->lvdt_right_upstream);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ACC_MACHINE_COLLPOSITION(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_MACHINE_COLLPOSITION : new ::DIP_ACC_MACHINE_COLLPOSITION;
   }
   static void *newArray_DIP_ACC_MACHINE_COLLPOSITION(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ACC_MACHINE_COLLPOSITION[nElements] : new ::DIP_ACC_MACHINE_COLLPOSITION[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ACC_MACHINE_COLLPOSITION(void *p) {
      delete ((::DIP_ACC_MACHINE_COLLPOSITION*)p);
   }
   static void deleteArray_DIP_ACC_MACHINE_COLLPOSITION(void *p) {
      delete [] ((::DIP_ACC_MACHINE_COLLPOSITION*)p);
   }
   static void destruct_DIP_ACC_MACHINE_COLLPOSITION(void *p) {
      typedef ::DIP_ACC_MACHINE_COLLPOSITION current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ACC_MACHINE_COLLPOSITION

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ATLAS_CLOCK_SELECTION_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ATLAS_CLOCK_SELECTION.
      typedef ::ROOTShadow::Shadow::DIP_ATLAS_CLOCK_SELECTION ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_CLOCK_SELECTION*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ORBIT[24]", sobj->ORBIT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BC[24]", sobj->BC);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ATLAS_CLOCK_SELECTION(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_CLOCK_SELECTION : new ::DIP_ATLAS_CLOCK_SELECTION;
   }
   static void *newArray_DIP_ATLAS_CLOCK_SELECTION(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_CLOCK_SELECTION[nElements] : new ::DIP_ATLAS_CLOCK_SELECTION[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ATLAS_CLOCK_SELECTION(void *p) {
      delete ((::DIP_ATLAS_CLOCK_SELECTION*)p);
   }
   static void deleteArray_DIP_ATLAS_CLOCK_SELECTION(void *p) {
      delete [] ((::DIP_ATLAS_CLOCK_SELECTION*)p);
   }
   static void destruct_DIP_ATLAS_CLOCK_SELECTION(void *p) {
      typedef ::DIP_ATLAS_CLOCK_SELECTION current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ATLAS_CLOCK_SELECTION

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ATLAS_FILLLUMI_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ATLAS_FILLLUMI.
      typedef ::ROOTShadow::Shadow::DIP_ATLAS_FILLLUMI ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_FILLLUMI*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IntLumi_Recorded", &sobj->IntLumi_Recorded);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IntLumi_Delivered_StableBeams", &sobj->IntLumi_Delivered_StableBeams);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ATLAS_FILLLUMI(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_FILLLUMI : new ::DIP_ATLAS_FILLLUMI;
   }
   static void *newArray_DIP_ATLAS_FILLLUMI(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_FILLLUMI[nElements] : new ::DIP_ATLAS_FILLLUMI[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ATLAS_FILLLUMI(void *p) {
      delete ((::DIP_ATLAS_FILLLUMI*)p);
   }
   static void deleteArray_DIP_ATLAS_FILLLUMI(void *p) {
      delete [] ((::DIP_ATLAS_FILLLUMI*)p);
   }
   static void destruct_DIP_ATLAS_FILLLUMI(void *p) {
      typedef ::DIP_ATLAS_FILLLUMI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ATLAS_FILLLUMI

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ATLAS_LUMIPERBUNCH_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ATLAS_LUMIPERBUNCH.
      typedef ::ROOTShadow::Shadow::DIP_ATLAS_LUMIPERBUNCH ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_LUMIPERBUNCH*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Source[24]", sobj->Source);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Lumi_BunchInst[3564]", sobj->Lumi_BunchInst);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ATLAS_LUMIPERBUNCH(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_LUMIPERBUNCH : new ::DIP_ATLAS_LUMIPERBUNCH;
   }
   static void *newArray_DIP_ATLAS_LUMIPERBUNCH(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_LUMIPERBUNCH[nElements] : new ::DIP_ATLAS_LUMIPERBUNCH[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ATLAS_LUMIPERBUNCH(void *p) {
      delete ((::DIP_ATLAS_LUMIPERBUNCH*)p);
   }
   static void deleteArray_DIP_ATLAS_LUMIPERBUNCH(void *p) {
      delete [] ((::DIP_ATLAS_LUMIPERBUNCH*)p);
   }
   static void destruct_DIP_ATLAS_LUMIPERBUNCH(void *p) {
      typedef ::DIP_ATLAS_LUMIPERBUNCH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ATLAS_LUMIPERBUNCH

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_ATLAS_LUMINOSITY_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_ATLAS_LUMINOSITY.
      typedef ::ROOTShadow::Shadow::DIP_ATLAS_LUMINOSITY ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_ATLAS_LUMINOSITY*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Source[24]", sobj->Source);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexCount", &sobj->VertexCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy[4]", sobj->dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CollRate", &sobj->CollRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CollRateSource[24]", sobj->CollRateSource);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CollRateIntTime", &sobj->CollRateIntTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CollRateErr", &sobj->CollRateErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Lumi_TotInst", &sobj->Lumi_TotInst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dummy2[4]", sobj->dummy2);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_ATLAS_LUMINOSITY(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_LUMINOSITY : new ::DIP_ATLAS_LUMINOSITY;
   }
   static void *newArray_DIP_ATLAS_LUMINOSITY(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_ATLAS_LUMINOSITY[nElements] : new ::DIP_ATLAS_LUMINOSITY[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_ATLAS_LUMINOSITY(void *p) {
      delete ((::DIP_ATLAS_LUMINOSITY*)p);
   }
   static void deleteArray_DIP_ATLAS_LUMINOSITY(void *p) {
      delete [] ((::DIP_ATLAS_LUMINOSITY*)p);
   }
   static void destruct_DIP_ATLAS_LUMINOSITY(void *p) {
      typedef ::DIP_ATLAS_LUMINOSITY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_ATLAS_LUMINOSITY

//______________________________________________________________________________
namespace ROOTDict {
   void DIP_LHCF_DOSIMETER_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class DIP_LHCF_DOSIMETER.
      typedef ::ROOTShadow::Shadow::DIP_LHCF_DOSIMETER ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::DIP_LHCF_DOSIMETER*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Quality", &sobj->Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seu_count3V", &sobj->seu_count3V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doseHighSensitivity", &sobj->doseHighSensitivity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doseMediumSensitivity", &sobj->doseMediumSensitivity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neutronsHighSensitivity", &sobj->neutronsHighSensitivity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temp", &sobj->temp);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DIP_LHCF_DOSIMETER(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_DOSIMETER : new ::DIP_LHCF_DOSIMETER;
   }
   static void *newArray_DIP_LHCF_DOSIMETER(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DIP_LHCF_DOSIMETER[nElements] : new ::DIP_LHCF_DOSIMETER[nElements];
   }
   // Wrapper around operator delete
   static void delete_DIP_LHCF_DOSIMETER(void *p) {
      delete ((::DIP_LHCF_DOSIMETER*)p);
   }
   static void deleteArray_DIP_LHCF_DOSIMETER(void *p) {
      delete [] ((::DIP_LHCF_DOSIMETER*)p);
   }
   static void destruct_DIP_LHCF_DOSIMETER(void *p) {
      typedef ::DIP_LHCF_DOSIMETER current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::DIP_LHCF_DOSIMETER

/********************************************************
* libLHCfSC.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablelibLHCfSC();

extern "C" void G__set_cpp_environmentlibLHCfSC() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TLHCFSDATA.h");
  G__add_compiledheader("TLHCFDIPDATAH.h");
  G__add_compiledheader("TLHCFDIPDATAL.h");
  G__add_compiledheader("TLHCFDIPDATAVH.h");
  G__add_compiledheader("SocketControl.h");
  G__cpp_reset_tagtablelibLHCfSC();
}
#include <new>
extern "C" int G__cpp_dllrevlibLHCfSC() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* LHCFSDATA_HEADER */
// automatic default constructor
static int G__libLHCfSC_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFSDATA_HEADER *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFSDATA_HEADER[n];
     } else {
       p = new((void*) gvp) LHCFSDATA_HEADER[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFSDATA_HEADER;
     } else {
       p = new((void*) gvp) LHCFSDATA_HEADER;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHCFSDATA_HEADER* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHCFSDATA_HEADER(*(LHCFSDATA_HEADER*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCFSDATA_HEADER G__TLHCFSDATA_HEADER;
static int G__libLHCfSC_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LHCFSDATA_HEADER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCFSDATA_HEADER*) (soff+(sizeof(LHCFSDATA_HEADER)*i)))->~G__TLHCFSDATA_HEADER();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LHCFSDATA_HEADER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LHCFSDATA_HEADER*) (soff))->~G__TLHCFSDATA_HEADER();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFSDATA_HEADER* dest = (LHCFSDATA_HEADER*) G__getstructoffset();
   *dest = *(LHCFSDATA_HEADER*) libp->para[0].ref;
   const LHCFSDATA_HEADER& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CPWS_CH */
// automatic default constructor
static int G__libLHCfSC_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CPWS_CH *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CPWS_CH[n];
     } else {
       p = new((void*) gvp) CPWS_CH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CPWS_CH;
     } else {
       p = new((void*) gvp) CPWS_CH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CPWS_CH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CPWS_CH(*(CPWS_CH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CPWS_CH G__TCPWS_CH;
static int G__libLHCfSC_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CPWS_CH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CPWS_CH*) (soff+(sizeof(CPWS_CH)*i)))->~G__TCPWS_CH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CPWS_CH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CPWS_CH*) (soff))->~G__TCPWS_CH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CPWS_CH* dest = (CPWS_CH*) G__getstructoffset();
   *dest = *(CPWS_CH*) libp->para[0].ref;
   const CPWS_CH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CPWS1_DATA */
// automatic default constructor
static int G__libLHCfSC_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CPWS1_DATA *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CPWS1_DATA[n];
     } else {
       p = new((void*) gvp) CPWS1_DATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CPWS1_DATA;
     } else {
       p = new((void*) gvp) CPWS1_DATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CPWS1_DATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CPWS1_DATA(*(CPWS1_DATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CPWS1_DATA G__TCPWS1_DATA;
static int G__libLHCfSC_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CPWS1_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CPWS1_DATA*) (soff+(sizeof(CPWS1_DATA)*i)))->~G__TCPWS1_DATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CPWS1_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CPWS1_DATA*) (soff))->~G__TCPWS1_DATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CPWS1_DATA* dest = (CPWS1_DATA*) G__getstructoffset();
   *dest = *(CPWS1_DATA*) libp->para[0].ref;
   const CPWS1_DATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CPWS2_DATA */
// automatic default constructor
static int G__libLHCfSC_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CPWS2_DATA *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CPWS2_DATA[n];
     } else {
       p = new((void*) gvp) CPWS2_DATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CPWS2_DATA;
     } else {
       p = new((void*) gvp) CPWS2_DATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CPWS2_DATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CPWS2_DATA(*(CPWS2_DATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CPWS2_DATA G__TCPWS2_DATA;
static int G__libLHCfSC_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CPWS2_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CPWS2_DATA*) (soff+(sizeof(CPWS2_DATA)*i)))->~G__TCPWS2_DATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CPWS2_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CPWS2_DATA*) (soff))->~G__TCPWS2_DATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CPWS2_DATA* dest = (CPWS2_DATA*) G__getstructoffset();
   *dest = *(CPWS2_DATA*) libp->para[0].ref;
   const CPWS2_DATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AGILENT_CH */
// automatic default constructor
static int G__libLHCfSC_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AGILENT_CH *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AGILENT_CH[n];
     } else {
       p = new((void*) gvp) AGILENT_CH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AGILENT_CH;
     } else {
       p = new((void*) gvp) AGILENT_CH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AGILENT_CH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AGILENT_CH(*(AGILENT_CH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AGILENT_CH G__TAGILENT_CH;
static int G__libLHCfSC_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AGILENT_CH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AGILENT_CH*) (soff+(sizeof(AGILENT_CH)*i)))->~G__TAGILENT_CH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AGILENT_CH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AGILENT_CH*) (soff))->~G__TAGILENT_CH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AGILENT_CH* dest = (AGILENT_CH*) G__getstructoffset();
   *dest = *(AGILENT_CH*) libp->para[0].ref;
   const AGILENT_CH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AGILENT_MOD */
// automatic default constructor
static int G__libLHCfSC_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AGILENT_MOD *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AGILENT_MOD[n];
     } else {
       p = new((void*) gvp) AGILENT_MOD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AGILENT_MOD;
     } else {
       p = new((void*) gvp) AGILENT_MOD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AGILENT_MOD* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AGILENT_MOD(*(AGILENT_MOD*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AGILENT_MOD G__TAGILENT_MOD;
static int G__libLHCfSC_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AGILENT_MOD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AGILENT_MOD*) (soff+(sizeof(AGILENT_MOD)*i)))->~G__TAGILENT_MOD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AGILENT_MOD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AGILENT_MOD*) (soff))->~G__TAGILENT_MOD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AGILENT_MOD* dest = (AGILENT_MOD*) G__getstructoffset();
   *dest = *(AGILENT_MOD*) libp->para[0].ref;
   const AGILENT_MOD& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AGILENT_DATA */
// automatic default constructor
static int G__libLHCfSC_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AGILENT_DATA *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AGILENT_DATA[n];
     } else {
       p = new((void*) gvp) AGILENT_DATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AGILENT_DATA;
     } else {
       p = new((void*) gvp) AGILENT_DATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AGILENT_DATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AGILENT_DATA(*(AGILENT_DATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AGILENT_DATA G__TAGILENT_DATA;
static int G__libLHCfSC_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AGILENT_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AGILENT_DATA*) (soff+(sizeof(AGILENT_DATA)*i)))->~G__TAGILENT_DATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AGILENT_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AGILENT_DATA*) (soff))->~G__TAGILENT_DATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_174_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AGILENT_DATA* dest = (AGILENT_DATA*) G__getstructoffset();
   *dest = *(AGILENT_DATA*) libp->para[0].ref;
   const AGILENT_DATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRHX_DATA */
// automatic default constructor
static int G__libLHCfSC_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRHX_DATA *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRHX_DATA[n];
     } else {
       p = new((void*) gvp) TRHX_DATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TRHX_DATA;
     } else {
       p = new((void*) gvp) TRHX_DATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TRHX_DATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TRHX_DATA(*(TRHX_DATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRHX_DATA G__TTRHX_DATA;
static int G__libLHCfSC_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TRHX_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TRHX_DATA*) (soff+(sizeof(TRHX_DATA)*i)))->~G__TTRHX_DATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TRHX_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TRHX_DATA*) (soff))->~G__TTRHX_DATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TRHX_DATA* dest = (TRHX_DATA*) G__getstructoffset();
   *dest = *(TRHX_DATA*) libp->para[0].ref;
   const TRHX_DATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ENCODER_DATA */
// automatic default constructor
static int G__libLHCfSC_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ENCODER_DATA *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ENCODER_DATA[n];
     } else {
       p = new((void*) gvp) ENCODER_DATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ENCODER_DATA;
     } else {
       p = new((void*) gvp) ENCODER_DATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ENCODER_DATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ENCODER_DATA(*(ENCODER_DATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ENCODER_DATA G__TENCODER_DATA;
static int G__libLHCfSC_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ENCODER_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ENCODER_DATA*) (soff+(sizeof(ENCODER_DATA)*i)))->~G__TENCODER_DATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ENCODER_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ENCODER_DATA*) (soff))->~G__TENCODER_DATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ENCODER_DATA* dest = (ENCODER_DATA*) G__getstructoffset();
   *dest = *(ENCODER_DATA*) libp->para[0].ref;
   const ENCODER_DATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ADC_DATA */
// automatic default constructor
static int G__libLHCfSC_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ADC_DATA *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ADC_DATA[n];
     } else {
       p = new((void*) gvp) ADC_DATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ADC_DATA;
     } else {
       p = new((void*) gvp) ADC_DATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_177_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ADC_DATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ADC_DATA(*(ADC_DATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ADC_DATA G__TADC_DATA;
static int G__libLHCfSC_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ADC_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ADC_DATA*) (soff+(sizeof(ADC_DATA)*i)))->~G__TADC_DATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ADC_DATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ADC_DATA*) (soff))->~G__TADC_DATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ADC_DATA* dest = (ADC_DATA*) G__getstructoffset();
   *dest = *(ADC_DATA*) libp->para[0].ref;
   const ADC_DATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHCFSDATA */
static int G__libLHCfSC_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFSDATA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFSDATA[n];
     } else {
       p = new((void*) gvp) LHCFSDATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFSDATA;
     } else {
       p = new((void*) gvp) LHCFSDATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFSDATA*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFSDATA*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFSDATA::GetClassVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFSDATA::GetClassSize());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHCFSDATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHCFSDATA(*(LHCFSDATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCFSDATA G__TLHCFSDATA;
static int G__libLHCfSC_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LHCFSDATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCFSDATA*) (soff+(sizeof(LHCFSDATA)*i)))->~G__TLHCFSDATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LHCFSDATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LHCFSDATA*) (soff))->~G__TLHCFSDATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFSDATA* dest = (LHCFSDATA*) G__getstructoffset();
   *dest = *(LHCFSDATA*) libp->para[0].ref;
   const LHCFSDATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLHCFSDATA */
static int G__libLHCfSC_195_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFSDATA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFSDATA[n];
     } else {
       p = new((void*) gvp) TLHCFSDATA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFSDATA;
     } else {
       p = new((void*) gvp) TLHCFSDATA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFSDATA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TLHCFSDATA((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TLHCFSDATA((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TLHCFSDATA*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFSDATA*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFSDATA*) G__getstructoffset())->DataClear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFSDATA*) G__getstructoffset())->Add((TLHCFSDATA*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFSDATA*) G__getstructoffset())->Divide((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TLHCFSDATA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFSDATA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TLHCFSDATA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TLHCFSDATA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFSDATA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFSDATA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFSDATA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFSDATA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFSDATA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TLHCFSDATA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TLHCFSDATA(*(TLHCFSDATA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLHCFSDATA G__TTLHCFSDATA;
static int G__libLHCfSC_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TLHCFSDATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TLHCFSDATA*) (soff+(sizeof(TLHCFSDATA)*i)))->~G__TTLHCFSDATA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TLHCFSDATA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TLHCFSDATA*) (soff))->~G__TTLHCFSDATA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFSDATA* dest = (TLHCFSDATA*) G__getstructoffset();
   *dest = *(TLHCFSDATA*) libp->para[0].ref;
   const TLHCFSDATA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_Arm */
// automatic default constructor
static int G__libLHCfSC_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_Arm *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_Arm[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_Arm[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_Arm;
     } else {
       p = new((void*) gvp) DIP_LHCF_Arm;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_Arm* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_Arm(*(DIP_LHCF_Arm*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_Arm G__TDIP_LHCF_Arm;
static int G__libLHCfSC_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_Arm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_Arm*) (soff+(sizeof(DIP_LHCF_Arm)*i)))->~G__TDIP_LHCF_Arm();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_Arm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_Arm*) (soff))->~G__TDIP_LHCF_Arm();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_Arm* dest = (DIP_LHCF_Arm*) G__getstructoffset();
   *dest = *(DIP_LHCF_Arm*) libp->para[0].ref;
   const DIP_LHCF_Arm& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_COINCIDENCE */
// automatic default constructor
static int G__libLHCfSC_197_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_COINCIDENCE *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_COINCIDENCE[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_COINCIDENCE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_COINCIDENCE;
     } else {
       p = new((void*) gvp) DIP_LHCF_COINCIDENCE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_COINCIDENCE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_COINCIDENCE(*(DIP_LHCF_COINCIDENCE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_COINCIDENCE G__TDIP_LHCF_COINCIDENCE;
static int G__libLHCfSC_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_COINCIDENCE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_COINCIDENCE*) (soff+(sizeof(DIP_LHCF_COINCIDENCE)*i)))->~G__TDIP_LHCF_COINCIDENCE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_COINCIDENCE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_COINCIDENCE*) (soff))->~G__TDIP_LHCF_COINCIDENCE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_COINCIDENCE* dest = (DIP_LHCF_COINCIDENCE*) G__getstructoffset();
   *dest = *(DIP_LHCF_COINCIDENCE*) libp->para[0].ref;
   const DIP_LHCF_COINCIDENCE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_EXPTSTATUS */
// automatic default constructor
static int G__libLHCfSC_198_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_EXPTSTATUS *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_EXPTSTATUS[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_EXPTSTATUS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_EXPTSTATUS;
     } else {
       p = new((void*) gvp) DIP_LHCF_EXPTSTATUS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_198_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_EXPTSTATUS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_EXPTSTATUS(*(DIP_LHCF_EXPTSTATUS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_EXPTSTATUS G__TDIP_LHCF_EXPTSTATUS;
static int G__libLHCfSC_198_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_EXPTSTATUS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_EXPTSTATUS*) (soff+(sizeof(DIP_LHCF_EXPTSTATUS)*i)))->~G__TDIP_LHCF_EXPTSTATUS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_EXPTSTATUS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_EXPTSTATUS*) (soff))->~G__TDIP_LHCF_EXPTSTATUS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_198_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_EXPTSTATUS* dest = (DIP_LHCF_EXPTSTATUS*) G__getstructoffset();
   *dest = *(DIP_LHCF_EXPTSTATUS*) libp->para[0].ref;
   const DIP_LHCF_EXPTSTATUS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_INTERLOCK */
// automatic default constructor
static int G__libLHCfSC_199_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_INTERLOCK *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_INTERLOCK[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_INTERLOCK[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_INTERLOCK;
     } else {
       p = new((void*) gvp) DIP_LHCF_INTERLOCK;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_199_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_INTERLOCK* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_INTERLOCK(*(DIP_LHCF_INTERLOCK*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_INTERLOCK G__TDIP_LHCF_INTERLOCK;
static int G__libLHCfSC_199_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_INTERLOCK*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_INTERLOCK*) (soff+(sizeof(DIP_LHCF_INTERLOCK)*i)))->~G__TDIP_LHCF_INTERLOCK();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_INTERLOCK*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_INTERLOCK*) (soff))->~G__TDIP_LHCF_INTERLOCK();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_199_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_INTERLOCK* dest = (DIP_LHCF_INTERLOCK*) G__getstructoffset();
   *dest = *(DIP_LHCF_INTERLOCK*) libp->para[0].ref;
   const DIP_LHCF_INTERLOCK& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_LUMINOSITY */
// automatic default constructor
static int G__libLHCfSC_200_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_LUMINOSITY *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_LUMINOSITY[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_LUMINOSITY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_LUMINOSITY;
     } else {
       p = new((void*) gvp) DIP_LHCF_LUMINOSITY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_200_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_LUMINOSITY* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_LUMINOSITY(*(DIP_LHCF_LUMINOSITY*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_LUMINOSITY G__TDIP_LHCF_LUMINOSITY;
static int G__libLHCfSC_200_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_LUMINOSITY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_LUMINOSITY*) (soff+(sizeof(DIP_LHCF_LUMINOSITY)*i)))->~G__TDIP_LHCF_LUMINOSITY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_LUMINOSITY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_LUMINOSITY*) (soff))->~G__TDIP_LHCF_LUMINOSITY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_200_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_LUMINOSITY* dest = (DIP_LHCF_LUMINOSITY*) G__getstructoffset();
   *dest = *(DIP_LHCF_LUMINOSITY*) libp->para[0].ref;
   const DIP_LHCF_LUMINOSITY& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_HS_LHC_INJECTION */
// automatic default constructor
static int G__libLHCfSC_201_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_HS_LHC_INJECTION *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_HS_LHC_INJECTION[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_HS_LHC_INJECTION[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_HS_LHC_INJECTION;
     } else {
       p = new((void*) gvp) DIP_LHCF_HS_LHC_INJECTION;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_HS_LHC_INJECTION* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_HS_LHC_INJECTION(*(DIP_LHCF_HS_LHC_INJECTION*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_HS_LHC_INJECTION G__TDIP_LHCF_HS_LHC_INJECTION;
static int G__libLHCfSC_201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_HS_LHC_INJECTION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_HS_LHC_INJECTION*) (soff+(sizeof(DIP_LHCF_HS_LHC_INJECTION)*i)))->~G__TDIP_LHCF_HS_LHC_INJECTION();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_HS_LHC_INJECTION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_HS_LHC_INJECTION*) (soff))->~G__TDIP_LHCF_HS_LHC_INJECTION();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_HS_LHC_INJECTION* dest = (DIP_LHCF_HS_LHC_INJECTION*) G__getstructoffset();
   *dest = *(DIP_LHCF_HS_LHC_INJECTION*) libp->para[0].ref;
   const DIP_LHCF_HS_LHC_INJECTION& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_HS_LHC_ADJUST */
// automatic default constructor
static int G__libLHCfSC_202_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_HS_LHC_ADJUST *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_HS_LHC_ADJUST[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_HS_LHC_ADJUST[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_HS_LHC_ADJUST;
     } else {
       p = new((void*) gvp) DIP_LHCF_HS_LHC_ADJUST;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_202_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_HS_LHC_ADJUST* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_HS_LHC_ADJUST(*(DIP_LHCF_HS_LHC_ADJUST*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_HS_LHC_ADJUST G__TDIP_LHCF_HS_LHC_ADJUST;
static int G__libLHCfSC_202_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_HS_LHC_ADJUST*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_HS_LHC_ADJUST*) (soff+(sizeof(DIP_LHCF_HS_LHC_ADJUST)*i)))->~G__TDIP_LHCF_HS_LHC_ADJUST();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_HS_LHC_ADJUST*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_HS_LHC_ADJUST*) (soff))->~G__TDIP_LHCF_HS_LHC_ADJUST();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_202_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_HS_LHC_ADJUST* dest = (DIP_LHCF_HS_LHC_ADJUST*) G__getstructoffset();
   *dest = *(DIP_LHCF_HS_LHC_ADJUST*) libp->para[0].ref;
   const DIP_LHCF_HS_LHC_ADJUST& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_HS_LHC_BEAMDUMP */
// automatic default constructor
static int G__libLHCfSC_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_HS_LHC_BEAMDUMP *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_HS_LHC_BEAMDUMP[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_HS_LHC_BEAMDUMP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_HS_LHC_BEAMDUMP;
     } else {
       p = new((void*) gvp) DIP_LHCF_HS_LHC_BEAMDUMP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_HS_LHC_BEAMDUMP* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_HS_LHC_BEAMDUMP(*(DIP_LHCF_HS_LHC_BEAMDUMP*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_HS_LHC_BEAMDUMP G__TDIP_LHCF_HS_LHC_BEAMDUMP;
static int G__libLHCfSC_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_HS_LHC_BEAMDUMP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_HS_LHC_BEAMDUMP*) (soff+(sizeof(DIP_LHCF_HS_LHC_BEAMDUMP)*i)))->~G__TDIP_LHCF_HS_LHC_BEAMDUMP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_HS_LHC_BEAMDUMP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_HS_LHC_BEAMDUMP*) (soff))->~G__TDIP_LHCF_HS_LHC_BEAMDUMP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_HS_LHC_BEAMDUMP* dest = (DIP_LHCF_HS_LHC_BEAMDUMP*) G__getstructoffset();
   *dest = *(DIP_LHCF_HS_LHC_BEAMDUMP*) libp->para[0].ref;
   const DIP_LHCF_HS_LHC_BEAMDUMP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_BPM */
// automatic default constructor
static int G__libLHCfSC_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_BPM *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_BPM[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_BPM[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_BPM;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_BPM;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_BPM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_BPM(*(DIP_ACC_BEAM_BPM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_BPM G__TDIP_ACC_BEAM_BPM;
static int G__libLHCfSC_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_BPM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_BPM*) (soff+(sizeof(DIP_ACC_BEAM_BPM)*i)))->~G__TDIP_ACC_BEAM_BPM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_BPM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_BPM*) (soff))->~G__TDIP_ACC_BEAM_BPM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_BPM* dest = (DIP_ACC_BEAM_BPM*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_BPM*) libp->para[0].ref;
   const DIP_ACC_BEAM_BPM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_BPM_M */
// automatic default constructor
static int G__libLHCfSC_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_BPM_M *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_BPM_M[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_BPM_M[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_BPM_M;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_BPM_M;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_BPM_M* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_BPM_M(*(DIP_ACC_BEAM_BPM_M*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_BPM_M G__TDIP_ACC_BEAM_BPM_M;
static int G__libLHCfSC_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_BPM_M*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_BPM_M*) (soff+(sizeof(DIP_ACC_BEAM_BPM_M)*i)))->~G__TDIP_ACC_BEAM_BPM_M();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_BPM_M*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_BPM_M*) (soff))->~G__TDIP_ACC_BEAM_BPM_M();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_BPM_M* dest = (DIP_ACC_BEAM_BPM_M*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_BPM_M*) libp->para[0].ref;
   const DIP_ACC_BEAM_BPM_M& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_ENERGY */
// automatic default constructor
static int G__libLHCfSC_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_ENERGY *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_ENERGY[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_ENERGY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_ENERGY;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_ENERGY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_ENERGY* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_ENERGY(*(DIP_ACC_BEAM_ENERGY*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_ENERGY G__TDIP_ACC_BEAM_ENERGY;
static int G__libLHCfSC_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_ENERGY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_ENERGY*) (soff+(sizeof(DIP_ACC_BEAM_ENERGY)*i)))->~G__TDIP_ACC_BEAM_ENERGY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_ENERGY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_ENERGY*) (soff))->~G__TDIP_ACC_BEAM_ENERGY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_ENERGY* dest = (DIP_ACC_BEAM_ENERGY*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_ENERGY*) libp->para[0].ref;
   const DIP_ACC_BEAM_ENERGY& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_INTENSITY */
// automatic default constructor
static int G__libLHCfSC_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_INTENSITY *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_INTENSITY[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_INTENSITY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_INTENSITY;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_INTENSITY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_INTENSITY* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_INTENSITY(*(DIP_ACC_BEAM_INTENSITY*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_INTENSITY G__TDIP_ACC_BEAM_INTENSITY;
static int G__libLHCfSC_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_INTENSITY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_INTENSITY*) (soff+(sizeof(DIP_ACC_BEAM_INTENSITY)*i)))->~G__TDIP_ACC_BEAM_INTENSITY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_INTENSITY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_INTENSITY*) (soff))->~G__TDIP_ACC_BEAM_INTENSITY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_INTENSITY* dest = (DIP_ACC_BEAM_INTENSITY*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_INTENSITY*) libp->para[0].ref;
   const DIP_ACC_BEAM_INTENSITY& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_INTENSITYPERBUNCH */
// automatic default constructor
static int G__libLHCfSC_208_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_INTENSITYPERBUNCH *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_INTENSITYPERBUNCH[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_INTENSITYPERBUNCH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_INTENSITYPERBUNCH;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_INTENSITYPERBUNCH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_208_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_INTENSITYPERBUNCH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_INTENSITYPERBUNCH(*(DIP_ACC_BEAM_INTENSITYPERBUNCH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_INTENSITYPERBUNCH G__TDIP_ACC_BEAM_INTENSITYPERBUNCH;
static int G__libLHCfSC_208_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_INTENSITYPERBUNCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_INTENSITYPERBUNCH*) (soff+(sizeof(DIP_ACC_BEAM_INTENSITYPERBUNCH)*i)))->~G__TDIP_ACC_BEAM_INTENSITYPERBUNCH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_INTENSITYPERBUNCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_INTENSITYPERBUNCH*) (soff))->~G__TDIP_ACC_BEAM_INTENSITYPERBUNCH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_208_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_INTENSITYPERBUNCH* dest = (DIP_ACC_BEAM_INTENSITYPERBUNCH*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_INTENSITYPERBUNCH*) libp->para[0].ref;
   const DIP_ACC_BEAM_INTENSITYPERBUNCH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_INTENSITYPERBUNCH_S */
// automatic default constructor
static int G__libLHCfSC_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_INTENSITYPERBUNCH_S *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_INTENSITYPERBUNCH_S[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_INTENSITYPERBUNCH_S[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_INTENSITYPERBUNCH_S;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_INTENSITYPERBUNCH_S;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_INTENSITYPERBUNCH_S* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_INTENSITYPERBUNCH_S(*(DIP_ACC_BEAM_INTENSITYPERBUNCH_S*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_INTENSITYPERBUNCH_S G__TDIP_ACC_BEAM_INTENSITYPERBUNCH_S;
static int G__libLHCfSC_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_INTENSITYPERBUNCH_S*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_INTENSITYPERBUNCH_S*) (soff+(sizeof(DIP_ACC_BEAM_INTENSITYPERBUNCH_S)*i)))->~G__TDIP_ACC_BEAM_INTENSITYPERBUNCH_S();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_INTENSITYPERBUNCH_S*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_INTENSITYPERBUNCH_S*) (soff))->~G__TDIP_ACC_BEAM_INTENSITYPERBUNCH_S();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_INTENSITYPERBUNCH_S* dest = (DIP_ACC_BEAM_INTENSITYPERBUNCH_S*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_INTENSITYPERBUNCH_S*) libp->para[0].ref;
   const DIP_ACC_BEAM_INTENSITYPERBUNCH_S& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_LUMINOSITYAVERAGE */
// automatic default constructor
static int G__libLHCfSC_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_LUMINOSITYAVERAGE *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_LUMINOSITYAVERAGE[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_LUMINOSITYAVERAGE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_LUMINOSITYAVERAGE;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_LUMINOSITYAVERAGE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_LUMINOSITYAVERAGE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_LUMINOSITYAVERAGE(*(DIP_ACC_BEAM_LUMINOSITYAVERAGE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_LUMINOSITYAVERAGE G__TDIP_ACC_BEAM_LUMINOSITYAVERAGE;
static int G__libLHCfSC_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_LUMINOSITYAVERAGE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_LUMINOSITYAVERAGE*) (soff+(sizeof(DIP_ACC_BEAM_LUMINOSITYAVERAGE)*i)))->~G__TDIP_ACC_BEAM_LUMINOSITYAVERAGE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_LUMINOSITYAVERAGE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_LUMINOSITYAVERAGE*) (soff))->~G__TDIP_ACC_BEAM_LUMINOSITYAVERAGE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_210_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_LUMINOSITYAVERAGE* dest = (DIP_ACC_BEAM_LUMINOSITYAVERAGE*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_LUMINOSITYAVERAGE*) libp->para[0].ref;
   const DIP_ACC_BEAM_LUMINOSITYAVERAGE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_LUMINOSITYPERBUNCH */
// automatic default constructor
static int G__libLHCfSC_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_LUMINOSITYPERBUNCH *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_LUMINOSITYPERBUNCH[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_LUMINOSITYPERBUNCH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_LUMINOSITYPERBUNCH;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_LUMINOSITYPERBUNCH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_LUMINOSITYPERBUNCH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_LUMINOSITYPERBUNCH(*(DIP_ACC_BEAM_LUMINOSITYPERBUNCH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_LUMINOSITYPERBUNCH G__TDIP_ACC_BEAM_LUMINOSITYPERBUNCH;
static int G__libLHCfSC_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_LUMINOSITYPERBUNCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_LUMINOSITYPERBUNCH*) (soff+(sizeof(DIP_ACC_BEAM_LUMINOSITYPERBUNCH)*i)))->~G__TDIP_ACC_BEAM_LUMINOSITYPERBUNCH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_LUMINOSITYPERBUNCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_LUMINOSITYPERBUNCH*) (soff))->~G__TDIP_ACC_BEAM_LUMINOSITYPERBUNCH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_LUMINOSITYPERBUNCH* dest = (DIP_ACC_BEAM_LUMINOSITYPERBUNCH*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_LUMINOSITYPERBUNCH*) libp->para[0].ref;
   const DIP_ACC_BEAM_LUMINOSITYPERBUNCH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_LUMINOSITYSCAN */
// automatic default constructor
static int G__libLHCfSC_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_LUMINOSITYSCAN *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_LUMINOSITYSCAN[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_LUMINOSITYSCAN[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_LUMINOSITYSCAN;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_LUMINOSITYSCAN;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_LUMINOSITYSCAN* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_LUMINOSITYSCAN(*(DIP_ACC_BEAM_LUMINOSITYSCAN*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_LUMINOSITYSCAN G__TDIP_ACC_BEAM_LUMINOSITYSCAN;
static int G__libLHCfSC_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_LUMINOSITYSCAN*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_LUMINOSITYSCAN*) (soff+(sizeof(DIP_ACC_BEAM_LUMINOSITYSCAN)*i)))->~G__TDIP_ACC_BEAM_LUMINOSITYSCAN();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_LUMINOSITYSCAN*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_LUMINOSITYSCAN*) (soff))->~G__TDIP_ACC_BEAM_LUMINOSITYSCAN();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_LUMINOSITYSCAN* dest = (DIP_ACC_BEAM_LUMINOSITYSCAN*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_LUMINOSITYSCAN*) libp->para[0].ref;
   const DIP_ACC_BEAM_LUMINOSITYSCAN& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_SIZE */
// automatic default constructor
static int G__libLHCfSC_213_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_SIZE *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_SIZE[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_SIZE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_SIZE;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_SIZE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_213_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_SIZE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_SIZE(*(DIP_ACC_BEAM_SIZE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_SIZE G__TDIP_ACC_BEAM_SIZE;
static int G__libLHCfSC_213_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_SIZE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_SIZE*) (soff+(sizeof(DIP_ACC_BEAM_SIZE)*i)))->~G__TDIP_ACC_BEAM_SIZE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_SIZE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_SIZE*) (soff))->~G__TDIP_ACC_BEAM_SIZE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_SIZE* dest = (DIP_ACC_BEAM_SIZE*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_SIZE*) libp->para[0].ref;
   const DIP_ACC_BEAM_SIZE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_SIZE_AVERAGE */
// automatic default constructor
static int G__libLHCfSC_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_SIZE_AVERAGE *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_SIZE_AVERAGE[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_SIZE_AVERAGE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_SIZE_AVERAGE;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_SIZE_AVERAGE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_214_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_SIZE_AVERAGE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_SIZE_AVERAGE(*(DIP_ACC_BEAM_SIZE_AVERAGE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_SIZE_AVERAGE G__TDIP_ACC_BEAM_SIZE_AVERAGE;
static int G__libLHCfSC_214_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_SIZE_AVERAGE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_SIZE_AVERAGE*) (soff+(sizeof(DIP_ACC_BEAM_SIZE_AVERAGE)*i)))->~G__TDIP_ACC_BEAM_SIZE_AVERAGE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_SIZE_AVERAGE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_SIZE_AVERAGE*) (soff))->~G__TDIP_ACC_BEAM_SIZE_AVERAGE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_SIZE_AVERAGE* dest = (DIP_ACC_BEAM_SIZE_AVERAGE*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_SIZE_AVERAGE*) libp->para[0].ref;
   const DIP_ACC_BEAM_SIZE_AVERAGE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_WIRESCANNER */
// automatic default constructor
static int G__libLHCfSC_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_WIRESCANNER *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_WIRESCANNER[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_WIRESCANNER[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_WIRESCANNER;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_WIRESCANNER;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_WIRESCANNER* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_WIRESCANNER(*(DIP_ACC_BEAM_WIRESCANNER*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_WIRESCANNER G__TDIP_ACC_BEAM_WIRESCANNER;
static int G__libLHCfSC_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_WIRESCANNER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_WIRESCANNER*) (soff+(sizeof(DIP_ACC_BEAM_WIRESCANNER)*i)))->~G__TDIP_ACC_BEAM_WIRESCANNER();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_WIRESCANNER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_WIRESCANNER*) (soff))->~G__TDIP_ACC_BEAM_WIRESCANNER();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_WIRESCANNER* dest = (DIP_ACC_BEAM_WIRESCANNER*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_WIRESCANNER*) libp->para[0].ref;
   const DIP_ACC_BEAM_WIRESCANNER& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_BEAM_BETASTAR */
// automatic default constructor
static int G__libLHCfSC_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_BETASTAR *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_BETASTAR[n];
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_BETASTAR[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_BEAM_BETASTAR;
     } else {
       p = new((void*) gvp) DIP_ACC_BEAM_BETASTAR;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_BEAM_BETASTAR* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_BEAM_BETASTAR(*(DIP_ACC_BEAM_BETASTAR*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_BEAM_BETASTAR G__TDIP_ACC_BEAM_BETASTAR;
static int G__libLHCfSC_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_BEAM_BETASTAR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_BEAM_BETASTAR*) (soff+(sizeof(DIP_ACC_BEAM_BETASTAR)*i)))->~G__TDIP_ACC_BEAM_BETASTAR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_BEAM_BETASTAR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_BEAM_BETASTAR*) (soff))->~G__TDIP_ACC_BEAM_BETASTAR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_BEAM_BETASTAR* dest = (DIP_ACC_BEAM_BETASTAR*) G__getstructoffset();
   *dest = *(DIP_ACC_BEAM_BETASTAR*) libp->para[0].ref;
   const DIP_ACC_BEAM_BETASTAR& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_HS_LHC_INJECTION */
// automatic default constructor
static int G__libLHCfSC_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_HS_LHC_INJECTION *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_HS_LHC_INJECTION[n];
     } else {
       p = new((void*) gvp) DIP_ACC_HS_LHC_INJECTION[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_HS_LHC_INJECTION;
     } else {
       p = new((void*) gvp) DIP_ACC_HS_LHC_INJECTION;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_HS_LHC_INJECTION* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_HS_LHC_INJECTION(*(DIP_ACC_HS_LHC_INJECTION*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_HS_LHC_INJECTION G__TDIP_ACC_HS_LHC_INJECTION;
static int G__libLHCfSC_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_HS_LHC_INJECTION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_HS_LHC_INJECTION*) (soff+(sizeof(DIP_ACC_HS_LHC_INJECTION)*i)))->~G__TDIP_ACC_HS_LHC_INJECTION();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_HS_LHC_INJECTION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_HS_LHC_INJECTION*) (soff))->~G__TDIP_ACC_HS_LHC_INJECTION();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_HS_LHC_INJECTION* dest = (DIP_ACC_HS_LHC_INJECTION*) G__getstructoffset();
   *dest = *(DIP_ACC_HS_LHC_INJECTION*) libp->para[0].ref;
   const DIP_ACC_HS_LHC_INJECTION& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_HS_LHC_ADJUST */
// automatic default constructor
static int G__libLHCfSC_218_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_HS_LHC_ADJUST *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_HS_LHC_ADJUST[n];
     } else {
       p = new((void*) gvp) DIP_ACC_HS_LHC_ADJUST[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_HS_LHC_ADJUST;
     } else {
       p = new((void*) gvp) DIP_ACC_HS_LHC_ADJUST;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_HS_LHC_ADJUST* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_HS_LHC_ADJUST(*(DIP_ACC_HS_LHC_ADJUST*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_HS_LHC_ADJUST G__TDIP_ACC_HS_LHC_ADJUST;
static int G__libLHCfSC_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_HS_LHC_ADJUST*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_HS_LHC_ADJUST*) (soff+(sizeof(DIP_ACC_HS_LHC_ADJUST)*i)))->~G__TDIP_ACC_HS_LHC_ADJUST();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_HS_LHC_ADJUST*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_HS_LHC_ADJUST*) (soff))->~G__TDIP_ACC_HS_LHC_ADJUST();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_218_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_HS_LHC_ADJUST* dest = (DIP_ACC_HS_LHC_ADJUST*) G__getstructoffset();
   *dest = *(DIP_ACC_HS_LHC_ADJUST*) libp->para[0].ref;
   const DIP_ACC_HS_LHC_ADJUST& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_HS_LHC_BEAMDUMP */
// automatic default constructor
static int G__libLHCfSC_219_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_HS_LHC_BEAMDUMP *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_HS_LHC_BEAMDUMP[n];
     } else {
       p = new((void*) gvp) DIP_ACC_HS_LHC_BEAMDUMP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_HS_LHC_BEAMDUMP;
     } else {
       p = new((void*) gvp) DIP_ACC_HS_LHC_BEAMDUMP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_HS_LHC_BEAMDUMP* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_HS_LHC_BEAMDUMP(*(DIP_ACC_HS_LHC_BEAMDUMP*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_HS_LHC_BEAMDUMP G__TDIP_ACC_HS_LHC_BEAMDUMP;
static int G__libLHCfSC_219_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_HS_LHC_BEAMDUMP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_HS_LHC_BEAMDUMP*) (soff+(sizeof(DIP_ACC_HS_LHC_BEAMDUMP)*i)))->~G__TDIP_ACC_HS_LHC_BEAMDUMP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_HS_LHC_BEAMDUMP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_HS_LHC_BEAMDUMP*) (soff))->~G__TDIP_ACC_HS_LHC_BEAMDUMP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_219_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_HS_LHC_BEAMDUMP* dest = (DIP_ACC_HS_LHC_BEAMDUMP*) G__getstructoffset();
   *dest = *(DIP_ACC_HS_LHC_BEAMDUMP*) libp->para[0].ref;
   const DIP_ACC_HS_LHC_BEAMDUMP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_BEAMMODE */
// automatic default constructor
static int G__libLHCfSC_220_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_BEAMMODE *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_BEAMMODE[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_BEAMMODE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_BEAMMODE;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_BEAMMODE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_BEAMMODE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_BEAMMODE(*(DIP_ACC_RUNCONTROL_BEAMMODE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_BEAMMODE G__TDIP_ACC_RUNCONTROL_BEAMMODE;
static int G__libLHCfSC_220_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_BEAMMODE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_BEAMMODE*) (soff+(sizeof(DIP_ACC_RUNCONTROL_BEAMMODE)*i)))->~G__TDIP_ACC_RUNCONTROL_BEAMMODE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_BEAMMODE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_BEAMMODE*) (soff))->~G__TDIP_ACC_RUNCONTROL_BEAMMODE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_220_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_BEAMMODE* dest = (DIP_ACC_RUNCONTROL_BEAMMODE*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_BEAMMODE*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_BEAMMODE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_BUNCHCONFIG */
// automatic default constructor
static int G__libLHCfSC_221_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_BUNCHCONFIG *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_BUNCHCONFIG[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_BUNCHCONFIG[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_BUNCHCONFIG;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_BUNCHCONFIG;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_221_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_BUNCHCONFIG* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_BUNCHCONFIG(*(DIP_ACC_RUNCONTROL_BUNCHCONFIG*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_BUNCHCONFIG G__TDIP_ACC_RUNCONTROL_BUNCHCONFIG;
static int G__libLHCfSC_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_BUNCHCONFIG*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_BUNCHCONFIG*) (soff+(sizeof(DIP_ACC_RUNCONTROL_BUNCHCONFIG)*i)))->~G__TDIP_ACC_RUNCONTROL_BUNCHCONFIG();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_BUNCHCONFIG*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_BUNCHCONFIG*) (soff))->~G__TDIP_ACC_RUNCONTROL_BUNCHCONFIG();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_BUNCHCONFIG* dest = (DIP_ACC_RUNCONTROL_BUNCHCONFIG*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_BUNCHCONFIG*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_BUNCHCONFIG& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_FILLNUMBER */
// automatic default constructor
static int G__libLHCfSC_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_FILLNUMBER *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_FILLNUMBER[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_FILLNUMBER[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_FILLNUMBER;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_FILLNUMBER;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_FILLNUMBER* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_FILLNUMBER(*(DIP_ACC_RUNCONTROL_FILLNUMBER*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_FILLNUMBER G__TDIP_ACC_RUNCONTROL_FILLNUMBER;
static int G__libLHCfSC_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_FILLNUMBER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_FILLNUMBER*) (soff+(sizeof(DIP_ACC_RUNCONTROL_FILLNUMBER)*i)))->~G__TDIP_ACC_RUNCONTROL_FILLNUMBER();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_FILLNUMBER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_FILLNUMBER*) (soff))->~G__TDIP_ACC_RUNCONTROL_FILLNUMBER();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_FILLNUMBER* dest = (DIP_ACC_RUNCONTROL_FILLNUMBER*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_FILLNUMBER*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_FILLNUMBER& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_FILLSCHEMA */
// automatic default constructor
static int G__libLHCfSC_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_FILLSCHEMA *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_FILLSCHEMA[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_FILLSCHEMA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_FILLSCHEMA;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_FILLSCHEMA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_223_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_FILLSCHEMA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_FILLSCHEMA(*(DIP_ACC_RUNCONTROL_FILLSCHEMA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_FILLSCHEMA G__TDIP_ACC_RUNCONTROL_FILLSCHEMA;
static int G__libLHCfSC_223_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_FILLSCHEMA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_FILLSCHEMA*) (soff+(sizeof(DIP_ACC_RUNCONTROL_FILLSCHEMA)*i)))->~G__TDIP_ACC_RUNCONTROL_FILLSCHEMA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_FILLSCHEMA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_FILLSCHEMA*) (soff))->~G__TDIP_ACC_RUNCONTROL_FILLSCHEMA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_FILLSCHEMA* dest = (DIP_ACC_RUNCONTROL_FILLSCHEMA*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_FILLSCHEMA*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_FILLSCHEMA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_MACHINEMODE */
// automatic default constructor
static int G__libLHCfSC_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_MACHINEMODE *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_MACHINEMODE[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_MACHINEMODE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_MACHINEMODE;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_MACHINEMODE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_224_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_MACHINEMODE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_MACHINEMODE(*(DIP_ACC_RUNCONTROL_MACHINEMODE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_MACHINEMODE G__TDIP_ACC_RUNCONTROL_MACHINEMODE;
static int G__libLHCfSC_224_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_MACHINEMODE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_MACHINEMODE*) (soff+(sizeof(DIP_ACC_RUNCONTROL_MACHINEMODE)*i)))->~G__TDIP_ACC_RUNCONTROL_MACHINEMODE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_MACHINEMODE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_MACHINEMODE*) (soff))->~G__TDIP_ACC_RUNCONTROL_MACHINEMODE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_MACHINEMODE* dest = (DIP_ACC_RUNCONTROL_MACHINEMODE*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_MACHINEMODE*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_MACHINEMODE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_PAGE */
// automatic default constructor
static int G__libLHCfSC_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_PAGE *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_PAGE[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_PAGE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_PAGE;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_PAGE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_PAGE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_PAGE(*(DIP_ACC_RUNCONTROL_PAGE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_PAGE G__TDIP_ACC_RUNCONTROL_PAGE;
static int G__libLHCfSC_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_PAGE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_PAGE*) (soff+(sizeof(DIP_ACC_RUNCONTROL_PAGE)*i)))->~G__TDIP_ACC_RUNCONTROL_PAGE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_PAGE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_PAGE*) (soff))->~G__TDIP_ACC_RUNCONTROL_PAGE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_PAGE* dest = (DIP_ACC_RUNCONTROL_PAGE*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_PAGE*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_PAGE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_SAFEBEAM */
// automatic default constructor
static int G__libLHCfSC_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_SAFEBEAM *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_SAFEBEAM[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_SAFEBEAM[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_SAFEBEAM;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_SAFEBEAM;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_SAFEBEAM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_SAFEBEAM(*(DIP_ACC_RUNCONTROL_SAFEBEAM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_SAFEBEAM G__TDIP_ACC_RUNCONTROL_SAFEBEAM;
static int G__libLHCfSC_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_SAFEBEAM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_SAFEBEAM*) (soff+(sizeof(DIP_ACC_RUNCONTROL_SAFEBEAM)*i)))->~G__TDIP_ACC_RUNCONTROL_SAFEBEAM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_SAFEBEAM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_SAFEBEAM*) (soff))->~G__TDIP_ACC_RUNCONTROL_SAFEBEAM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_SAFEBEAM* dest = (DIP_ACC_RUNCONTROL_SAFEBEAM*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_SAFEBEAM*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_SAFEBEAM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_RUNCONTROL_RUNCONFIGURATION */
// automatic default constructor
static int G__libLHCfSC_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_RUNCONFIGURATION *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_RUNCONFIGURATION[n];
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_RUNCONFIGURATION[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_RUNCONTROL_RUNCONFIGURATION;
     } else {
       p = new((void*) gvp) DIP_ACC_RUNCONTROL_RUNCONFIGURATION;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_RUNCONTROL_RUNCONFIGURATION* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_RUNCONTROL_RUNCONFIGURATION(*(DIP_ACC_RUNCONTROL_RUNCONFIGURATION*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_RUNCONTROL_RUNCONFIGURATION G__TDIP_ACC_RUNCONTROL_RUNCONFIGURATION;
static int G__libLHCfSC_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_RUNCONTROL_RUNCONFIGURATION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_RUNCONTROL_RUNCONFIGURATION*) (soff+(sizeof(DIP_ACC_RUNCONTROL_RUNCONFIGURATION)*i)))->~G__TDIP_ACC_RUNCONTROL_RUNCONFIGURATION();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_RUNCONTROL_RUNCONFIGURATION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_RUNCONTROL_RUNCONFIGURATION*) (soff))->~G__TDIP_ACC_RUNCONTROL_RUNCONFIGURATION();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_RUNCONTROL_RUNCONFIGURATION* dest = (DIP_ACC_RUNCONTROL_RUNCONFIGURATION*) G__getstructoffset();
   *dest = *(DIP_ACC_RUNCONTROL_RUNCONFIGURATION*) libp->para[0].ref;
   const DIP_ACC_RUNCONTROL_RUNCONFIGURATION& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_TIMING_POSTMORTEM */
// automatic default constructor
static int G__libLHCfSC_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_TIMING_POSTMORTEM *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_TIMING_POSTMORTEM[n];
     } else {
       p = new((void*) gvp) DIP_ACC_TIMING_POSTMORTEM[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_TIMING_POSTMORTEM;
     } else {
       p = new((void*) gvp) DIP_ACC_TIMING_POSTMORTEM;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_TIMING_POSTMORTEM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_TIMING_POSTMORTEM(*(DIP_ACC_TIMING_POSTMORTEM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_TIMING_POSTMORTEM G__TDIP_ACC_TIMING_POSTMORTEM;
static int G__libLHCfSC_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_TIMING_POSTMORTEM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_TIMING_POSTMORTEM*) (soff+(sizeof(DIP_ACC_TIMING_POSTMORTEM)*i)))->~G__TDIP_ACC_TIMING_POSTMORTEM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_TIMING_POSTMORTEM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_TIMING_POSTMORTEM*) (soff))->~G__TDIP_ACC_TIMING_POSTMORTEM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_TIMING_POSTMORTEM* dest = (DIP_ACC_TIMING_POSTMORTEM*) G__getstructoffset();
   *dest = *(DIP_ACC_TIMING_POSTMORTEM*) libp->para[0].ref;
   const DIP_ACC_TIMING_POSTMORTEM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_TIMING_RXCLOCKS */
// automatic default constructor
static int G__libLHCfSC_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_TIMING_RXCLOCKS *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_TIMING_RXCLOCKS[n];
     } else {
       p = new((void*) gvp) DIP_ACC_TIMING_RXCLOCKS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_TIMING_RXCLOCKS;
     } else {
       p = new((void*) gvp) DIP_ACC_TIMING_RXCLOCKS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_TIMING_RXCLOCKS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_TIMING_RXCLOCKS(*(DIP_ACC_TIMING_RXCLOCKS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_TIMING_RXCLOCKS G__TDIP_ACC_TIMING_RXCLOCKS;
static int G__libLHCfSC_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_TIMING_RXCLOCKS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_TIMING_RXCLOCKS*) (soff+(sizeof(DIP_ACC_TIMING_RXCLOCKS)*i)))->~G__TDIP_ACC_TIMING_RXCLOCKS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_TIMING_RXCLOCKS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_TIMING_RXCLOCKS*) (soff))->~G__TDIP_ACC_TIMING_RXCLOCKS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_TIMING_RXCLOCKS* dest = (DIP_ACC_TIMING_RXCLOCKS*) G__getstructoffset();
   *dest = *(DIP_ACC_TIMING_RXCLOCKS*) libp->para[0].ref;
   const DIP_ACC_TIMING_RXCLOCKS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_TIMING_RXFREV */
// automatic default constructor
static int G__libLHCfSC_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_TIMING_RXFREV *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_TIMING_RXFREV[n];
     } else {
       p = new((void*) gvp) DIP_ACC_TIMING_RXFREV[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_TIMING_RXFREV;
     } else {
       p = new((void*) gvp) DIP_ACC_TIMING_RXFREV;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_TIMING_RXFREV* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_TIMING_RXFREV(*(DIP_ACC_TIMING_RXFREV*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_TIMING_RXFREV G__TDIP_ACC_TIMING_RXFREV;
static int G__libLHCfSC_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_TIMING_RXFREV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_TIMING_RXFREV*) (soff+(sizeof(DIP_ACC_TIMING_RXFREV)*i)))->~G__TDIP_ACC_TIMING_RXFREV();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_TIMING_RXFREV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_TIMING_RXFREV*) (soff))->~G__TDIP_ACC_TIMING_RXFREV();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_TIMING_RXFREV* dest = (DIP_ACC_TIMING_RXFREV*) G__getstructoffset();
   *dest = *(DIP_ACC_TIMING_RXFREV*) libp->para[0].ref;
   const DIP_ACC_TIMING_RXFREV& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ACC_MACHINE_COLLPOSITION */
// automatic default constructor
static int G__libLHCfSC_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_MACHINE_COLLPOSITION *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_MACHINE_COLLPOSITION[n];
     } else {
       p = new((void*) gvp) DIP_ACC_MACHINE_COLLPOSITION[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ACC_MACHINE_COLLPOSITION;
     } else {
       p = new((void*) gvp) DIP_ACC_MACHINE_COLLPOSITION;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ACC_MACHINE_COLLPOSITION* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ACC_MACHINE_COLLPOSITION(*(DIP_ACC_MACHINE_COLLPOSITION*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ACC_MACHINE_COLLPOSITION G__TDIP_ACC_MACHINE_COLLPOSITION;
static int G__libLHCfSC_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ACC_MACHINE_COLLPOSITION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ACC_MACHINE_COLLPOSITION*) (soff+(sizeof(DIP_ACC_MACHINE_COLLPOSITION)*i)))->~G__TDIP_ACC_MACHINE_COLLPOSITION();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ACC_MACHINE_COLLPOSITION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ACC_MACHINE_COLLPOSITION*) (soff))->~G__TDIP_ACC_MACHINE_COLLPOSITION();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ACC_MACHINE_COLLPOSITION* dest = (DIP_ACC_MACHINE_COLLPOSITION*) G__getstructoffset();
   *dest = *(DIP_ACC_MACHINE_COLLPOSITION*) libp->para[0].ref;
   const DIP_ACC_MACHINE_COLLPOSITION& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ATLAS_CLOCK_SELECTION */
// automatic default constructor
static int G__libLHCfSC_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_CLOCK_SELECTION *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_CLOCK_SELECTION[n];
     } else {
       p = new((void*) gvp) DIP_ATLAS_CLOCK_SELECTION[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_CLOCK_SELECTION;
     } else {
       p = new((void*) gvp) DIP_ATLAS_CLOCK_SELECTION;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ATLAS_CLOCK_SELECTION* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ATLAS_CLOCK_SELECTION(*(DIP_ATLAS_CLOCK_SELECTION*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ATLAS_CLOCK_SELECTION G__TDIP_ATLAS_CLOCK_SELECTION;
static int G__libLHCfSC_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ATLAS_CLOCK_SELECTION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ATLAS_CLOCK_SELECTION*) (soff+(sizeof(DIP_ATLAS_CLOCK_SELECTION)*i)))->~G__TDIP_ATLAS_CLOCK_SELECTION();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ATLAS_CLOCK_SELECTION*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ATLAS_CLOCK_SELECTION*) (soff))->~G__TDIP_ATLAS_CLOCK_SELECTION();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_CLOCK_SELECTION* dest = (DIP_ATLAS_CLOCK_SELECTION*) G__getstructoffset();
   *dest = *(DIP_ATLAS_CLOCK_SELECTION*) libp->para[0].ref;
   const DIP_ATLAS_CLOCK_SELECTION& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ATLAS_FILLLUMI */
// automatic default constructor
static int G__libLHCfSC_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_FILLLUMI *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_FILLLUMI[n];
     } else {
       p = new((void*) gvp) DIP_ATLAS_FILLLUMI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_FILLLUMI;
     } else {
       p = new((void*) gvp) DIP_ATLAS_FILLLUMI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_233_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ATLAS_FILLLUMI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ATLAS_FILLLUMI(*(DIP_ATLAS_FILLLUMI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ATLAS_FILLLUMI G__TDIP_ATLAS_FILLLUMI;
static int G__libLHCfSC_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ATLAS_FILLLUMI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ATLAS_FILLLUMI*) (soff+(sizeof(DIP_ATLAS_FILLLUMI)*i)))->~G__TDIP_ATLAS_FILLLUMI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ATLAS_FILLLUMI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ATLAS_FILLLUMI*) (soff))->~G__TDIP_ATLAS_FILLLUMI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_FILLLUMI* dest = (DIP_ATLAS_FILLLUMI*) G__getstructoffset();
   *dest = *(DIP_ATLAS_FILLLUMI*) libp->para[0].ref;
   const DIP_ATLAS_FILLLUMI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ATLAS_LUMIPERBUNCH */
// automatic default constructor
static int G__libLHCfSC_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_LUMIPERBUNCH *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_LUMIPERBUNCH[n];
     } else {
       p = new((void*) gvp) DIP_ATLAS_LUMIPERBUNCH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_LUMIPERBUNCH;
     } else {
       p = new((void*) gvp) DIP_ATLAS_LUMIPERBUNCH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ATLAS_LUMIPERBUNCH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ATLAS_LUMIPERBUNCH(*(DIP_ATLAS_LUMIPERBUNCH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ATLAS_LUMIPERBUNCH G__TDIP_ATLAS_LUMIPERBUNCH;
static int G__libLHCfSC_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ATLAS_LUMIPERBUNCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ATLAS_LUMIPERBUNCH*) (soff+(sizeof(DIP_ATLAS_LUMIPERBUNCH)*i)))->~G__TDIP_ATLAS_LUMIPERBUNCH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ATLAS_LUMIPERBUNCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ATLAS_LUMIPERBUNCH*) (soff))->~G__TDIP_ATLAS_LUMIPERBUNCH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_LUMIPERBUNCH* dest = (DIP_ATLAS_LUMIPERBUNCH*) G__getstructoffset();
   *dest = *(DIP_ATLAS_LUMIPERBUNCH*) libp->para[0].ref;
   const DIP_ATLAS_LUMIPERBUNCH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_ATLAS_LUMINOSITY */
// automatic default constructor
static int G__libLHCfSC_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_LUMINOSITY *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_LUMINOSITY[n];
     } else {
       p = new((void*) gvp) DIP_ATLAS_LUMINOSITY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_ATLAS_LUMINOSITY;
     } else {
       p = new((void*) gvp) DIP_ATLAS_LUMINOSITY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_235_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_ATLAS_LUMINOSITY* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_ATLAS_LUMINOSITY(*(DIP_ATLAS_LUMINOSITY*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_ATLAS_LUMINOSITY G__TDIP_ATLAS_LUMINOSITY;
static int G__libLHCfSC_235_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_ATLAS_LUMINOSITY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_ATLAS_LUMINOSITY*) (soff+(sizeof(DIP_ATLAS_LUMINOSITY)*i)))->~G__TDIP_ATLAS_LUMINOSITY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_ATLAS_LUMINOSITY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_ATLAS_LUMINOSITY*) (soff))->~G__TDIP_ATLAS_LUMINOSITY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_235_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_ATLAS_LUMINOSITY* dest = (DIP_ATLAS_LUMINOSITY*) G__getstructoffset();
   *dest = *(DIP_ATLAS_LUMINOSITY*) libp->para[0].ref;
   const DIP_ATLAS_LUMINOSITY& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DIP_LHCF_DOSIMETER */
// automatic default constructor
static int G__libLHCfSC_236_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_DOSIMETER *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_DOSIMETER[n];
     } else {
       p = new((void*) gvp) DIP_LHCF_DOSIMETER[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DIP_LHCF_DOSIMETER;
     } else {
       p = new((void*) gvp) DIP_LHCF_DOSIMETER;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_236_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DIP_LHCF_DOSIMETER* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DIP_LHCF_DOSIMETER(*(DIP_LHCF_DOSIMETER*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DIP_LHCF_DOSIMETER G__TDIP_LHCF_DOSIMETER;
static int G__libLHCfSC_236_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DIP_LHCF_DOSIMETER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DIP_LHCF_DOSIMETER*) (soff+(sizeof(DIP_LHCF_DOSIMETER)*i)))->~G__TDIP_LHCF_DOSIMETER();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DIP_LHCF_DOSIMETER*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DIP_LHCF_DOSIMETER*) (soff))->~G__TDIP_LHCF_DOSIMETER();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_236_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DIP_LHCF_DOSIMETER* dest = (DIP_LHCF_DOSIMETER*) G__getstructoffset();
   *dest = *(DIP_LHCF_DOSIMETER*) libp->para[0].ref;
   const DIP_LHCF_DOSIMETER& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHCFDIPDATAH */
static int G__libLHCfSC_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFDIPDATAH* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFDIPDATAH[n];
     } else {
       p = new((void*) gvp) LHCFDIPDATAH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFDIPDATAH;
     } else {
       p = new((void*) gvp) LHCFDIPDATAH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((LHCFDIPDATAH*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFDIPDATAH*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFDIPDATAH*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCFDIPDATAH::GetClassType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFDIPDATAH::GetClassVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFDIPDATAH::GetClassSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAH*) G__getstructoffset())->CheckType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAH*) G__getstructoffset())->CheckVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_237_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAH*) G__getstructoffset())->CheckSize());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_237_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHCFDIPDATAH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHCFDIPDATAH(*(LHCFDIPDATAH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCFDIPDATAH G__TLHCFDIPDATAH;
static int G__libLHCfSC_237_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LHCFDIPDATAH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCFDIPDATAH*) (soff+(sizeof(LHCFDIPDATAH)*i)))->~G__TLHCFDIPDATAH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LHCFDIPDATAH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LHCFDIPDATAH*) (soff))->~G__TLHCFDIPDATAH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_237_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFDIPDATAH* dest = (LHCFDIPDATAH*) G__getstructoffset();
   *dest = *(LHCFDIPDATAH*) libp->para[0].ref;
   const LHCFDIPDATAH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHCFDIPDATAL */
static int G__libLHCfSC_238_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFDIPDATAL* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFDIPDATAL[n];
     } else {
       p = new((void*) gvp) LHCFDIPDATAL[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFDIPDATAL;
     } else {
       p = new((void*) gvp) LHCFDIPDATAL;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((LHCFDIPDATAL*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFDIPDATAL*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFDIPDATAL*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCFDIPDATAL::GetClassType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFDIPDATAL::GetClassVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFDIPDATAL::GetClassSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAL*) G__getstructoffset())->CheckType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAL*) G__getstructoffset())->CheckVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_238_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAL*) G__getstructoffset())->CheckSize());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_238_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHCFDIPDATAL* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHCFDIPDATAL(*(LHCFDIPDATAL*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCFDIPDATAL G__TLHCFDIPDATAL;
static int G__libLHCfSC_238_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LHCFDIPDATAL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCFDIPDATAL*) (soff+(sizeof(LHCFDIPDATAL)*i)))->~G__TLHCFDIPDATAL();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LHCFDIPDATAL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LHCFDIPDATAL*) (soff))->~G__TLHCFDIPDATAL();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_238_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFDIPDATAL* dest = (LHCFDIPDATAL*) G__getstructoffset();
   *dest = *(LHCFDIPDATAL*) libp->para[0].ref;
   const LHCFDIPDATAL& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHCFDIPDATAVH */
static int G__libLHCfSC_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFDIPDATAVH* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFDIPDATAVH[n];
     } else {
       p = new((void*) gvp) LHCFDIPDATAVH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCFDIPDATAVH;
     } else {
       p = new((void*) gvp) LHCFDIPDATAVH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((LHCFDIPDATAVH*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFDIPDATAVH*) G__getstructoffset())->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LHCFDIPDATAVH*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCFDIPDATAVH::GetClassType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFDIPDATAVH::GetClassVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCFDIPDATAVH::GetClassSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAVH*) G__getstructoffset())->CheckType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAVH*) G__getstructoffset())->CheckVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCFDIPDATAVH*) G__getstructoffset())->CheckSize());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHCFDIPDATAVH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHCFDIPDATAVH(*(LHCFDIPDATAVH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCFDIPDATAVH G__TLHCFDIPDATAVH;
static int G__libLHCfSC_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LHCFDIPDATAVH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCFDIPDATAVH*) (soff+(sizeof(LHCFDIPDATAVH)*i)))->~G__TLHCFDIPDATAVH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LHCFDIPDATAVH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LHCFDIPDATAVH*) (soff))->~G__TLHCFDIPDATAVH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCFDIPDATAVH* dest = (LHCFDIPDATAVH*) G__getstructoffset();
   *dest = *(LHCFDIPDATAVH*) libp->para[0].ref;
   const LHCFDIPDATAVH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLHCFDIPDATAH */
static int G__libLHCfSC_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAH* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFDIPDATAH[n];
     } else {
       p = new((void*) gvp) TLHCFDIPDATAH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFDIPDATAH;
     } else {
       p = new((void*) gvp) TLHCFDIPDATAH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAH* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TLHCFDIPDATAH((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TLHCFDIPDATAH((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TLHCFDIPDATAH*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAH*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAH*) G__getstructoffset())->DataClear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAH*) G__getstructoffset())->Add((TLHCFDIPDATAH*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAH*) G__getstructoffset())->Divide((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TLHCFDIPDATAH::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAH::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TLHCFDIPDATAH::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TLHCFDIPDATAH::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAH*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAH::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFDIPDATAH::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAH::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_240_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFDIPDATAH::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_240_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TLHCFDIPDATAH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TLHCFDIPDATAH(*(TLHCFDIPDATAH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLHCFDIPDATAH G__TTLHCFDIPDATAH;
static int G__libLHCfSC_240_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TLHCFDIPDATAH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TLHCFDIPDATAH*) (soff+(sizeof(TLHCFDIPDATAH)*i)))->~G__TTLHCFDIPDATAH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TLHCFDIPDATAH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TLHCFDIPDATAH*) (soff))->~G__TTLHCFDIPDATAH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_240_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAH* dest = (TLHCFDIPDATAH*) G__getstructoffset();
   *dest = *(TLHCFDIPDATAH*) libp->para[0].ref;
   const TLHCFDIPDATAH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLHCFDIPDATAL */
static int G__libLHCfSC_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAL* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFDIPDATAL[n];
     } else {
       p = new((void*) gvp) TLHCFDIPDATAL[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFDIPDATAL;
     } else {
       p = new((void*) gvp) TLHCFDIPDATAL;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAL* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TLHCFDIPDATAL((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TLHCFDIPDATAL((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TLHCFDIPDATAL*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAL*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAL*) G__getstructoffset())->DataClear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAL*) G__getstructoffset())->Add((TLHCFDIPDATAL*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAL*) G__getstructoffset())->Divide((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TLHCFDIPDATAL::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAL::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TLHCFDIPDATAL::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TLHCFDIPDATAL::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAL*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAL::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFDIPDATAL::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAL::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_241_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFDIPDATAL::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_241_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TLHCFDIPDATAL* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TLHCFDIPDATAL(*(TLHCFDIPDATAL*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLHCFDIPDATAL G__TTLHCFDIPDATAL;
static int G__libLHCfSC_241_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TLHCFDIPDATAL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TLHCFDIPDATAL*) (soff+(sizeof(TLHCFDIPDATAL)*i)))->~G__TTLHCFDIPDATAL();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TLHCFDIPDATAL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TLHCFDIPDATAL*) (soff))->~G__TTLHCFDIPDATAL();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_241_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAL* dest = (TLHCFDIPDATAL*) G__getstructoffset();
   *dest = *(TLHCFDIPDATAL*) libp->para[0].ref;
   const TLHCFDIPDATAL& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLHCFDIPDATAVH */
static int G__libLHCfSC_242_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAVH* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFDIPDATAVH[n];
     } else {
       p = new((void*) gvp) TLHCFDIPDATAVH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLHCFDIPDATAVH;
     } else {
       p = new((void*) gvp) TLHCFDIPDATAVH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAVH* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TLHCFDIPDATAVH((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TLHCFDIPDATAVH((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TLHCFDIPDATAVH*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAVH*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAVH*) G__getstructoffset())->DataClear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAVH*) G__getstructoffset())->Add((TLHCFDIPDATAVH*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAVH*) G__getstructoffset())->Divide((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TLHCFDIPDATAVH::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAVH::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TLHCFDIPDATAVH::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TLHCFDIPDATAVH::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLHCFDIPDATAVH*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAVH::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFDIPDATAVH::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLHCFDIPDATAVH::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_242_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLHCFDIPDATAVH::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_242_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TLHCFDIPDATAVH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TLHCFDIPDATAVH(*(TLHCFDIPDATAVH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLHCFDIPDATAVH G__TTLHCFDIPDATAVH;
static int G__libLHCfSC_242_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TLHCFDIPDATAVH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TLHCFDIPDATAVH*) (soff+(sizeof(TLHCFDIPDATAVH)*i)))->~G__TTLHCFDIPDATAVH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TLHCFDIPDATAVH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TLHCFDIPDATAVH*) (soff))->~G__TTLHCFDIPDATAVH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_242_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLHCFDIPDATAVH* dest = (TLHCFDIPDATAVH*) G__getstructoffset();
   *dest = *(TLHCFDIPDATAVH*) libp->para[0].ref;
   const TLHCFDIPDATAVH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SocketControl */
static int G__libLHCfSC_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SocketControl* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SocketControl[n];
     } else {
       p = new((void*) gvp) SocketControl[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SocketControl;
     } else {
       p = new((void*) gvp) SocketControl;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SocketControl* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SocketControl((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) SocketControl((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->Initialize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->SetServer((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->SetServer());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((SocketControl*) G__getstructoffset())->GetServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->GetSocketID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->Connect());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->DisConnect());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->ConnectionRefused());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SocketControl*) G__getstructoffset())->IsConnection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->CheckConnection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->GetBinaryData((LHCFSDATA*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->GetBinaryDataDipH((LHCFDIPDATAH*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->GetBinaryDataDipL((LHCFDIPDATAL*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->GetBinaryDataDipVH((LHCFDIPDATAVH*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->SendCommand((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->SendCommand((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->SendCommand((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->SendCommand((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->SendProcedure((const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SocketControl*) G__getstructoffset())->IsConnect());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->Lock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->UnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__libLHCfSC_243_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SocketControl*) G__getstructoffset())->IsLock());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__libLHCfSC_243_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SocketControl* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SocketControl(*(SocketControl*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SocketControl G__TSocketControl;
static int G__libLHCfSC_243_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SocketControl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SocketControl*) (soff+(sizeof(SocketControl)*i)))->~G__TSocketControl();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SocketControl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SocketControl*) (soff))->~G__TSocketControl();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__libLHCfSC_243_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SocketControl* dest = (SocketControl*) G__getstructoffset();
   *dest = *(SocketControl*) libp->para[0].ref;
   const SocketControl& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* LHCFSDATA_HEADER */

/* CPWS_CH */

/* CPWS1_DATA */

/* CPWS2_DATA */

/* AGILENT_CH */

/* AGILENT_MOD */

/* AGILENT_DATA */

/* TRHX_DATA */

/* ENCODER_DATA */

/* ADC_DATA */

/* LHCFSDATA */

/* TLHCFSDATA */

/* DIP_LHCF_Arm */

/* DIP_LHCF_COINCIDENCE */

/* DIP_LHCF_EXPTSTATUS */

/* DIP_LHCF_INTERLOCK */

/* DIP_LHCF_LUMINOSITY */

/* DIP_LHCF_HS_LHC_INJECTION */

/* DIP_LHCF_HS_LHC_ADJUST */

/* DIP_LHCF_HS_LHC_BEAMDUMP */

/* DIP_ACC_BEAM_BPM */

/* DIP_ACC_BEAM_BPM_M */

/* DIP_ACC_BEAM_ENERGY */

/* DIP_ACC_BEAM_INTENSITY */

/* DIP_ACC_BEAM_INTENSITYPERBUNCH */

/* DIP_ACC_BEAM_INTENSITYPERBUNCH_S */

/* DIP_ACC_BEAM_LUMINOSITYAVERAGE */

/* DIP_ACC_BEAM_LUMINOSITYPERBUNCH */

/* DIP_ACC_BEAM_LUMINOSITYSCAN */

/* DIP_ACC_BEAM_SIZE */

/* DIP_ACC_BEAM_SIZE_AVERAGE */

/* DIP_ACC_BEAM_WIRESCANNER */

/* DIP_ACC_BEAM_BETASTAR */

/* DIP_ACC_HS_LHC_INJECTION */

/* DIP_ACC_HS_LHC_ADJUST */

/* DIP_ACC_HS_LHC_BEAMDUMP */

/* DIP_ACC_RUNCONTROL_BEAMMODE */

/* DIP_ACC_RUNCONTROL_BUNCHCONFIG */

/* DIP_ACC_RUNCONTROL_FILLNUMBER */

/* DIP_ACC_RUNCONTROL_FILLSCHEMA */

/* DIP_ACC_RUNCONTROL_MACHINEMODE */

/* DIP_ACC_RUNCONTROL_PAGE */

/* DIP_ACC_RUNCONTROL_SAFEBEAM */

/* DIP_ACC_RUNCONTROL_RUNCONFIGURATION */

/* DIP_ACC_TIMING_POSTMORTEM */

/* DIP_ACC_TIMING_RXCLOCKS */

/* DIP_ACC_TIMING_RXFREV */

/* DIP_ACC_MACHINE_COLLPOSITION */

/* DIP_ATLAS_CLOCK_SELECTION */

/* DIP_ATLAS_FILLLUMI */

/* DIP_ATLAS_LUMIPERBUNCH */

/* DIP_ATLAS_LUMINOSITY */

/* DIP_LHCF_DOSIMETER */

/* LHCFDIPDATAH */

/* LHCFDIPDATAL */

/* LHCFDIPDATAVH */

/* TLHCFDIPDATAH */

/* TLHCFDIPDATAL */

/* TLHCFDIPDATAVH */

/* SocketControl */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunclibLHCfSC {
 public:
  G__Sizep2memfunclibLHCfSC(): p(&G__Sizep2memfunclibLHCfSC::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunclibLHCfSC::*p)();
};

size_t G__get_sizep2memfunclibLHCfSC()
{
  G__Sizep2memfunclibLHCfSC a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancelibLHCfSC() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA))) {
     TLHCFSDATA *G__Lderived;
     G__Lderived=(TLHCFSDATA*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA),G__get_linked_tagnum(&G__libLHCfSCLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA),G__get_linked_tagnum(&G__libLHCfSCLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH))) {
     TLHCFDIPDATAH *G__Lderived;
     G__Lderived=(TLHCFDIPDATAH*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH),G__get_linked_tagnum(&G__libLHCfSCLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH),G__get_linked_tagnum(&G__libLHCfSCLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL))) {
     TLHCFDIPDATAL *G__Lderived;
     G__Lderived=(TLHCFDIPDATAL*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL),G__get_linked_tagnum(&G__libLHCfSCLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL),G__get_linked_tagnum(&G__libLHCfSCLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH))) {
     TLHCFDIPDATAVH *G__Lderived;
     G__Lderived=(TLHCFDIPDATAVH*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH),G__get_linked_tagnum(&G__libLHCfSCLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH),G__get_linked_tagnum(&G__libLHCfSCLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablelibLHCfSC() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__libLHCfSCLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libLHCfSCLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libLHCfSCLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libLHCfSCLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libLHCfSCLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__libLHCfSCLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__libLHCfSCLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libLHCfSCLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__libLHCfSCLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__libLHCfSCLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("GSTATUS",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* LHCFSDATA_HEADER */
static void G__setup_memvarLHCFSDATA_HEADER(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER));
   { LHCFSDATA_HEADER *p; p=(LHCFSDATA_HEADER*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->headerword)-(long)(p)),98,0,0,-1,-1,-1,1,"headerword[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->word)-(long)(p)),99,0,0,-1,-1,-1,1,"word[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->version)-(long)(p)),105,0,0,-1,-1,-1,1,"version=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->size)-(long)(p)),105,0,0,-1,-1,-1,1,"size=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CPWS_CH */
static void G__setup_memvarCPWS_CH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH));
   { CPWS_CH *p; p=(CPWS_CH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->vmon)-(long)(p)),102,0,0,-1,-1,-1,1,"vmon=",0,"Voltage  [Volt]");
   G__memvar_setup((void*)((long)(&p->imon)-(long)(p)),102,0,0,-1,-1,-1,1,"imon=",0,"Current. The unit depend on the power supply board.");
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,-1,-1,1,"status=",0,"Status flag, bit field");
   }
   G__tag_memvar_reset();
}


   /* CPWS1_DATA */
static void G__setup_memvarCPWS1_DATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA));
   { CPWS1_DATA *p; p=(CPWS1_DATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slot0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot0[12]=",0,"[A1833] H.V. board (12 ch)   for 20mm-(ch 00->11) ");
   G__memvar_setup((void*)((long)(&p->slot1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot1[12]=",0,"[A1833] H.V. board.          for 20mm-(ch 12->15) and 40mm-(ch 00->07) ");
   G__memvar_setup((void*)((long)(&p->slot2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot2[12]=",0,"[A1833] H.V. board.          for 40mm-(ch 08->15) ");
   G__memvar_setup((void*)((long)(&p->slot3)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot3[6]=",0,"[A1513B] L.V. board. for ???");
   G__memvar_setup((void*)((long)(&p->slot5)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot5[6]=",0,"[A1513B] L.V. board. for ???");
   G__memvar_setup((void*)((long)(&p->temperature)-(long)(p)),102,0,0,-1,-1,-1,1,"temperature[6]=",0,"Temperateure of each board. [degrees centigrage]");
   }
   G__tag_memvar_reset();
}


   /* CPWS2_DATA */
static void G__setup_memvarCPWS2_DATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA));
   { CPWS2_DATA *p; p=(CPWS2_DATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slot0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot0[12]=",0,"[A1833] H.V. board. for 25mm-12,... 25mm-07 ");
   G__memvar_setup((void*)((long)(&p->slot1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot1[12]=",0,"[A1833] H.V. board. for 25mm-12,... 32mm-07");
   G__memvar_setup((void*)((long)(&p->slot2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot2[12]=",0,"[A1833] H.V. board. for 32mm-08,... 32mm-15 and laser monitor ");
   G__memvar_setup((void*)((long)(&p->slot3)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot3[12]=",0,"[??????] H.V. board. for Silicon");
   G__memvar_setup((void*)((long)(&p->slot4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH),-1,-1,1,"slot4[6]=",0,"[A1513B] L.V. board. for F.C. and Manipulator");
   G__memvar_setup((void*)((long)(&p->temperature)-(long)(p)),102,0,0,-1,-1,-1,1,"temperature[6]=",0,"Temperateure of each board. [degrees centigrage]");
   }
   G__tag_memvar_reset();
}


   /* AGILENT_CH */
static void G__setup_memvarAGILENT_CH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH));
   { AGILENT_CH *p; p=(AGILENT_CH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,"(MSB) \"5b Operation Status\" + \"16b Questionable Status\" (LSB)");
   G__memvar_setup((void*)((long)(&p->vmon)-(long)(p)),102,0,0,-1,-1,-1,1,"vmon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->imon)-(long)(p)),102,0,0,-1,-1,-1,1,"imon=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AGILENT_MOD */
static void G__setup_memvarAGILENT_MOD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD));
   { AGILENT_MOD *p; p=(AGILENT_MOD*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,"(MSB) \"1bit ON/OFF\" + \"8bit Std ev Status\" + \"8bit Status byte\" (LSB)");
   G__memvar_setup((void*)((long)(&p->ch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH),-1,-1,1,"ch[4]=",0,"single ch of LV Power Supplies for Arm2 Silicon System");
   }
   G__tag_memvar_reset();
}


   /* AGILENT_DATA */
static void G__setup_memvarAGILENT_DATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA));
   { AGILENT_DATA *p; p=(AGILENT_DATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,"bits: (MSB) 4_unused + 4_warning + 4_err + 4_on/off (LSB)");
   G__memvar_setup((void*)((long)(&p->mod)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD),-1,-1,1,"mod[4]=",0,"LV Power Supplies for Arm2 Silicon System");
   }
   G__tag_memvar_reset();
}


   /* TRHX_DATA */
static void G__setup_memvarTRHX_DATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA));
   { TRHX_DATA *p; p=(TRHX_DATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->temp)-(long)(p)),102,0,0,-1,-1,-1,1,"temp[12]=",0,"temperature sensors on Arm2 detector");
   }
   G__tag_memvar_reset();
}


   /* ENCODER_DATA */
static void G__setup_memvarENCODER_DATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA));
   { ENCODER_DATA *p; p=(ENCODER_DATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->encoder1)-(long)(p)),102,0,0,-1,-1,-1,1,"encoder1=",0,"read posistion of Arm1 manipulator");
   G__memvar_setup((void*)((long)(&p->encoder2)-(long)(p)),102,0,0,-1,-1,-1,1,"encoder2=",0,"read posistion of Arm2 manipulator");
   }
   G__tag_memvar_reset();
}


   /* ADC_DATA */
static void G__setup_memvarADC_DATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA));
   { ADC_DATA *p; p=(ADC_DATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->adc)-(long)(p)),114,0,0,-1,-1,-1,1,"adc[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vol)-(long)(p)),102,0,0,-1,-1,-1,1,"vol[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cal)-(long)(p)),102,0,0,-1,-1,-1,1,"cal[16]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LHCFSDATA */
static void G__setup_memvarLHCFSDATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA));
   { LHCFSDATA *p; p=(LHCFSDATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->header)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER),-1,-1,1,"header=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),104,0,0,-1,-1,-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cpws1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA),-1,-1,1,"cpws1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cpws2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA),-1,-1,1,"cpws2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ag)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA),-1,-1,1,"ag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trhx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA),-1,-1,1,"trhx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->encoder)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA),-1,-1,1,"encoder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->adc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA),-1,-1,1,"adc=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLHCFSDATA */
static void G__setup_memvarTLHCFSDATA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA));
   { TLHCFSDATA *p; p=(TLHCFSDATA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_Arm */
static void G__setup_memvarDIP_LHCF_Arm(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm));
   { DIP_LHCF_Arm *p; p=(DIP_LHCF_Arm*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->STATUS)-(long)(p)),99,0,0,-1,-1,-1,1,"STATUS[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FC_STATUS)-(long)(p)),99,0,0,-1,-1,-1,1,"FC_STATUS[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->POSITION_STR)-(long)(p)),99,0,0,-1,-1,-1,1,"POSITION_STR[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RUNNUMBER)-(long)(p)),105,0,0,-1,-1,-1,1,"RUNNUMBER=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->POSITION_DBL)-(long)(p)),100,0,0,-1,-1,-1,1,"POSITION_DBL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FC_RATE)-(long)(p)),100,0,0,-1,-1,-1,1,"FC_RATE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SHOWER0)-(long)(p)),100,0,0,-1,-1,-1,1,"SHOWER0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SHOWER1)-(long)(p)),100,0,0,-1,-1,-1,1,"SHOWER1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BEAM_POS0_H)-(long)(p)),100,0,0,-1,-1,-1,1,"BEAM_POS0_H=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BEAM_POS0_V)-(long)(p)),100,0,0,-1,-1,-1,1,"BEAM_POS0_V=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BEAM_POS1_H)-(long)(p)),100,0,0,-1,-1,-1,1,"BEAM_POS1_H=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BEAM_POS1_V)-(long)(p)),100,0,0,-1,-1,-1,1,"BEAM_POS1_V=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_COINCIDENCE */
static void G__setup_memvarDIP_LHCF_COINCIDENCE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE));
   { DIP_LHCF_COINCIDENCE *p; p=(DIP_LHCF_COINCIDENCE*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->STATUS)-(long)(p)),99,0,0,-1,-1,-1,1,"STATUS[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FC1_FC2_RATE)-(long)(p)),100,0,0,-1,-1,-1,1,"FC1_FC2_RATE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SHOWER1_SHOWER2_RATE)-(long)(p)),100,0,0,-1,-1,-1,1,"SHOWER1_SHOWER2_RATE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FC2_SHOWER1_RATE)-(long)(p)),100,0,0,-1,-1,-1,1,"FC2_SHOWER1_RATE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FC1_SHOWER2_RATE)-(long)(p)),100,0,0,-1,-1,-1,1,"FC1_SHOWER2_RATE=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_EXPTSTATUS */
static void G__setup_memvarDIP_LHCF_EXPTSTATUS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS));
   { DIP_LHCF_EXPTSTATUS *p; p=(DIP_LHCF_EXPTSTATUS*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Status)-(long)(p)),99,0,0,-1,-1,-1,1,"Status[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_INTERLOCK */
static void G__setup_memvarDIP_LHCF_INTERLOCK(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK));
   { DIP_LHCF_INTERLOCK *p; p=(DIP_LHCF_INTERLOCK*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beam_injection_accept)-(long)(p)),105,0,0,-1,-1,-1,1,"beam_injection_accept=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_LUMINOSITY */
static void G__setup_memvarDIP_LHCF_LUMINOSITY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY));
   { DIP_LHCF_LUMINOSITY *p; p=(DIP_LHCF_LUMINOSITY*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Lumi_TotInst)-(long)(p)),102,0,0,-1,-1,-1,1,"Lumi_TotInst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Source)-(long)(p)),99,0,0,-1,-1,-1,1,"Source[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_HS_LHC_INJECTION */
static void G__setup_memvarDIP_LHCF_HS_LHC_INJECTION(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION));
   { DIP_LHCF_HS_LHC_INJECTION *p; p=(DIP_LHCF_HS_LHC_INJECTION*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DIP_DEFAULT)-(long)(p)),99,0,0,-1,-1,-1,1,"DIP_DEFAULT[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_HS_LHC_ADJUST */
static void G__setup_memvarDIP_LHCF_HS_LHC_ADJUST(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST));
   { DIP_LHCF_HS_LHC_ADJUST *p; p=(DIP_LHCF_HS_LHC_ADJUST*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DIP_DEFAULT)-(long)(p)),99,0,0,-1,-1,-1,1,"DIP_DEFAULT[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_HS_LHC_BEAMDUMP */
static void G__setup_memvarDIP_LHCF_HS_LHC_BEAMDUMP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP));
   { DIP_LHCF_HS_LHC_BEAMDUMP *p; p=(DIP_LHCF_HS_LHC_BEAMDUMP*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DIP_DEFAULT)-(long)(p)),99,0,0,-1,-1,-1,1,"DIP_DEFAULT[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_BPM */
static void G__setup_memvarDIP_ACC_BEAM_BPM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM));
   { DIP_ACC_BEAM_BPM *p; p=(DIP_ACC_BEAM_BPM*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->verticalPos)-(long)(p)),100,0,0,-1,-1,-1,1,"verticalPos[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->horizontalPos)-(long)(p)),100,0,0,-1,-1,-1,1,"horizontalPos[4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_BPM_M */
static void G__setup_memvarDIP_ACC_BEAM_BPM_M(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M));
   { DIP_ACC_BEAM_BPM_M *p; p=(DIP_ACC_BEAM_BPM_M*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bpmNames)-(long)(p)),99,0,0,-1,-1,-1,1,"bpmNames[8][24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->statusV)-(long)(p)),105,0,0,-1,-1,-1,1,"statusV[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->statusH)-(long)(p)),105,0,0,-1,-1,-1,1,"statusH[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errorV)-(long)(p)),100,0,0,-1,-1,-1,1,"errorV[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errorH)-(long)(p)),100,0,0,-1,-1,-1,1,"errorH[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->verticalPos)-(long)(p)),100,0,0,-1,-1,-1,1,"verticalPos[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->horizontalPos)-(long)(p)),100,0,0,-1,-1,-1,1,"horizontalPos[8]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_ENERGY */
static void G__setup_memvarDIP_ACC_BEAM_ENERGY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY));
   { DIP_ACC_BEAM_ENERGY *p; p=(DIP_ACC_BEAM_ENERGY*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->payload)-(long)(p)),105,0,0,-1,-1,-1,1,"payload=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,"for machines with 64 bit CPU");
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_INTENSITY */
static void G__setup_memvarDIP_ACC_BEAM_INTENSITY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY));
   { DIP_ACC_BEAM_INTENSITY *p; p=(DIP_ACC_BEAM_INTENSITY*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totalIntensity)-(long)(p)),100,0,0,-1,-1,-1,1,"totalIntensity=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_INTENSITYPERBUNCH */
static void G__setup_memvarDIP_ACC_BEAM_INTENSITYPERBUNCH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH));
   { DIP_ACC_BEAM_INTENSITYPERBUNCH *p; p=(DIP_ACC_BEAM_INTENSITYPERBUNCH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->averageBunchIntensities)-(long)(p)),102,0,0,-1,-1,-1,1,"averageBunchIntensities[3564]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wholeBeamIntensity)-(long)(p)),100,0,0,-1,-1,-1,1,"wholeBeamIntensity=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_INTENSITYPERBUNCH_S */
static void G__setup_memvarDIP_ACC_BEAM_INTENSITYPERBUNCH_S(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S));
   { DIP_ACC_BEAM_INTENSITYPERBUNCH_S *p; p=(DIP_ACC_BEAM_INTENSITYPERBUNCH_S*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->filledbunches)-(long)(p)),105,0,0,-1,-1,-1,1,"filledbunches[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->averageBunchIntensities)-(long)(p)),102,0,0,-1,-1,-1,1,"averageBunchIntensities[500]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_LUMINOSITYAVERAGE */
static void G__setup_memvarDIP_ACC_BEAM_LUMINOSITYAVERAGE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE));
   { DIP_ACC_BEAM_LUMINOSITYAVERAGE *p; p=(DIP_ACC_BEAM_LUMINOSITYAVERAGE*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqMode)-(long)(p)),105,0,0,-1,-1,-1,1,"acqMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->meanLuminosity)-(long)(p)),100,0,0,-1,-1,-1,1,"meanLuminosity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->meanCrossingAngle)-(long)(p)),100,0,0,-1,-1,-1,1,"meanCrossingAngle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->meanLuminosityError)-(long)(p)),100,0,0,-1,-1,-1,1,"meanLuminosityError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->meanCrossingAngleError)-(long)(p)),100,0,0,-1,-1,-1,1,"meanCrossingAngleError=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_LUMINOSITYPERBUNCH */
static void G__setup_memvarDIP_ACC_BEAM_LUMINOSITYPERBUNCH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH));
   { DIP_ACC_BEAM_LUMINOSITYPERBUNCH *p; p=(DIP_ACC_BEAM_LUMINOSITYPERBUNCH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqMode)-(long)(p)),105,0,0,-1,-1,-1,1,"acqMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bunchByBunchLuminosity)-(long)(p)),100,0,0,-1,-1,-1,1,"bunchByBunchLuminosity[3564]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_LUMINOSITYSCAN */
static void G__setup_memvarDIP_ACC_BEAM_LUMINOSITYSCAN(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN));
   { DIP_ACC_BEAM_LUMINOSITYSCAN *p; p=(DIP_ACC_BEAM_LUMINOSITYSCAN*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LumiScan_Status)-(long)(p)),99,0,0,-1,-1,-1,1,"LumiScan_Status[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Acquisition_Flag)-(long)(p)),103,0,0,-1,-1,-1,1,"Acquisition_Flag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Plane)-(long)(p)),99,0,0,-1,-1,-1,1,"Plane[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP)-(long)(p)),105,0,0,-1,-1,-1,1,"IP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam)-(long)(p)),105,0,0,-1,-1,-1,1,"Beam=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Step_Progress)-(long)(p)),100,0,0,-1,-1,-1,1,"Step_Progress=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Nominal_Separation)-(long)(p)),100,0,0,-1,-1,-1,1,"Nominal_Separation=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_SIZE */
static void G__setup_memvarDIP_ACC_BEAM_SIZE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE));
   { DIP_ACC_BEAM_SIZE *p; p=(DIP_ACC_BEAM_SIZE*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqTime)-(long)(p)),99,0,0,-1,-1,-1,1,"acqTime[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cycleName)-(long)(p)),99,0,0,-1,-1,-1,1,"cycleName[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->positionSet1)-(long)(p)),100,0,0,-1,-1,-1,1,"positionSet1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->positionSet2)-(long)(p)),100,0,0,-1,-1,-1,1,"positionSet2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqCounter)-(long)(p)),105,0,0,-1,-1,-1,1,"acqCounter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqState)-(long)(p)),105,0,0,-1,-1,-1,1,"acqState=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nbDataSets)-(long)(p)),105,0,0,-1,-1,-1,1,"nbDataSets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->planeSet1)-(long)(p)),105,0,0,-1,-1,-1,1,"planeSet1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->planeSet2)-(long)(p)),105,0,0,-1,-1,-1,1,"planeSet2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaSet1)-(long)(p)),100,0,0,-1,-1,-1,1,"sigmaSet1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaSet2)-(long)(p)),100,0,0,-1,-1,-1,1,"sigmaSet2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deviceName)-(long)(p)),99,0,0,-1,-1,-1,1,"deviceName[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cycleTime)-(long)(p)),99,0,0,-1,-1,-1,1,"cycleTime[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqMsg)-(long)(p)),99,0,0,-1,-1,-1,1,"acqMsg[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->amplitudeSet2)-(long)(p)),100,0,0,-1,-1,-1,1,"amplitudeSet2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->amplitudeSet1)-(long)(p)),100,0,0,-1,-1,-1,1,"amplitudeSet1=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_SIZE_AVERAGE */
static void G__setup_memvarDIP_ACC_BEAM_SIZE_AVERAGE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE));
   { DIP_ACC_BEAM_SIZE_AVERAGE *p; p=(DIP_ACC_BEAM_SIZE_AVERAGE*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaH)-(long)(p)),100,0,0,-1,-1,-1,1,"sigmaH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaV)-(long)(p)),100,0,0,-1,-1,-1,1,"sigmaV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emittanceH)-(long)(p)),100,0,0,-1,-1,-1,1,"emittanceH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->emittanceV)-(long)(p)),100,0,0,-1,-1,-1,1,"emittanceV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errorSigmaH)-(long)(p)),100,0,0,-1,-1,-1,1,"errorSigmaH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errorSigmaV)-(long)(p)),100,0,0,-1,-1,-1,1,"errorSigmaV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqMode)-(long)(p)),105,0,0,-1,-1,-1,1,"acqMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,"Added at 23 Mar. 2010");
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_WIRESCANNER */
static void G__setup_memvarDIP_ACC_BEAM_WIRESCANNER(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER));
   { DIP_ACC_BEAM_WIRESCANNER *p; p=(DIP_ACC_BEAM_WIRESCANNER*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acqMode)-(long)(p)),105,0,0,-1,-1,-1,1,"acqMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,"for machines with 64 bit CPU");
   G__memvar_setup((void*)((long)(&p->SIGMA_OUT)-(long)(p)),100,0,0,-1,-1,-1,1,"SIGMA_OUT[3564]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SIGMA_IN)-(long)(p)),100,0,0,-1,-1,-1,1,"SIGMA_IN[3564]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_BEAM_BETASTAR */
static void G__setup_memvarDIP_ACC_BEAM_BETASTAR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR));
   { DIP_ACC_BEAM_BETASTAR *p; p=(DIP_ACC_BEAM_BETASTAR*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->payload)-(long)(p)),105,0,0,-1,-1,-1,1,"payload=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,"for machines with 64 bit CPU");
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_HS_LHC_INJECTION */
static void G__setup_memvarDIP_ACC_HS_LHC_INJECTION(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION));
   { DIP_ACC_HS_LHC_INJECTION *p; p=(DIP_ACC_HS_LHC_INJECTION*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),99,0,0,-1,-1,-1,1,"value[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_HS_LHC_ADJUST */
static void G__setup_memvarDIP_ACC_HS_LHC_ADJUST(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST));
   { DIP_ACC_HS_LHC_ADJUST *p; p=(DIP_ACC_HS_LHC_ADJUST*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),99,0,0,-1,-1,-1,1,"value[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_HS_LHC_BEAMDUMP */
static void G__setup_memvarDIP_ACC_HS_LHC_BEAMDUMP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP));
   { DIP_ACC_HS_LHC_BEAMDUMP *p; p=(DIP_ACC_HS_LHC_BEAMDUMP*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),99,0,0,-1,-1,-1,1,"value[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_BEAMMODE */
static void G__setup_memvarDIP_ACC_RUNCONTROL_BEAMMODE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE));
   { DIP_ACC_RUNCONTROL_BEAMMODE *p; p=(DIP_ACC_RUNCONTROL_BEAMMODE*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),99,0,0,-1,-1,-1,1,"value[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_BUNCHCONFIG */
static void G__setup_memvarDIP_ACC_RUNCONTROL_BUNCHCONFIG(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG));
   { DIP_ACC_RUNCONTROL_BUNCHCONFIG *p; p=(DIP_ACC_RUNCONTROL_BUNCHCONFIG*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),105,0,0,-1,-1,-1,1,"value[2808]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_FILLNUMBER */
static void G__setup_memvarDIP_ACC_RUNCONTROL_FILLNUMBER(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER));
   { DIP_ACC_RUNCONTROL_FILLNUMBER *p; p=(DIP_ACC_RUNCONTROL_FILLNUMBER*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),105,0,0,-1,-1,-1,1,"value=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_FILLSCHEMA */
static void G__setup_memvarDIP_ACC_RUNCONTROL_FILLSCHEMA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA));
   { DIP_ACC_RUNCONTROL_FILLSCHEMA *p; p=(DIP_ACC_RUNCONTROL_FILLSCHEMA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),105,0,0,-1,-1,-1,1,"value=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_MACHINEMODE */
static void G__setup_memvarDIP_ACC_RUNCONTROL_MACHINEMODE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE));
   { DIP_ACC_RUNCONTROL_MACHINEMODE *p; p=(DIP_ACC_RUNCONTROL_MACHINEMODE*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),99,0,0,-1,-1,-1,1,"value[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_PAGE */
static void G__setup_memvarDIP_ACC_RUNCONTROL_PAGE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE));
   { DIP_ACC_RUNCONTROL_PAGE *p; p=(DIP_ACC_RUNCONTROL_PAGE*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),99,0,0,-1,-1,-1,1,"value[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_SAFEBEAM */
static void G__setup_memvarDIP_ACC_RUNCONTROL_SAFEBEAM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM));
   { DIP_ACC_RUNCONTROL_SAFEBEAM *p; p=(DIP_ACC_RUNCONTROL_SAFEBEAM*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->payload)-(long)(p)),105,0,0,-1,-1,-1,1,"payload=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_RUNCONTROL_RUNCONFIGURATION */
static void G__setup_memvarDIP_ACC_RUNCONTROL_RUNCONFIGURATION(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION));
   { DIP_ACC_RUNCONTROL_RUNCONFIGURATION *p; p=(DIP_ACC_RUNCONTROL_RUNCONFIGURATION*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FILL_NO)-(long)(p)),99,0,0,-1,-1,-1,1,"FILL_NO[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_ENERGY)-(long)(p)),99,0,0,-1,-1,-1,1,"TARGET_ENERGY[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PARTICLE_TYPE_B1)-(long)(p)),99,0,0,-1,-1,-1,1,"PARTICLE_TYPE_B1[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PARTICLE_TYPE_B2)-(long)(p)),99,0,0,-1,-1,-1,1,"PARTICLE_TYPE_B2[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ACTIVE_INJECTION_SCHEME)-(long)(p)),99,0,0,-1,-1,-1,1,"ACTIVE_INJECTION_SCHEME[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP1_XING_V_MURAD)-(long)(p)),99,0,0,-1,-1,-1,1,"IP1_XING_V_MURAD[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP1_NO_COLLISIONS)-(long)(p)),99,0,0,-1,-1,-1,1,"IP1_NO_COLLISIONS[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP2_XING_V_MURAD)-(long)(p)),99,0,0,-1,-1,-1,1,"IP2_XING_V_MURAD[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP2_ALICE_V_MURAD)-(long)(p)),99,0,0,-1,-1,-1,1,"IP2_ALICE_V_MURAD[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP2_NO_COLLISIONS)-(long)(p)),99,0,0,-1,-1,-1,1,"IP2_NO_COLLISIONS[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP5_XING_H_MURAD)-(long)(p)),99,0,0,-1,-1,-1,1,"IP5_XING_H_MURAD[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP5_NO_COLLISIONS)-(long)(p)),99,0,0,-1,-1,-1,1,"IP5_NO_COLLISIONS[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP8_XING_H_MURAD)-(long)(p)),99,0,0,-1,-1,-1,1,"IP8_XING_H_MURAD[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP8_LHCB_H_MURAD)-(long)(p)),99,0,0,-1,-1,-1,1,"IP8_LHCB_H_MURAD[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IP8_NO_COLLISIONS)-(long)(p)),99,0,0,-1,-1,-1,1,"IP8_NO_COLLISIONS[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NO_BUNCHES)-(long)(p)),99,0,0,-1,-1,-1,1,"NO_BUNCHES[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_TIMING_POSTMORTEM */
static void G__setup_memvarDIP_ACC_TIMING_POSTMORTEM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM));
   { DIP_ACC_TIMING_POSTMORTEM *p; p=(DIP_ACC_TIMING_POSTMORTEM*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->oCounter)-(long)(p)),110,0,0,-1,G__defined_typename("LongLong"),-1,1,"oCounter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->payload)-(long)(p)),105,0,0,-1,-1,-1,1,"payload=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_TIMING_RXCLOCKS */
static void G__setup_memvarDIP_ACC_TIMING_RXCLOCKS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS));
   { DIP_ACC_TIMING_RXCLOCKS *p; p=(DIP_ACC_TIMING_RXCLOCKS*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->F40_B1)-(long)(p)),102,0,0,-1,-1,-1,1,"F40_B1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->F40_B2)-(long)(p)),102,0,0,-1,-1,-1,1,"F40_B2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->F40_REF)-(long)(p)),102,0,0,-1,-1,-1,1,"F40_REF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_TIMING_RXFREV */
static void G__setup_memvarDIP_ACC_TIMING_RXFREV(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV));
   { DIP_ACC_TIMING_RXFREV *p; p=(DIP_ACC_TIMING_RXFREV*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FREV_B1)-(long)(p)),102,0,0,-1,-1,-1,1,"FREV_B1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FREV_B2)-(long)(p)),102,0,0,-1,-1,-1,1,"FREV_B2=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ACC_MACHINE_COLLPOSITION */
static void G__setup_memvarDIP_ACC_MACHINE_COLLPOSITION(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION));
   { DIP_ACC_MACHINE_COLLPOSITION *p; p=(DIP_ACC_MACHINE_COLLPOSITION*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lvdt_right_downstream)-(long)(p)),100,0,0,-1,-1,-1,1,"lvdt_right_downstream=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lvdt_gap_upstream)-(long)(p)),100,0,0,-1,-1,-1,1,"lvdt_gap_upstream=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lvdt_left_downstream)-(long)(p)),100,0,0,-1,-1,-1,1,"lvdt_left_downstream=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lvdt_gap_downstream)-(long)(p)),100,0,0,-1,-1,-1,1,"lvdt_gap_downstream=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lvdt_left_upstream)-(long)(p)),100,0,0,-1,-1,-1,1,"lvdt_left_upstream=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lvdt_right_upstream)-(long)(p)),100,0,0,-1,-1,-1,1,"lvdt_right_upstream=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ATLAS_CLOCK_SELECTION */
static void G__setup_memvarDIP_ATLAS_CLOCK_SELECTION(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION));
   { DIP_ATLAS_CLOCK_SELECTION *p; p=(DIP_ATLAS_CLOCK_SELECTION*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ORBIT)-(long)(p)),99,0,0,-1,-1,-1,1,"ORBIT[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BC)-(long)(p)),99,0,0,-1,-1,-1,1,"BC[24]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ATLAS_FILLLUMI */
static void G__setup_memvarDIP_ATLAS_FILLLUMI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI));
   { DIP_ATLAS_FILLLUMI *p; p=(DIP_ATLAS_FILLLUMI*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IntLumi_Recorded)-(long)(p)),102,0,0,-1,-1,-1,1,"IntLumi_Recorded=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IntLumi_Delivered_StableBeams)-(long)(p)),102,0,0,-1,-1,-1,1,"IntLumi_Delivered_StableBeams=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ATLAS_LUMIPERBUNCH */
static void G__setup_memvarDIP_ATLAS_LUMIPERBUNCH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH));
   { DIP_ATLAS_LUMIPERBUNCH *p; p=(DIP_ATLAS_LUMIPERBUNCH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Source)-(long)(p)),99,0,0,-1,-1,-1,1,"Source[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Lumi_BunchInst)-(long)(p)),102,0,0,-1,-1,-1,1,"Lumi_BunchInst[3564]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_ATLAS_LUMINOSITY */
static void G__setup_memvarDIP_ATLAS_LUMINOSITY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY));
   { DIP_ATLAS_LUMINOSITY *p; p=(DIP_ATLAS_LUMINOSITY*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Source)-(long)(p)),99,0,0,-1,-1,-1,1,"Source[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexCount)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexCount=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CollRate)-(long)(p)),100,0,0,-1,-1,-1,1,"CollRate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CollRateSource)-(long)(p)),99,0,0,-1,-1,-1,1,"CollRateSource[24]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CollRateIntTime)-(long)(p)),100,0,0,-1,-1,-1,1,"CollRateIntTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CollRateErr)-(long)(p)),100,0,0,-1,-1,-1,1,"CollRateErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Lumi_TotInst)-(long)(p)),102,0,0,-1,-1,-1,1,"Lumi_TotInst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy2)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy2[4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DIP_LHCF_DOSIMETER */
static void G__setup_memvarDIP_LHCF_DOSIMETER(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER));
   { DIP_LHCF_DOSIMETER *p; p=(DIP_LHCF_DOSIMETER*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Quality)-(long)(p)),105,0,0,-1,-1,-1,1,"Quality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),105,0,0,-1,-1,-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->seu_count3V)-(long)(p)),110,0,0,-1,G__defined_typename("LongLong"),-1,1,"seu_count3V=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->doseHighSensitivity)-(long)(p)),100,0,0,-1,-1,-1,1,"doseHighSensitivity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->doseMediumSensitivity)-(long)(p)),100,0,0,-1,-1,-1,1,"doseMediumSensitivity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neutronsHighSensitivity)-(long)(p)),100,0,0,-1,-1,-1,1,"neutronsHighSensitivity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->temp)-(long)(p)),100,0,0,-1,-1,-1,1,"temp=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LHCFDIPDATAH */
static void G__setup_memvarLHCFDIPDATAH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH));
   { LHCFDIPDATAH *p; p=(LHCFDIPDATAH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->header)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER),-1,-1,1,"header=",0,"for identification of data type, version;  ");
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),104,0,0,-1,-1,-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Arm1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm),-1,-1,1,"Arm1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Arm2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm),-1,-1,1,"Arm2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Coincidence)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE),-1,-1,1,"Coincidence=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHCf_Status)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS),-1,-1,1,"LHCf_Status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Interlock)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK),-1,-1,1,"Interlock=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHCf_Luminosity)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY),-1,-1,1,"LHCf_Luminosity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHCf_Injection)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION),-1,-1,1,"LHCf_Injection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHCf_Adjust)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST),-1,-1,1,"LHCf_Adjust=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHCf_Beamdump)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP),-1,-1,1,"LHCf_Beamdump=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Dummy_LHC_Injection)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION),-1,-1,1,"Dummy_LHC_Injection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Dummy_LHC_Adjust)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST),-1,-1,1,"Dummy_LHC_Adjust=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Dummy_LHC_Beamdump)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP),-1,-1,1,"Dummy_LHC_Beamdump=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BPM_LSS1L_B1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M),-1,-1,1,"BPM_LSS1L_B1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BPM_LSS1L_B2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M),-1,-1,1,"BPM_LSS1L_B2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BPM_LSS1R_B1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M),-1,-1,1,"BPM_LSS1R_B1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BPM_LSS1R_B2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M),-1,-1,1,"BPM_LSS1R_B2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY),-1,-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam1_intensity)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY),-1,-1,1,"Beam1_intensity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam2_intensity)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY),-1,-1,1,"Beam2_intensity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam1_intensityperbunch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S),-1,-1,1,"Beam1_intensityperbunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam2_intensityperbunch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S),-1,-1,1,"Beam2_intensityperbunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranA_4L1_av)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE),-1,-1,1,"BranA_4L1_av=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranA_4R1_av)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE),-1,-1,1,"BranA_4R1_av=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranP_4L1_av)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE),-1,-1,1,"BranP_4L1_av=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranP_4R1_av)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE),-1,-1,1,"BranP_4R1_av=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Lumiscan)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN),-1,-1,1,"Lumiscan=",0,"also recoded in LHCFDIPDATAVH ");
   G__memvar_setup((void*)((long)(&p->Beam1_size_average)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE),-1,-1,1,"Beam1_size_average=",0,"added instead of Beam1_size");
   G__memvar_setup((void*)((long)(&p->Beam2_size_average)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE),-1,-1,1,"Beam2_size_average=",0,"added instead of Beam2_size");
   G__memvar_setup((void*)((long)(&p->Beta_star)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR),-1,-1,1,"Beta_star=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHC_Injection)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION),-1,-1,1,"LHC_Injection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHC_Adjust)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST),-1,-1,1,"LHC_Adjust=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LHC_Beamdump)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP),-1,-1,1,"LHC_Beamdump=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamMode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE),-1,-1,1,"BeamMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Fillnumber)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER),-1,-1,1,"Fillnumber=",0,"data not filled from 07 May.2010");
   G__memvar_setup((void*)((long)(&p->Fillschema)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA),-1,-1,1,"Fillschema=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Machinemode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE),-1,-1,1,"Machinemode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Page1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE),-1,-1,1,"Page1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Safebeam1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM),-1,-1,1,"Safebeam1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Safebeam2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM),-1,-1,1,"Safebeam2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Safebeam)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM),-1,-1,1,"Safebeam=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamConfig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION),-1,-1,1,"BeamConfig=",0,"added at 07 May.2010");
   G__memvar_setup((void*)((long)(&p->Postmortem)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM),-1,-1,1,"Postmortem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Rxclocks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS),-1,-1,1,"Rxclocks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Rxfrev)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV),-1,-1,1,"Rxfrev=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Collpos_TCTH4L1B1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION),-1,-1,1,"Collpos_TCTH4L1B1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Collpos_TCTH4R1B2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION),-1,-1,1,"Collpos_TCTH4R1B2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Collpos_TCTVA4L1B1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION),-1,-1,1,"Collpos_TCTVA4L1B1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Collpos_TCTVA4R1B2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION),-1,-1,1,"Collpos_TCTVA4R1B2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Atlasclock)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION),-1,-1,1,"Atlasclock=",0,"added at 02 Mar.2010");
   G__memvar_setup((void*)((long)(&p->Atlas_filllumi)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI),-1,-1,1,"Atlas_filllumi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Atlas_filllumi_ions)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI),-1,-1,1,"Atlas_filllumi_ions=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Atlas_lumiperbunch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH),-1,-1,1,"Atlas_lumiperbunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Atlas_lumiperbunch_ions)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH),-1,-1,1,"Atlas_lumiperbunch_ions=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Atlas_luminosity)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY),-1,-1,1,"Atlas_luminosity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Atlas_luminosity_ions)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY),-1,-1,1,"Atlas_luminosity_ions=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dosimeterL)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER),-1,-1,1,"dosimeterL=",0,"added at 02 Mar.2010");
   G__memvar_setup((void*)((long)(&p->dosimeterR)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER),-1,-1,1,"dosimeterR=",0,"added at 02 Mar.2010");
   }
   G__tag_memvar_reset();
}


   /* LHCFDIPDATAL */
static void G__setup_memvarLHCFDIPDATAL(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL));
   { LHCFDIPDATAL *p; p=(LHCFDIPDATAL*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->header)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER),-1,-1,1,"header=",0,"for identification of data type, version;  ");
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),104,0,0,-1,-1,-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam1_intensityperbunch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH),-1,-1,1,"Beam1_intensityperbunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam2_intensityperbunch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH),-1,-1,1,"Beam2_intensityperbunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranA_4L1_pb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH),-1,-1,1,"BranA_4L1_pb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranA_4R1_pb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH),-1,-1,1,"BranA_4R1_pb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranP_4L1_pb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH),-1,-1,1,"BranP_4L1_pb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BranP_4R1_pb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH),-1,-1,1,"BranP_4R1_pb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam1_bunchconfig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG),-1,-1,1,"Beam1_bunchconfig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beam2_bunchconfig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG),-1,-1,1,"Beam2_bunchconfig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B1H1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B1H1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B1H2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B1H2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B1V1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B1V1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B1V2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B1V2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B2H1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B2H1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B2H2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B2H2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B2V1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B2V1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireScanner_B2V2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),-1,-1,1,"WireScanner_B2V2=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LHCFDIPDATAVH */
static void G__setup_memvarLHCFDIPDATAVH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH));
   { LHCFDIPDATAVH *p; p=(LHCFDIPDATAVH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->header)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER),-1,-1,1,"header=",0,"for identification of data type, version;  ");
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),104,0,0,-1,-1,-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),104,0,0,-1,G__defined_typename("GSTATUS"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dummy)-(long)(p)),99,0,0,-1,-1,-1,1,"dummy[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Lumiscan)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN),-1,-1,1,"Lumiscan=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLHCFDIPDATAH */
static void G__setup_memvarTLHCFDIPDATAH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH));
   { TLHCFDIPDATAH *p; p=(TLHCFDIPDATAH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLHCFDIPDATAL */
static void G__setup_memvarTLHCFDIPDATAL(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL));
   { TLHCFDIPDATAL *p; p=(TLHCFDIPDATAL*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLHCFDIPDATAVH */
static void G__setup_memvarTLHCFDIPDATAVH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH));
   { TLHCFDIPDATAVH *p; p=(TLHCFDIPDATAVH*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->number)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"number=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__libLHCfSCLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SocketControl */
static void G__setup_memvarSocketControl(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl));
   { SocketControl *p; p=(SocketControl*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"connection=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"sock=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"serverhost[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"lock=",0,"1:lock 0:unlock");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("SOCKETCONTROL_OK=%lldLL",(long long)SocketControl::SOCKETCONTROL_OK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("SOCKETCONTROL_ERROR=%lldLL",(long long)SocketControl::SOCKETCONTROL_ERROR).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&SocketControl::DEFULT_SERVERHOST),67,0,1,-1,-1,-2,1,"DEFULT_SERVERHOST=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("PORT=%lldLL",(long long)SocketControl::PORT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("MAXDATA=%lldLL",(long long)SocketControl::MAXDATA).data(),0,"20kB");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("MASK_ON=%lldLL",(long long)SocketControl::MASK_ON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("MASK_ERROR=%lldLL",(long long)SocketControl::MASK_ERROR).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("MASK_WARNIUNG=%lldLL",(long long)SocketControl::MASK_WARNIUNG).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarlibLHCfSC() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncLHCFSDATA_HEADER(void) {
   /* LHCFSDATA_HEADER */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER));
   // automatic default constructor
   G__memfunc_setup("LHCFSDATA_HEADER", 1170, G__libLHCfSC_168_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("LHCFSDATA_HEADER", 1170, G__libLHCfSC_168_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER), -1, 0, 1, 1, 1, 0, "u 'LHCFSDATA_HEADER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHCFSDATA_HEADER", 1296, G__libLHCfSC_168_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_168_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA_HEADER), -1, 1, 1, 1, 1, 0, "u 'LHCFSDATA_HEADER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCPWS_CH(void) {
   /* CPWS_CH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH));
   // automatic default constructor
   G__memfunc_setup("CPWS_CH", 551, G__libLHCfSC_169_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CPWS_CH", 551, G__libLHCfSC_169_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH), -1, 0, 1, 1, 1, 0, "u 'CPWS_CH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CPWS_CH", 677, G__libLHCfSC_169_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_169_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS_CH), -1, 1, 1, 1, 1, 0, "u 'CPWS_CH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCPWS1_DATA(void) {
   /* CPWS1_DATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA));
   // automatic default constructor
   G__memfunc_setup("CPWS1_DATA", 743, G__libLHCfSC_170_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CPWS1_DATA", 743, G__libLHCfSC_170_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA), -1, 0, 1, 1, 1, 0, "u 'CPWS1_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CPWS1_DATA", 869, G__libLHCfSC_170_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_170_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS1_DATA), -1, 1, 1, 1, 1, 0, "u 'CPWS1_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCPWS2_DATA(void) {
   /* CPWS2_DATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA));
   // automatic default constructor
   G__memfunc_setup("CPWS2_DATA", 744, G__libLHCfSC_171_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CPWS2_DATA", 744, G__libLHCfSC_171_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA), -1, 0, 1, 1, 1, 0, "u 'CPWS2_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CPWS2_DATA", 870, G__libLHCfSC_171_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_171_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_CPWS2_DATA), -1, 1, 1, 1, 1, 0, "u 'CPWS2_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAGILENT_CH(void) {
   /* AGILENT_CH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH));
   // automatic default constructor
   G__memfunc_setup("AGILENT_CH", 750, G__libLHCfSC_172_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AGILENT_CH", 750, G__libLHCfSC_172_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH), -1, 0, 1, 1, 1, 0, "u 'AGILENT_CH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AGILENT_CH", 876, G__libLHCfSC_172_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_172_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_CH), -1, 1, 1, 1, 1, 0, "u 'AGILENT_CH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAGILENT_MOD(void) {
   /* AGILENT_MOD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD));
   // automatic default constructor
   G__memfunc_setup("AGILENT_MOD", 835, G__libLHCfSC_173_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AGILENT_MOD", 835, G__libLHCfSC_173_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD), -1, 0, 1, 1, 1, 0, "u 'AGILENT_MOD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AGILENT_MOD", 961, G__libLHCfSC_173_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_173_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_MOD), -1, 1, 1, 1, 1, 0, "u 'AGILENT_MOD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAGILENT_DATA(void) {
   /* AGILENT_DATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA));
   // automatic default constructor
   G__memfunc_setup("AGILENT_DATA", 893, G__libLHCfSC_174_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AGILENT_DATA", 893, G__libLHCfSC_174_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA), -1, 0, 1, 1, 1, 0, "u 'AGILENT_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AGILENT_DATA", 1019, G__libLHCfSC_174_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_174_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_AGILENT_DATA), -1, 1, 1, 1, 1, 0, "u 'AGILENT_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRHX_DATA(void) {
   /* TRHX_DATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA));
   // automatic default constructor
   G__memfunc_setup("TRHX_DATA", 703, G__libLHCfSC_175_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TRHX_DATA", 703, G__libLHCfSC_175_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA), -1, 0, 1, 1, 1, 0, "u 'TRHX_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TRHX_DATA", 829, G__libLHCfSC_175_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_175_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_TRHX_DATA), -1, 1, 1, 1, 1, 0, "u 'TRHX_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncENCODER_DATA(void) {
   /* ENCODER_DATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA));
   // automatic default constructor
   G__memfunc_setup("ENCODER_DATA", 889, G__libLHCfSC_176_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ENCODER_DATA", 889, G__libLHCfSC_176_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA), -1, 0, 1, 1, 1, 0, "u 'ENCODER_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ENCODER_DATA", 1015, G__libLHCfSC_176_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_176_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_ENCODER_DATA), -1, 1, 1, 1, 1, 0, "u 'ENCODER_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncADC_DATA(void) {
   /* ADC_DATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA));
   // automatic default constructor
   G__memfunc_setup("ADC_DATA", 577, G__libLHCfSC_177_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ADC_DATA", 577, G__libLHCfSC_177_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA), -1, 0, 1, 1, 1, 0, "u 'ADC_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ADC_DATA", 703, G__libLHCfSC_177_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_177_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_ADC_DATA), -1, 1, 1, 1, 1, 0, "u 'ADC_DATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHCFSDATA(void) {
   /* LHCFSDATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA));
   G__memfunc_setup("LHCFSDATA",650,G__libLHCfSC_178_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__libLHCfSC_178_0_2, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__libLHCfSC_178_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassVersion",1532,G__libLHCfSC_178_0_4, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFSDATA::GetClassVersion) ), 0);
   G__memfunc_setup("GetClassSize",1201,G__libLHCfSC_178_0_5, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFSDATA::GetClassSize) ), 0);
   // automatic copy constructor
   G__memfunc_setup("LHCFSDATA", 650, G__libLHCfSC_178_0_6, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA), -1, 0, 1, 1, 1, 0, "u 'LHCFSDATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHCFSDATA", 776, G__libLHCfSC_178_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_178_0_8, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA), -1, 1, 1, 1, 1, 0, "u 'LHCFSDATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLHCFSDATA(void) {
   /* TLHCFSDATA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA));
   G__memfunc_setup("TLHCFSDATA",734,G__libLHCfSC_195_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TLHCFSDATA",734,G__libLHCfSC_195_0_2, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA), -1, 0, 2, 1, 1, 0, 
"C - - 0 - name C - - 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__libLHCfSC_195_0_3, 85, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFSDATA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__libLHCfSC_195_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataClear",865,G__libLHCfSC_195_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__libLHCfSC_195_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TLHCFSDATA' - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Divide",597,G__libLHCfSC_195_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__libLHCfSC_195_0_8, 85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TLHCFSDATA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__libLHCfSC_195_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFSDATA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__libLHCfSC_195_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TLHCFSDATA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__libLHCfSC_195_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TLHCFSDATA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__libLHCfSC_195_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__libLHCfSC_195_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFSDATA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__libLHCfSC_195_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFSDATA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__libLHCfSC_195_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFSDATA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__libLHCfSC_195_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFSDATA::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TLHCFSDATA", 734, G__libLHCfSC_195_0_20, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA), -1, 0, 1, 1, 1, 0, "u 'TLHCFSDATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TLHCFSDATA", 860, G__libLHCfSC_195_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_195_0_22, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFSDATA), -1, 1, 1, 1, 1, 0, "u 'TLHCFSDATA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_Arm(void) {
   /* DIP_LHCF_Arm */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_Arm", 984, G__libLHCfSC_196_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_Arm", 984, G__libLHCfSC_196_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_Arm' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_Arm", 1110, G__libLHCfSC_196_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_196_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_Arm), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_Arm' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_COINCIDENCE(void) {
   /* DIP_LHCF_COINCIDENCE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_COINCIDENCE", 1484, G__libLHCfSC_197_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_COINCIDENCE", 1484, G__libLHCfSC_197_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_COINCIDENCE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_COINCIDENCE", 1610, G__libLHCfSC_197_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_197_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_COINCIDENCE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_EXPTSTATUS(void) {
   /* DIP_LHCF_EXPTSTATUS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_EXPTSTATUS", 1501, G__libLHCfSC_198_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_EXPTSTATUS", 1501, G__libLHCfSC_198_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_EXPTSTATUS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_EXPTSTATUS", 1627, G__libLHCfSC_198_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_198_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_EXPTSTATUS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_INTERLOCK(void) {
   /* DIP_LHCF_INTERLOCK */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_INTERLOCK", 1379, G__libLHCfSC_199_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_INTERLOCK", 1379, G__libLHCfSC_199_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_INTERLOCK' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_INTERLOCK", 1505, G__libLHCfSC_199_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_199_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_INTERLOCK' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_LUMINOSITY(void) {
   /* DIP_LHCF_LUMINOSITY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_LUMINOSITY", 1493, G__libLHCfSC_200_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_LUMINOSITY", 1493, G__libLHCfSC_200_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_LUMINOSITY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_LUMINOSITY", 1619, G__libLHCfSC_200_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_200_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_LUMINOSITY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_HS_LHC_INJECTION(void) {
   /* DIP_LHCF_HS_LHC_INJECTION */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_HS_LHC_INJECTION", 1931, G__libLHCfSC_201_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_HS_LHC_INJECTION", 1931, G__libLHCfSC_201_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_HS_LHC_INJECTION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_HS_LHC_INJECTION", 2057, G__libLHCfSC_201_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_201_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_HS_LHC_INJECTION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_HS_LHC_ADJUST(void) {
   /* DIP_LHCF_HS_LHC_ADJUST */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_HS_LHC_ADJUST", 1715, G__libLHCfSC_202_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_HS_LHC_ADJUST", 1715, G__libLHCfSC_202_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_HS_LHC_ADJUST' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_HS_LHC_ADJUST", 1841, G__libLHCfSC_202_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_202_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_HS_LHC_ADJUST' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_HS_LHC_BEAMDUMP(void) {
   /* DIP_LHCF_HS_LHC_BEAMDUMP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_HS_LHC_BEAMDUMP", 1843, G__libLHCfSC_203_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_HS_LHC_BEAMDUMP", 1843, G__libLHCfSC_203_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_HS_LHC_BEAMDUMP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_HS_LHC_BEAMDUMP", 1969, G__libLHCfSC_203_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_203_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_HS_LHC_BEAMDUMP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_BPM(void) {
   /* DIP_ACC_BEAM_BPM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_BPM", 1205, G__libLHCfSC_204_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_BPM", 1205, G__libLHCfSC_204_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_BPM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_BPM", 1331, G__libLHCfSC_204_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_204_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_BPM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_BPM_M(void) {
   /* DIP_ACC_BEAM_BPM_M */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_BPM_M", 1377, G__libLHCfSC_205_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_BPM_M", 1377, G__libLHCfSC_205_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_BPM_M' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_BPM_M", 1503, G__libLHCfSC_205_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_205_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_BPM_M' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_ENERGY(void) {
   /* DIP_ACC_BEAM_ENERGY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_ENERGY", 1440, G__libLHCfSC_206_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_ENERGY", 1440, G__libLHCfSC_206_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_ENERGY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_ENERGY", 1566, G__libLHCfSC_206_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_206_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_ENERGY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_INTENSITY(void) {
   /* DIP_ACC_BEAM_INTENSITY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_INTENSITY", 1693, G__libLHCfSC_207_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_INTENSITY", 1693, G__libLHCfSC_207_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_INTENSITY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_INTENSITY", 1819, G__libLHCfSC_207_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_207_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_INTENSITY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_INTENSITYPERBUNCH(void) {
   /* DIP_ACC_BEAM_INTENSITYPERBUNCH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_INTENSITYPERBUNCH", 2292, G__libLHCfSC_208_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_INTENSITYPERBUNCH", 2292, G__libLHCfSC_208_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_INTENSITYPERBUNCH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_INTENSITYPERBUNCH", 2418, G__libLHCfSC_208_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_208_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_INTENSITYPERBUNCH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_INTENSITYPERBUNCH_S(void) {
   /* DIP_ACC_BEAM_INTENSITYPERBUNCH_S */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_INTENSITYPERBUNCH_S", 2470, G__libLHCfSC_209_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_INTENSITYPERBUNCH_S", 2470, G__libLHCfSC_209_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_INTENSITYPERBUNCH_S' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_INTENSITYPERBUNCH_S", 2596, G__libLHCfSC_209_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_209_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_INTENSITYPERBUNCH_S' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_LUMINOSITYAVERAGE(void) {
   /* DIP_ACC_BEAM_LUMINOSITYAVERAGE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_LUMINOSITYAVERAGE", 2286, G__libLHCfSC_210_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_LUMINOSITYAVERAGE", 2286, G__libLHCfSC_210_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_LUMINOSITYAVERAGE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_LUMINOSITYAVERAGE", 2412, G__libLHCfSC_210_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_210_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_LUMINOSITYAVERAGE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_LUMINOSITYPERBUNCH(void) {
   /* DIP_ACC_BEAM_LUMINOSITYPERBUNCH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_LUMINOSITYPERBUNCH", 2378, G__libLHCfSC_211_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_LUMINOSITYPERBUNCH", 2378, G__libLHCfSC_211_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_LUMINOSITYPERBUNCH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_LUMINOSITYPERBUNCH", 2504, G__libLHCfSC_211_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_211_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_LUMINOSITYPERBUNCH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_LUMINOSITYSCAN(void) {
   /* DIP_ACC_BEAM_LUMINOSITYSCAN */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_LUMINOSITYSCAN", 2072, G__libLHCfSC_212_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_LUMINOSITYSCAN", 2072, G__libLHCfSC_212_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_LUMINOSITYSCAN' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_LUMINOSITYSCAN", 2198, G__libLHCfSC_212_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_212_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_LUMINOSITYSCAN' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_SIZE(void) {
   /* DIP_ACC_BEAM_SIZE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_SIZE", 1297, G__libLHCfSC_213_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_SIZE", 1297, G__libLHCfSC_213_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_SIZE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_SIZE", 1423, G__libLHCfSC_213_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_213_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_SIZE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_SIZE_AVERAGE(void) {
   /* DIP_ACC_BEAM_SIZE_AVERAGE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_SIZE_AVERAGE", 1899, G__libLHCfSC_214_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_SIZE_AVERAGE", 1899, G__libLHCfSC_214_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_SIZE_AVERAGE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_SIZE_AVERAGE", 2025, G__libLHCfSC_214_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_214_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_SIZE_AVERAGE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_WIRESCANNER(void) {
   /* DIP_ACC_BEAM_WIRESCANNER */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_WIRESCANNER", 1815, G__libLHCfSC_215_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_WIRESCANNER", 1815, G__libLHCfSC_215_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_WIRESCANNER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_WIRESCANNER", 1941, G__libLHCfSC_215_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_215_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_WIRESCANNER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_BEAM_BETASTAR(void) {
   /* DIP_ACC_BEAM_BETASTAR */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_BEAM_BETASTAR", 1580, G__libLHCfSC_216_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_BEAM_BETASTAR", 1580, G__libLHCfSC_216_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_BETASTAR' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_BEAM_BETASTAR", 1706, G__libLHCfSC_216_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_216_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_BEAM_BETASTAR' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_HS_LHC_INJECTION(void) {
   /* DIP_ACC_HS_LHC_INJECTION */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_HS_LHC_INJECTION", 1845, G__libLHCfSC_217_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_HS_LHC_INJECTION", 1845, G__libLHCfSC_217_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_HS_LHC_INJECTION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_HS_LHC_INJECTION", 1971, G__libLHCfSC_217_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_217_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_HS_LHC_INJECTION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_HS_LHC_ADJUST(void) {
   /* DIP_ACC_HS_LHC_ADJUST */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_HS_LHC_ADJUST", 1629, G__libLHCfSC_218_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_HS_LHC_ADJUST", 1629, G__libLHCfSC_218_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_HS_LHC_ADJUST' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_HS_LHC_ADJUST", 1755, G__libLHCfSC_218_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_218_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_HS_LHC_ADJUST' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_HS_LHC_BEAMDUMP(void) {
   /* DIP_ACC_HS_LHC_BEAMDUMP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_HS_LHC_BEAMDUMP", 1757, G__libLHCfSC_219_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_HS_LHC_BEAMDUMP", 1757, G__libLHCfSC_219_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_HS_LHC_BEAMDUMP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_HS_LHC_BEAMDUMP", 1883, G__libLHCfSC_219_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_219_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_HS_LHC_BEAMDUMP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_BEAMMODE(void) {
   /* DIP_ACC_RUNCONTROL_BEAMMODE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_BEAMMODE", 2065, G__libLHCfSC_220_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_BEAMMODE", 2065, G__libLHCfSC_220_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_BEAMMODE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_BEAMMODE", 2191, G__libLHCfSC_220_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_220_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_BEAMMODE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_BUNCHCONFIG(void) {
   /* DIP_ACC_RUNCONTROL_BUNCHCONFIG */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_BUNCHCONFIG", 2301, G__libLHCfSC_221_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_BUNCHCONFIG", 2301, G__libLHCfSC_221_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_BUNCHCONFIG' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_BUNCHCONFIG", 2427, G__libLHCfSC_221_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_221_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_BUNCHCONFIG' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_FILLNUMBER(void) {
   /* DIP_ACC_RUNCONTROL_FILLNUMBER */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_FILLNUMBER", 2247, G__libLHCfSC_222_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_FILLNUMBER", 2247, G__libLHCfSC_222_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_FILLNUMBER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_FILLNUMBER", 2373, G__libLHCfSC_222_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_222_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_FILLNUMBER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_FILLSCHEMA(void) {
   /* DIP_ACC_RUNCONTROL_FILLSCHEMA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_FILLSCHEMA", 2223, G__libLHCfSC_223_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_FILLSCHEMA", 2223, G__libLHCfSC_223_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_FILLSCHEMA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_FILLSCHEMA", 2349, G__libLHCfSC_223_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_223_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_FILLSCHEMA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_MACHINEMODE(void) {
   /* DIP_ACC_RUNCONTROL_MACHINEMODE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_MACHINEMODE", 2289, G__libLHCfSC_224_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_MACHINEMODE", 2289, G__libLHCfSC_224_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_MACHINEMODE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_MACHINEMODE", 2415, G__libLHCfSC_224_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_224_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_MACHINEMODE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_PAGE(void) {
   /* DIP_ACC_RUNCONTROL_PAGE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_PAGE", 1780, G__libLHCfSC_225_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_PAGE", 1780, G__libLHCfSC_225_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_PAGE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_PAGE", 1906, G__libLHCfSC_225_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_225_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_PAGE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_SAFEBEAM(void) {
   /* DIP_ACC_RUNCONTROL_SAFEBEAM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_SAFEBEAM", 2059, G__libLHCfSC_226_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_SAFEBEAM", 2059, G__libLHCfSC_226_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_SAFEBEAM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_SAFEBEAM", 2185, G__libLHCfSC_226_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_226_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_SAFEBEAM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_RUNCONTROL_RUNCONFIGURATION(void) {
   /* DIP_ACC_RUNCONTROL_RUNCONFIGURATION */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_RUNCONFIGURATION", 2724, G__libLHCfSC_227_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_RUNCONTROL_RUNCONFIGURATION", 2724, G__libLHCfSC_227_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_RUNCONFIGURATION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_RUNCONTROL_RUNCONFIGURATION", 2850, G__libLHCfSC_227_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_227_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_RUNCONTROL_RUNCONFIGURATION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_TIMING_POSTMORTEM(void) {
   /* DIP_ACC_TIMING_POSTMORTEM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_TIMING_POSTMORTEM", 1955, G__libLHCfSC_228_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_TIMING_POSTMORTEM", 1955, G__libLHCfSC_228_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_TIMING_POSTMORTEM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_TIMING_POSTMORTEM", 2081, G__libLHCfSC_228_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_228_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_TIMING_POSTMORTEM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_TIMING_RXCLOCKS(void) {
   /* DIP_ACC_TIMING_RXCLOCKS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_TIMING_RXCLOCKS", 1778, G__libLHCfSC_229_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_TIMING_RXCLOCKS", 1778, G__libLHCfSC_229_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_TIMING_RXCLOCKS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_TIMING_RXCLOCKS", 1904, G__libLHCfSC_229_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_229_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_TIMING_RXCLOCKS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_TIMING_RXFREV(void) {
   /* DIP_ACC_TIMING_RXFREV */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_TIMING_RXFREV", 1638, G__libLHCfSC_230_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_TIMING_RXFREV", 1638, G__libLHCfSC_230_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_TIMING_RXFREV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_TIMING_RXFREV", 1764, G__libLHCfSC_230_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_230_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_TIMING_RXFREV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ACC_MACHINE_COLLPOSITION(void) {
   /* DIP_ACC_MACHINE_COLLPOSITION */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION));
   // automatic default constructor
   G__memfunc_setup("DIP_ACC_MACHINE_COLLPOSITION", 2133, G__libLHCfSC_231_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ACC_MACHINE_COLLPOSITION", 2133, G__libLHCfSC_231_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION), -1, 0, 1, 1, 1, 0, "u 'DIP_ACC_MACHINE_COLLPOSITION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ACC_MACHINE_COLLPOSITION", 2259, G__libLHCfSC_231_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_231_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION), -1, 1, 1, 1, 1, 0, "u 'DIP_ACC_MACHINE_COLLPOSITION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ATLAS_CLOCK_SELECTION(void) {
   /* DIP_ATLAS_CLOCK_SELECTION */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION));
   // automatic default constructor
   G__memfunc_setup("DIP_ATLAS_CLOCK_SELECTION", 1921, G__libLHCfSC_232_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ATLAS_CLOCK_SELECTION", 1921, G__libLHCfSC_232_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION), -1, 0, 1, 1, 1, 0, "u 'DIP_ATLAS_CLOCK_SELECTION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ATLAS_CLOCK_SELECTION", 2047, G__libLHCfSC_232_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_232_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION), -1, 1, 1, 1, 1, 0, "u 'DIP_ATLAS_CLOCK_SELECTION' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ATLAS_FILLLUMI(void) {
   /* DIP_ATLAS_FILLLUMI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI));
   // automatic default constructor
   G__memfunc_setup("DIP_ATLAS_FILLLUMI", 1390, G__libLHCfSC_233_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ATLAS_FILLLUMI", 1390, G__libLHCfSC_233_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI), -1, 0, 1, 1, 1, 0, "u 'DIP_ATLAS_FILLLUMI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ATLAS_FILLLUMI", 1516, G__libLHCfSC_233_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_233_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI), -1, 1, 1, 1, 1, 0, "u 'DIP_ATLAS_FILLLUMI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ATLAS_LUMIPERBUNCH(void) {
   /* DIP_ATLAS_LUMIPERBUNCH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH));
   // automatic default constructor
   G__memfunc_setup("DIP_ATLAS_LUMIPERBUNCH", 1694, G__libLHCfSC_234_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ATLAS_LUMIPERBUNCH", 1694, G__libLHCfSC_234_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH), -1, 0, 1, 1, 1, 0, "u 'DIP_ATLAS_LUMIPERBUNCH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ATLAS_LUMIPERBUNCH", 1820, G__libLHCfSC_234_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_234_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH), -1, 1, 1, 1, 1, 0, "u 'DIP_ATLAS_LUMIPERBUNCH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_ATLAS_LUMINOSITY(void) {
   /* DIP_ATLAS_LUMINOSITY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY));
   // automatic default constructor
   G__memfunc_setup("DIP_ATLAS_LUMINOSITY", 1581, G__libLHCfSC_235_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_ATLAS_LUMINOSITY", 1581, G__libLHCfSC_235_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY), -1, 0, 1, 1, 1, 0, "u 'DIP_ATLAS_LUMINOSITY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_ATLAS_LUMINOSITY", 1707, G__libLHCfSC_235_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_235_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY), -1, 1, 1, 1, 1, 0, "u 'DIP_ATLAS_LUMINOSITY' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDIP_LHCF_DOSIMETER(void) {
   /* DIP_LHCF_DOSIMETER */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER));
   // automatic default constructor
   G__memfunc_setup("DIP_LHCF_DOSIMETER", 1380, G__libLHCfSC_236_0_1, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DIP_LHCF_DOSIMETER", 1380, G__libLHCfSC_236_0_2, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER), -1, 0, 1, 1, 1, 0, "u 'DIP_LHCF_DOSIMETER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DIP_LHCF_DOSIMETER", 1506, G__libLHCfSC_236_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_236_0_4, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER), -1, 1, 1, 1, 1, 0, "u 'DIP_LHCF_DOSIMETER' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHCFDIPDATAH(void) {
   /* LHCFDIPDATAH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH));
   G__memfunc_setup("LHCFDIPDATAH",860,G__libLHCfSC_237_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__libLHCfSC_237_0_2, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__libLHCfSC_237_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__libLHCfSC_237_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassType",1208,G__libLHCfSC_237_0_5, 67, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (char* (*)())(&LHCFDIPDATAH::GetClassType) ), 0);
   G__memfunc_setup("GetClassVersion",1532,G__libLHCfSC_237_0_6, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFDIPDATAH::GetClassVersion) ), 0);
   G__memfunc_setup("GetClassSize",1201,G__libLHCfSC_237_0_7, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFDIPDATAH::GetClassSize) ), 0);
   G__memfunc_setup("CheckType",896,G__libLHCfSC_237_0_8, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckVersion",1220,G__libLHCfSC_237_0_9, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSize",889,G__libLHCfSC_237_0_10, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("LHCFDIPDATAH", 860, G__libLHCfSC_237_0_11, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH), -1, 0, 1, 1, 1, 0, "u 'LHCFDIPDATAH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHCFDIPDATAH", 986, G__libLHCfSC_237_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_237_0_13, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH), -1, 1, 1, 1, 1, 0, "u 'LHCFDIPDATAH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHCFDIPDATAL(void) {
   /* LHCFDIPDATAL */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL));
   G__memfunc_setup("LHCFDIPDATAL",864,G__libLHCfSC_238_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__libLHCfSC_238_0_2, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__libLHCfSC_238_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__libLHCfSC_238_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassType",1208,G__libLHCfSC_238_0_5, 67, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (char* (*)())(&LHCFDIPDATAL::GetClassType) ), 0);
   G__memfunc_setup("GetClassVersion",1532,G__libLHCfSC_238_0_6, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFDIPDATAL::GetClassVersion) ), 0);
   G__memfunc_setup("GetClassSize",1201,G__libLHCfSC_238_0_7, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFDIPDATAL::GetClassSize) ), 0);
   G__memfunc_setup("CheckType",896,G__libLHCfSC_238_0_8, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckVersion",1220,G__libLHCfSC_238_0_9, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSize",889,G__libLHCfSC_238_0_10, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("LHCFDIPDATAL", 864, G__libLHCfSC_238_0_11, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL), -1, 0, 1, 1, 1, 0, "u 'LHCFDIPDATAL' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHCFDIPDATAL", 990, G__libLHCfSC_238_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_238_0_13, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL), -1, 1, 1, 1, 1, 0, "u 'LHCFDIPDATAL' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHCFDIPDATAVH(void) {
   /* LHCFDIPDATAVH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH));
   G__memfunc_setup("LHCFDIPDATAVH",946,G__libLHCfSC_239_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__libLHCfSC_239_0_2, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__libLHCfSC_239_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__libLHCfSC_239_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClassType",1208,G__libLHCfSC_239_0_5, 67, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (char* (*)())(&LHCFDIPDATAVH::GetClassType) ), 0);
   G__memfunc_setup("GetClassVersion",1532,G__libLHCfSC_239_0_6, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFDIPDATAVH::GetClassVersion) ), 0);
   G__memfunc_setup("GetClassSize",1201,G__libLHCfSC_239_0_7, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCFDIPDATAVH::GetClassSize) ), 0);
   G__memfunc_setup("CheckType",896,G__libLHCfSC_239_0_8, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckVersion",1220,G__libLHCfSC_239_0_9, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSize",889,G__libLHCfSC_239_0_10, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("LHCFDIPDATAVH", 946, G__libLHCfSC_239_0_11, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH), -1, 0, 1, 1, 1, 0, "u 'LHCFDIPDATAVH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHCFDIPDATAVH", 1072, G__libLHCfSC_239_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_239_0_13, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH), -1, 1, 1, 1, 1, 0, "u 'LHCFDIPDATAVH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLHCFDIPDATAH(void) {
   /* TLHCFDIPDATAH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH));
   G__memfunc_setup("TLHCFDIPDATAH",944,G__libLHCfSC_240_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TLHCFDIPDATAH",944,G__libLHCfSC_240_0_2, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH), -1, 0, 2, 1, 1, 0, 
"C - - 0 - name C - - 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__libLHCfSC_240_0_3, 85, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__libLHCfSC_240_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataClear",865,G__libLHCfSC_240_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__libLHCfSC_240_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TLHCFDIPDATAH' - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Divide",597,G__libLHCfSC_240_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__libLHCfSC_240_0_8, 85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TLHCFDIPDATAH::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__libLHCfSC_240_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAH::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__libLHCfSC_240_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TLHCFDIPDATAH::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__libLHCfSC_240_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TLHCFDIPDATAH::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__libLHCfSC_240_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__libLHCfSC_240_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAH::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__libLHCfSC_240_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFDIPDATAH::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__libLHCfSC_240_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAH::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__libLHCfSC_240_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFDIPDATAH::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TLHCFDIPDATAH", 944, G__libLHCfSC_240_0_20, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH), -1, 0, 1, 1, 1, 0, "u 'TLHCFDIPDATAH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TLHCFDIPDATAH", 1070, G__libLHCfSC_240_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_240_0_22, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAH), -1, 1, 1, 1, 1, 0, "u 'TLHCFDIPDATAH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLHCFDIPDATAL(void) {
   /* TLHCFDIPDATAL */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL));
   G__memfunc_setup("TLHCFDIPDATAL",948,G__libLHCfSC_241_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TLHCFDIPDATAL",948,G__libLHCfSC_241_0_2, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL), -1, 0, 2, 1, 1, 0, 
"C - - 0 - name C - - 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__libLHCfSC_241_0_3, 85, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAL), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__libLHCfSC_241_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataClear",865,G__libLHCfSC_241_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__libLHCfSC_241_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TLHCFDIPDATAL' - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Divide",597,G__libLHCfSC_241_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__libLHCfSC_241_0_8, 85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TLHCFDIPDATAL::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__libLHCfSC_241_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAL::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__libLHCfSC_241_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TLHCFDIPDATAL::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__libLHCfSC_241_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TLHCFDIPDATAL::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__libLHCfSC_241_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__libLHCfSC_241_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAL::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__libLHCfSC_241_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFDIPDATAL::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__libLHCfSC_241_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAL::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__libLHCfSC_241_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFDIPDATAL::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TLHCFDIPDATAL", 948, G__libLHCfSC_241_0_20, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL), -1, 0, 1, 1, 1, 0, "u 'TLHCFDIPDATAL' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TLHCFDIPDATAL", 1074, G__libLHCfSC_241_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_241_0_22, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAL), -1, 1, 1, 1, 1, 0, "u 'TLHCFDIPDATAL' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLHCFDIPDATAVH(void) {
   /* TLHCFDIPDATAVH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH));
   G__memfunc_setup("TLHCFDIPDATAVH",1030,G__libLHCfSC_242_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TLHCFDIPDATAVH",1030,G__libLHCfSC_242_0_2, 105, G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH), -1, 0, 2, 1, 1, 0, 
"C - - 0 - name C - - 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__libLHCfSC_242_0_3, 85, G__get_linked_tagnum(&G__libLHCfSCLN_LHCFDIPDATAVH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__libLHCfSC_242_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataClear",865,G__libLHCfSC_242_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__libLHCfSC_242_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TLHCFDIPDATAVH' - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Divide",597,G__libLHCfSC_242_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__libLHCfSC_242_0_8, 85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TLHCFDIPDATAVH::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__libLHCfSC_242_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAVH::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__libLHCfSC_242_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TLHCFDIPDATAVH::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__libLHCfSC_242_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TLHCFDIPDATAVH::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__libLHCfSCLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__libLHCfSC_242_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__libLHCfSC_242_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAVH::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__libLHCfSC_242_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFDIPDATAVH::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__libLHCfSC_242_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLHCFDIPDATAVH::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__libLHCfSC_242_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLHCFDIPDATAVH::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TLHCFDIPDATAVH", 1030, G__libLHCfSC_242_0_20, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH), -1, 0, 1, 1, 1, 0, "u 'TLHCFDIPDATAVH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TLHCFDIPDATAVH", 1156, G__libLHCfSC_242_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_242_0_22, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_TLHCFDIPDATAVH), -1, 1, 1, 1, 1, 0, "u 'TLHCFDIPDATAVH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSocketControl(void) {
   /* SocketControl */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl));
   G__memfunc_setup("SocketControl",1354,G__libLHCfSC_243_0_1, 105, G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SocketControl",1354,G__libLHCfSC_243_0_2, 105, G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl), -1, 0, 1, 1, 1, 0, "C - - 10 - hostname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__libLHCfSC_243_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetServer",931,G__libLHCfSC_243_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetServer",919,G__libLHCfSC_243_0_5, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSocketID",1046,G__libLHCfSC_243_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Connect",714,G__libLHCfSC_243_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DisConnect",1002,G__libLHCfSC_243_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectionRefused",1758,G__libLHCfSC_243_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsConnection",1228,G__libLHCfSC_243_0_10, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckConnection",1518,G__libLHCfSC_243_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBinaryData",1279,G__libLHCfSC_243_0_12, 105, -1, -1, 0, 1, 1, 1, 0, "U 'LHCFSDATA' - 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBinaryDataDipH",1636,G__libLHCfSC_243_0_13, 105, -1, -1, 0, 1, 1, 1, 0, "U 'LHCFDIPDATAH' - 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBinaryDataDipL",1640,G__libLHCfSC_243_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "U 'LHCFDIPDATAL' - 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBinaryDataDipVH",1722,G__libLHCfSC_243_0_15, 105, -1, -1, 0, 1, 1, 1, 0, "U 'LHCFDIPDATAVH' - 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SendCommand",1097,G__libLHCfSC_243_0_16, 105, -1, -1, 0, 5, 1, 1, 0, 
"C - - 0 - command C - - 0 - answer "
"i - - 0 '0' size g - - 0 'true' ret_answer "
"g - - 0 'true' send_command", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SendProcedure",1331,G__libLHCfSC_243_0_17, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - com C - - 0 - answer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsConnect",902,G__libLHCfSC_243_0_18, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,G__libLHCfSC_243_0_19, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnLock",588,G__libLHCfSC_243_0_20, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLock",581,G__libLHCfSC_243_0_21, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SocketOpen",1019,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SocketConnect",1331,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 2, 0, "C - - 0 - serverhostname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SocketClose",1119,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SocketWrite",1140,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 2, 0, 
"C - - 0 - val i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SocketRead",997,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 2, 0, 
"C - - 0 - val i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SocketRecv",1017,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 3, 1, 2, 0, 
"C - - 0 - val i - - 0 - n "
"i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SocketControl", 1354, G__libLHCfSC_243_0_28, (int) ('i'), G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl), -1, 0, 1, 1, 1, 0, "u 'SocketControl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SocketControl", 1480, G__libLHCfSC_243_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__libLHCfSC_243_0_30, (int) ('u'), G__get_linked_tagnum(&G__libLHCfSCLN_SocketControl), -1, 1, 1, 1, 1, 0, "u 'SocketControl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunclibLHCfSC() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globallibLHCfSC() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funclibLHCfSC() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__libLHCfSCLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_LHCFSDATA_HEADER = { "LHCFSDATA_HEADER" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_CPWS_CH = { "CPWS_CH" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_CPWS1_DATA = { "CPWS1_DATA" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_CPWS2_DATA = { "CPWS2_DATA" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_AGILENT_CH = { "AGILENT_CH" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_AGILENT_MOD = { "AGILENT_MOD" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_AGILENT_DATA = { "AGILENT_DATA" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_TRHX_DATA = { "TRHX_DATA" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_ENCODER_DATA = { "ENCODER_DATA" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_ADC_DATA = { "ADC_DATA" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_LHCFSDATA = { "LHCFSDATA" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TLHCFSDATA = { "TLHCFSDATA" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_Arm = { "DIP_LHCF_Arm" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_COINCIDENCE = { "DIP_LHCF_COINCIDENCE" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS = { "DIP_LHCF_EXPTSTATUS" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_INTERLOCK = { "DIP_LHCF_INTERLOCK" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_LUMINOSITY = { "DIP_LHCF_LUMINOSITY" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION = { "DIP_LHCF_HS_LHC_INJECTION" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST = { "DIP_LHCF_HS_LHC_ADJUST" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP = { "DIP_LHCF_HS_LHC_BEAMDUMP" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_BPM = { "DIP_ACC_BEAM_BPM" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M = { "DIP_ACC_BEAM_BPM_M" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY = { "DIP_ACC_BEAM_ENERGY" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY = { "DIP_ACC_BEAM_INTENSITY" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH = { "DIP_ACC_BEAM_INTENSITYPERBUNCH" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S = { "DIP_ACC_BEAM_INTENSITYPERBUNCH_S" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE = { "DIP_ACC_BEAM_LUMINOSITYAVERAGE" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH = { "DIP_ACC_BEAM_LUMINOSITYPERBUNCH" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN = { "DIP_ACC_BEAM_LUMINOSITYSCAN" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_SIZE = { "DIP_ACC_BEAM_SIZE" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE = { "DIP_ACC_BEAM_SIZE_AVERAGE" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER = { "DIP_ACC_BEAM_WIRESCANNER" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR = { "DIP_ACC_BEAM_BETASTAR" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION = { "DIP_ACC_HS_LHC_INJECTION" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST = { "DIP_ACC_HS_LHC_ADJUST" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP = { "DIP_ACC_HS_LHC_BEAMDUMP" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE = { "DIP_ACC_RUNCONTROL_BEAMMODE" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG = { "DIP_ACC_RUNCONTROL_BUNCHCONFIG" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER = { "DIP_ACC_RUNCONTROL_FILLNUMBER" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA = { "DIP_ACC_RUNCONTROL_FILLSCHEMA" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE = { "DIP_ACC_RUNCONTROL_MACHINEMODE" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE = { "DIP_ACC_RUNCONTROL_PAGE" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM = { "DIP_ACC_RUNCONTROL_SAFEBEAM" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION = { "DIP_ACC_RUNCONTROL_RUNCONFIGURATION" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM = { "DIP_ACC_TIMING_POSTMORTEM" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS = { "DIP_ACC_TIMING_RXCLOCKS" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV = { "DIP_ACC_TIMING_RXFREV" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION = { "DIP_ACC_MACHINE_COLLPOSITION" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION = { "DIP_ATLAS_CLOCK_SELECTION" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ATLAS_FILLLUMI = { "DIP_ATLAS_FILLLUMI" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH = { "DIP_ATLAS_LUMIPERBUNCH" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY = { "DIP_ATLAS_LUMINOSITY" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_DIP_LHCF_DOSIMETER = { "DIP_LHCF_DOSIMETER" , 115 , -1 };
G__linked_taginfo G__libLHCfSCLN_LHCFDIPDATAH = { "LHCFDIPDATAH" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_LHCFDIPDATAL = { "LHCFDIPDATAL" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_LHCFDIPDATAVH = { "LHCFDIPDATAVH" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TLHCFDIPDATAH = { "TLHCFDIPDATAH" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TLHCFDIPDATAL = { "TLHCFDIPDATAL" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_TLHCFDIPDATAVH = { "TLHCFDIPDATAVH" , 99 , -1 };
G__linked_taginfo G__libLHCfSCLN_SocketControl = { "SocketControl" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablelibLHCfSC() {
  G__libLHCfSCLN_TClass.tagnum = -1 ;
  G__libLHCfSCLN_TBuffer.tagnum = -1 ;
  G__libLHCfSCLN_TMemberInspector.tagnum = -1 ;
  G__libLHCfSCLN_TObject.tagnum = -1 ;
  G__libLHCfSCLN_TNamed.tagnum = -1 ;
  G__libLHCfSCLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__libLHCfSCLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libLHCfSCLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__libLHCfSCLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__libLHCfSCLN_LHCFSDATA_HEADER.tagnum = -1 ;
  G__libLHCfSCLN_CPWS_CH.tagnum = -1 ;
  G__libLHCfSCLN_CPWS1_DATA.tagnum = -1 ;
  G__libLHCfSCLN_CPWS2_DATA.tagnum = -1 ;
  G__libLHCfSCLN_AGILENT_CH.tagnum = -1 ;
  G__libLHCfSCLN_AGILENT_MOD.tagnum = -1 ;
  G__libLHCfSCLN_AGILENT_DATA.tagnum = -1 ;
  G__libLHCfSCLN_TRHX_DATA.tagnum = -1 ;
  G__libLHCfSCLN_ENCODER_DATA.tagnum = -1 ;
  G__libLHCfSCLN_ADC_DATA.tagnum = -1 ;
  G__libLHCfSCLN_LHCFSDATA.tagnum = -1 ;
  G__libLHCfSCLN_TLHCFSDATA.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_Arm.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_COINCIDENCE.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_INTERLOCK.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_LUMINOSITY.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_BPM.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_SIZE.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ATLAS_FILLLUMI.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH.tagnum = -1 ;
  G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY.tagnum = -1 ;
  G__libLHCfSCLN_DIP_LHCF_DOSIMETER.tagnum = -1 ;
  G__libLHCfSCLN_LHCFDIPDATAH.tagnum = -1 ;
  G__libLHCfSCLN_LHCFDIPDATAL.tagnum = -1 ;
  G__libLHCfSCLN_LHCFDIPDATAVH.tagnum = -1 ;
  G__libLHCfSCLN_TLHCFDIPDATAH.tagnum = -1 ;
  G__libLHCfSCLN_TLHCFDIPDATAL.tagnum = -1 ;
  G__libLHCfSCLN_TLHCFDIPDATAVH.tagnum = -1 ;
  G__libLHCfSCLN_SocketControl.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablelibLHCfSC() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TClass);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TObject);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TNamed);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__libLHCfSCLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_LHCFSDATA_HEADER),sizeof(LHCFSDATA_HEADER),-1,262144,(char*)NULL,G__setup_memvarLHCFSDATA_HEADER,G__setup_memfuncLHCFSDATA_HEADER);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_CPWS_CH),sizeof(CPWS_CH),-1,262144,(char*)NULL,G__setup_memvarCPWS_CH,G__setup_memfuncCPWS_CH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_CPWS1_DATA),sizeof(CPWS1_DATA),-1,262144,(char*)NULL,G__setup_memvarCPWS1_DATA,G__setup_memfuncCPWS1_DATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_CPWS2_DATA),sizeof(CPWS2_DATA),-1,262144,(char*)NULL,G__setup_memvarCPWS2_DATA,G__setup_memfuncCPWS2_DATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_AGILENT_CH),sizeof(AGILENT_CH),-1,262144,(char*)NULL,G__setup_memvarAGILENT_CH,G__setup_memfuncAGILENT_CH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_AGILENT_MOD),sizeof(AGILENT_MOD),-1,262144,(char*)NULL,G__setup_memvarAGILENT_MOD,G__setup_memfuncAGILENT_MOD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_AGILENT_DATA),sizeof(AGILENT_DATA),-1,262144,(char*)NULL,G__setup_memvarAGILENT_DATA,G__setup_memfuncAGILENT_DATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TRHX_DATA),sizeof(TRHX_DATA),-1,262144,(char*)NULL,G__setup_memvarTRHX_DATA,G__setup_memfuncTRHX_DATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_ENCODER_DATA),sizeof(ENCODER_DATA),-1,262144,(char*)NULL,G__setup_memvarENCODER_DATA,G__setup_memfuncENCODER_DATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_ADC_DATA),sizeof(ADC_DATA),-1,262144,(char*)NULL,G__setup_memvarADC_DATA,G__setup_memfuncADC_DATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_LHCFSDATA),sizeof(LHCFSDATA),-1,262400,(char*)NULL,G__setup_memvarLHCFSDATA,G__setup_memfuncLHCFSDATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TLHCFSDATA),sizeof(TLHCFSDATA),-1,62720,(char*)NULL,G__setup_memvarTLHCFSDATA,G__setup_memfuncTLHCFSDATA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_Arm),sizeof(DIP_LHCF_Arm),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_Arm,G__setup_memfuncDIP_LHCF_Arm);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_COINCIDENCE),sizeof(DIP_LHCF_COINCIDENCE),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_COINCIDENCE,G__setup_memfuncDIP_LHCF_COINCIDENCE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_EXPTSTATUS),sizeof(DIP_LHCF_EXPTSTATUS),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_EXPTSTATUS,G__setup_memfuncDIP_LHCF_EXPTSTATUS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_INTERLOCK),sizeof(DIP_LHCF_INTERLOCK),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_INTERLOCK,G__setup_memfuncDIP_LHCF_INTERLOCK);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_LUMINOSITY),sizeof(DIP_LHCF_LUMINOSITY),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_LUMINOSITY,G__setup_memfuncDIP_LHCF_LUMINOSITY);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_INJECTION),sizeof(DIP_LHCF_HS_LHC_INJECTION),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_HS_LHC_INJECTION,G__setup_memfuncDIP_LHCF_HS_LHC_INJECTION);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_ADJUST),sizeof(DIP_LHCF_HS_LHC_ADJUST),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_HS_LHC_ADJUST,G__setup_memfuncDIP_LHCF_HS_LHC_ADJUST);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_HS_LHC_BEAMDUMP),sizeof(DIP_LHCF_HS_LHC_BEAMDUMP),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_HS_LHC_BEAMDUMP,G__setup_memfuncDIP_LHCF_HS_LHC_BEAMDUMP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM),sizeof(DIP_ACC_BEAM_BPM),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_BPM,G__setup_memfuncDIP_ACC_BEAM_BPM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_BPM_M),sizeof(DIP_ACC_BEAM_BPM_M),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_BPM_M,G__setup_memfuncDIP_ACC_BEAM_BPM_M);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_ENERGY),sizeof(DIP_ACC_BEAM_ENERGY),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_ENERGY,G__setup_memfuncDIP_ACC_BEAM_ENERGY);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITY),sizeof(DIP_ACC_BEAM_INTENSITY),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_INTENSITY,G__setup_memfuncDIP_ACC_BEAM_INTENSITY);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH),sizeof(DIP_ACC_BEAM_INTENSITYPERBUNCH),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_INTENSITYPERBUNCH,G__setup_memfuncDIP_ACC_BEAM_INTENSITYPERBUNCH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_INTENSITYPERBUNCH_S),sizeof(DIP_ACC_BEAM_INTENSITYPERBUNCH_S),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_INTENSITYPERBUNCH_S,G__setup_memfuncDIP_ACC_BEAM_INTENSITYPERBUNCH_S);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYAVERAGE),sizeof(DIP_ACC_BEAM_LUMINOSITYAVERAGE),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_LUMINOSITYAVERAGE,G__setup_memfuncDIP_ACC_BEAM_LUMINOSITYAVERAGE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYPERBUNCH),sizeof(DIP_ACC_BEAM_LUMINOSITYPERBUNCH),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_LUMINOSITYPERBUNCH,G__setup_memfuncDIP_ACC_BEAM_LUMINOSITYPERBUNCH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_LUMINOSITYSCAN),sizeof(DIP_ACC_BEAM_LUMINOSITYSCAN),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_LUMINOSITYSCAN,G__setup_memfuncDIP_ACC_BEAM_LUMINOSITYSCAN);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE),sizeof(DIP_ACC_BEAM_SIZE),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_SIZE,G__setup_memfuncDIP_ACC_BEAM_SIZE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_SIZE_AVERAGE),sizeof(DIP_ACC_BEAM_SIZE_AVERAGE),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_SIZE_AVERAGE,G__setup_memfuncDIP_ACC_BEAM_SIZE_AVERAGE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_WIRESCANNER),sizeof(DIP_ACC_BEAM_WIRESCANNER),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_WIRESCANNER,G__setup_memfuncDIP_ACC_BEAM_WIRESCANNER);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_BEAM_BETASTAR),sizeof(DIP_ACC_BEAM_BETASTAR),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_BEAM_BETASTAR,G__setup_memfuncDIP_ACC_BEAM_BETASTAR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_HS_LHC_INJECTION),sizeof(DIP_ACC_HS_LHC_INJECTION),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_HS_LHC_INJECTION,G__setup_memfuncDIP_ACC_HS_LHC_INJECTION);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_HS_LHC_ADJUST),sizeof(DIP_ACC_HS_LHC_ADJUST),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_HS_LHC_ADJUST,G__setup_memfuncDIP_ACC_HS_LHC_ADJUST);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_HS_LHC_BEAMDUMP),sizeof(DIP_ACC_HS_LHC_BEAMDUMP),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_HS_LHC_BEAMDUMP,G__setup_memfuncDIP_ACC_HS_LHC_BEAMDUMP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BEAMMODE),sizeof(DIP_ACC_RUNCONTROL_BEAMMODE),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_BEAMMODE,G__setup_memfuncDIP_ACC_RUNCONTROL_BEAMMODE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_BUNCHCONFIG),sizeof(DIP_ACC_RUNCONTROL_BUNCHCONFIG),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_BUNCHCONFIG,G__setup_memfuncDIP_ACC_RUNCONTROL_BUNCHCONFIG);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLNUMBER),sizeof(DIP_ACC_RUNCONTROL_FILLNUMBER),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_FILLNUMBER,G__setup_memfuncDIP_ACC_RUNCONTROL_FILLNUMBER);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_FILLSCHEMA),sizeof(DIP_ACC_RUNCONTROL_FILLSCHEMA),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_FILLSCHEMA,G__setup_memfuncDIP_ACC_RUNCONTROL_FILLSCHEMA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_MACHINEMODE),sizeof(DIP_ACC_RUNCONTROL_MACHINEMODE),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_MACHINEMODE,G__setup_memfuncDIP_ACC_RUNCONTROL_MACHINEMODE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_PAGE),sizeof(DIP_ACC_RUNCONTROL_PAGE),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_PAGE,G__setup_memfuncDIP_ACC_RUNCONTROL_PAGE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_SAFEBEAM),sizeof(DIP_ACC_RUNCONTROL_SAFEBEAM),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_SAFEBEAM,G__setup_memfuncDIP_ACC_RUNCONTROL_SAFEBEAM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_RUNCONTROL_RUNCONFIGURATION),sizeof(DIP_ACC_RUNCONTROL_RUNCONFIGURATION),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_RUNCONTROL_RUNCONFIGURATION,G__setup_memfuncDIP_ACC_RUNCONTROL_RUNCONFIGURATION);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_TIMING_POSTMORTEM),sizeof(DIP_ACC_TIMING_POSTMORTEM),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_TIMING_POSTMORTEM,G__setup_memfuncDIP_ACC_TIMING_POSTMORTEM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_TIMING_RXCLOCKS),sizeof(DIP_ACC_TIMING_RXCLOCKS),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_TIMING_RXCLOCKS,G__setup_memfuncDIP_ACC_TIMING_RXCLOCKS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_TIMING_RXFREV),sizeof(DIP_ACC_TIMING_RXFREV),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_TIMING_RXFREV,G__setup_memfuncDIP_ACC_TIMING_RXFREV);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ACC_MACHINE_COLLPOSITION),sizeof(DIP_ACC_MACHINE_COLLPOSITION),-1,262144,(char*)NULL,G__setup_memvarDIP_ACC_MACHINE_COLLPOSITION,G__setup_memfuncDIP_ACC_MACHINE_COLLPOSITION);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ATLAS_CLOCK_SELECTION),sizeof(DIP_ATLAS_CLOCK_SELECTION),-1,262144,(char*)NULL,G__setup_memvarDIP_ATLAS_CLOCK_SELECTION,G__setup_memfuncDIP_ATLAS_CLOCK_SELECTION);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ATLAS_FILLLUMI),sizeof(DIP_ATLAS_FILLLUMI),-1,262144,(char*)NULL,G__setup_memvarDIP_ATLAS_FILLLUMI,G__setup_memfuncDIP_ATLAS_FILLLUMI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ATLAS_LUMIPERBUNCH),sizeof(DIP_ATLAS_LUMIPERBUNCH),-1,262144,(char*)NULL,G__setup_memvarDIP_ATLAS_LUMIPERBUNCH,G__setup_memfuncDIP_ATLAS_LUMIPERBUNCH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_ATLAS_LUMINOSITY),sizeof(DIP_ATLAS_LUMINOSITY),-1,262144,(char*)NULL,G__setup_memvarDIP_ATLAS_LUMINOSITY,G__setup_memfuncDIP_ATLAS_LUMINOSITY);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_DIP_LHCF_DOSIMETER),sizeof(DIP_LHCF_DOSIMETER),-1,262144,(char*)NULL,G__setup_memvarDIP_LHCF_DOSIMETER,G__setup_memfuncDIP_LHCF_DOSIMETER);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_LHCFDIPDATAH),sizeof(LHCFDIPDATAH),-1,262400,(char*)NULL,G__setup_memvarLHCFDIPDATAH,G__setup_memfuncLHCFDIPDATAH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_LHCFDIPDATAL),sizeof(LHCFDIPDATAL),-1,262400,(char*)NULL,G__setup_memvarLHCFDIPDATAL,G__setup_memfuncLHCFDIPDATAL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_LHCFDIPDATAVH),sizeof(LHCFDIPDATAVH),-1,262400,(char*)NULL,G__setup_memvarLHCFDIPDATAVH,G__setup_memfuncLHCFDIPDATAVH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TLHCFDIPDATAH),sizeof(TLHCFDIPDATAH),-1,62720,(char*)NULL,G__setup_memvarTLHCFDIPDATAH,G__setup_memfuncTLHCFDIPDATAH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TLHCFDIPDATAL),sizeof(TLHCFDIPDATAL),-1,62720,(char*)NULL,G__setup_memvarTLHCFDIPDATAL,G__setup_memfuncTLHCFDIPDATAL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_TLHCFDIPDATAVH),sizeof(TLHCFDIPDATAVH),-1,62720,(char*)NULL,G__setup_memvarTLHCFDIPDATAVH,G__setup_memfuncTLHCFDIPDATAVH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__libLHCfSCLN_SocketControl),sizeof(SocketControl),-1,34048,(char*)NULL,G__setup_memvarSocketControl,G__setup_memfuncSocketControl);
}
extern "C" void G__cpp_setuplibLHCfSC(void) {
  G__check_setup_version(30051515,"G__cpp_setuplibLHCfSC()");
  G__set_cpp_environmentlibLHCfSC();
  G__cpp_setup_tagtablelibLHCfSC();

  G__cpp_setup_inheritancelibLHCfSC();

  G__cpp_setup_typetablelibLHCfSC();

  G__cpp_setup_memvarlibLHCfSC();

  G__cpp_setup_memfunclibLHCfSC();
  G__cpp_setup_globallibLHCfSC();
  G__cpp_setup_funclibLHCfSC();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunclibLHCfSC();
  return;
}
class G__cpp_setup_initlibLHCfSC {
  public:
    G__cpp_setup_initlibLHCfSC() { G__add_setup_func("libLHCfSC",(G__incsetup)(&G__cpp_setuplibLHCfSC)); G__call_setup_funcs(); }
   ~G__cpp_setup_initlibLHCfSC() { G__remove_setup_func("libLHCfSC"); }
};
G__cpp_setup_initlibLHCfSC G__cpp_setup_initializerlibLHCfSC;

