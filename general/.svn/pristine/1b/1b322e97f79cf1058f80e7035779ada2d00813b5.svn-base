/************************************************************************\

            The simplest code for touching raw data of RHICf  

                  Class References can be found in 
  http://lhcfs1.stelab.nagoya-u.ac.jp/analysis/ClassIndex/ClassIndex.html

\************************************************************************/
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
using namespace std;

#include <TROOT.h>
#include <TApplication.h>
#include <TFile.h>
#include <TChain.h>

#include <LHCfEvent.h>
#include <RHICfRaw_Op2017.h>
#include <RHICfScl_Op2017.h>

// typedef just for simplicity 
typedef LHCfEvent        RHICfEvent;
typedef RHICfRaw_Op2017  RHICfRaw;
typedef RHICfScl_Op2017  RHICfScl;

void printhelp(){
  cout << "./sample_eventloop -i inputfile " << endl;
}

/////////////////////////////////////////////////////////////////////
//                              MAIN 
/////////////////////////////////////////////////////////////////////
int main(int argc,char **argv){

  vector<string> inputfiles;
  string         outputfile = "";
  for(int i=1;i<argc;i++){
	 string ss = argv[i];
	 if(ss=="-i"){
		inputfiles.push_back(argv[++i]);
	 }
	 if(ss=="-h" || ss=="--help"){
		printhelp();
		return -1;
	 }
  }

  if(inputfiles.size()==0){
	 printhelp();
	 return -1;
  }

  TApplication app("sample",&argc,argv);
  
  // +++++++++++++++++++ OPEN DATA FILES +++++++++++++++++++++++
  RHICfEvent *ev = new RHICfEvent();
  TChain* tree = new TChain("LHCfEvents");  // Must be used "LHCfEvents" 
  for(int i=0;i<inputfiles.size();i++){ 
    tree->Add(inputfiles[i].c_str());
  }
  tree->SetBranchAddress("ev.",&ev);
  int nev = tree->GetEntries();

  // ++++++++++++++++++++++ EVENT LOOP ++++++++++++++++++++++++++
  for(int i=0;i<nev;i++){
    ev->Delete();         // Delete must be called every event 
    tree->GetEntry(i);    
	 
 	 // For Trigger Events
	 if(ev->Check("a1raw")){
		RHICfRaw* raw = (RHICfRaw*) ev->Get("a1raw");
		// Print the event number and the flag value 
		// cout << ev->number << "   " << raw->gpio0[0] << endl;
	 }

	 // For Scaler Events 
	 if(ev->Check("a1scl")){
		RHICfScl* scl = (RHICfScl*) ev->Get("a1scl");
		// Print BRAM Counter values 
		// for(int j=0;j<120;j++) cout << j << "  " << scl->counter[0] << endl;
	 }
	 
	 if(i&&i%1000==0)  {cerr << "*";}
	 if(i&&i%500000==0){cerr << i<<endl;}
	 
  } // End of loop
  cerr << endl;

  //app.Run();
  return 0;
}
